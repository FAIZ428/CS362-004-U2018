        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Demonstration of how to write unit tests for dominion-base
        -:    3: * Include the following lines in your makefile:
        -:    4: *
        -:    5: * testUpdateCoins: testUpdateCoins.c dominion.o rngs.o
        -:    6: *      gcc -o testUpdateCoins -g  testUpdateCoins.c dominion.o rngs.o $(CFLAGS)
        -:    7: * -----------------------------------------------------------------------
        -:    8: */
        -:    9:
        -:   10:#include "dominion.h"
        -:   11:#include "dominion_helpers.h"
        -:   12:#include <string.h>
        -:   13:#include <stdio.h>
        -:   14:#include <assert.h>
        -:   15:#include "rngs.h"
        -:   16:
        -:   17:int main() {
        -:   18:    int i;
        2:   19:    int seed = 1000;
        2:   20:    int numPlayer = 2;
        2:   21:    int maxBonus = 10;
        -:   22:    int p, r, handCount;
        -:   23:    int bonus;
        2:   24:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   25:               , remodel, smithy, village, baron, great_hall};
        -:   26:    struct gameState G;
        -:   27:	
        2:   28:    int maxHandCount = 5;
        -:   29:    // arrays of all coppers, silvers, and golds
        -:   30:    int coppers[MAX_HAND];
        -:   31:    int silvers[MAX_HAND];
        -:   32:    int golds[MAX_HAND];
     2004:   33:    for (i = 0; i < MAX_HAND; i++)
        -:   34:    {
     1000:   35:        coppers[i] = copper;
     1000:   36:        silvers[i] = silver;
     1000:   37:        golds[i] = gold;
     1000:   38:    }
        2:   39:	bonus = 0;
        2:   40:    printf ("TESTING council room():\n");
        -:   41:	
        2:   42:				numPlayer = 2;
        -:   43:
        2:   44:	printf("test 1 add council_room to index 0 (hand position 1) and use card effect of council_room on player 2\n");
        2:   45:                memset(&G, 23, sizeof(struct gameState));   // clear the game state
        2:   46:                r = initializeGame(numPlayer, k, seed, &G); // initialize a new game
        -:   47:															// set the number of cards on hand
        -:   48:
        2:   49:				G.hand[1][0] = council_room;
        2:   50:				G.handCount[1]++;
        2:   51:				G.handCount[1];
        -:   52:
        2:   53:				G.whoseTurn = 1;
        2:   54:				int total = 0;
        -:   55:				int h;
        -:   56:
        2:   57:				int firstDeckcount = G.deckCount[1];
      112:   58:				for (h = 0; h < 27; h++)
       54:   59:					total += fullDeckCount(1, h, &G);
        -:   60:				
        2:   61:				int x = cardEffect(council_room, -1, -1, -1, &G, 0, bonus);//play smithy from index 0 of hand
        -:   62:				
        2:   63:				int newtotal = 0;
      112:   64:				for (h = 0; h < 27; h++)
       54:   65:					newtotal += fullDeckCount(1, h, &G);
        2:   66:				printf("test 1A: are there two buys after the council room card is played?\n");
        2:   67:				if(G.numBuys == 2)
    #####:   68:					printf("test passed, there are 2 buys for player 2\n");
        -:   69:				else
        2:   70:					printf("test failed, there aren't 2 buys for player 2, there are %d buys\n", G.numBuys);
        2:   71:				printf("test 1B: are there 4 cards in Player 2's hand after council room is played?\n");
        2:   72:				if(G.handCount[1] == 4)
        2:   73:					printf("test passed, there are 4 cards in Player 2's hand\n");
        -:   74:				else
    #####:   75:					printf("test failed, there aren't 4 cards in Player 2's hand\n");
        2:   76:				printf("test 1C: were there any cards trashed unnecessarily from player 2's hand?\n");
        2:   77:				if(total == newtotal)
    #####:   78:					printf("test passed, no cards were trashed unnecessarily from Player 2's hand\n");
        2:   79:				else if(total < newtotal)
    #####:   80:					printf("test failed, %d card(s) was/were added unnecessarily to Player 2's hand\n", newtotal - total);
        -:   81:				else
        2:   82:					printf("test failed, %d card(s) was/were trashed unnecessarily from Player 2's hand\n", total - newtotal);
        2:   83:				printf("test 1D: were four cards successfully drawn from the deck?\n");
        2:   84:				if(G.deckCount[1] == (firstDeckcount - 4))
        2:   85:					printf("test passed, four cards were drawn from the deck \n");
        -:   86:				else
    #####:   87:					printf("test failed, four cards weren't drawn from the deck \n");
        -:   88:				
        2:   89:	printf("\ntest 2 add council_room to index 0 (hand position 1) and use card effect of council_room on player 1\n");
        2:   90:                memset(&G, 23, sizeof(struct gameState));   // clear the game state
        2:   91:                r = initializeGame(numPlayer, k, seed, &G); // initialize a new game
        -:   92:															// set the number of cards on hand
        -:   93:
        2:   94:				G.hand[0][5] = council_room;
        2:   95:				G.handCount[0]++;
        2:   96:				G.handCount[0];
        -:   97:
        2:   98:				G.whoseTurn = 0;
        2:   99:				total = 0;
        -:  100:
        2:  101:				firstDeckcount = G.deckCount[0];
      112:  102:				for (h = 0; h < 27; h++)
       54:  103:					total += fullDeckCount(0, h, &G);
        -:  104:
        2:  105:				int z = cardEffect(council_room, -1, -1, -1, &G, 5, bonus);//play smithy from index 0 of hand
        -:  106:				
        2:  107:				newtotal = 0;
      112:  108:				for (h = 0; h < 27; h++)
       54:  109:					newtotal += fullDeckCount(0, h, &G);
        2:  110:				printf("test 2A: are there two buys after the council room card is played?\n");
        2:  111:				if(G.numBuys == 2)
    #####:  112:					printf("test passed, there are 2 buys for player 1\n");
        -:  113:				else
        2:  114:					printf("test failed, there aren't 2 buys for player 1, there are %d buys\n", G.numBuys);
        2:  115:				printf("test 2B: are there 9 cards in Player 1's hand after council room is played?\n");
        2:  116:				if(G.handCount[0] == 9)
        2:  117:					printf("test passed, there are 9 cards in Player 1's hand\n");
        -:  118:				else
    #####:  119:					printf("test failed, there aren't 9 cards in Player 1's hand\n");
        2:  120:				printf("test 2C: were there any cards trashed unnecessarily from player 1's hand?\n");
        2:  121:				if(total == newtotal)
    #####:  122:					printf("test passed, no cards were trashed unnecessarily from Player 1's hand\n");
        2:  123:				else if(total < newtotal)
    #####:  124:					printf("test failed, %d card(s) was/were added unnecessarily to Player 1's hand\n", newtotal - total);
        -:  125:				else
        2:  126:					printf("test failed, %d card(s) was/were trashed unnecessarily from Player 1's hand\n", total - newtotal);
        2:  127:				printf("test 2D: were four cards successfully drawn from the deck?\n");
        2:  128:				if(G.deckCount[0] == (firstDeckcount - 4))
        2:  129:					printf("test passed, four cards were drawn from the deck \n");
        -:  130:				else
    #####:  131:					printf("test failed, four cards weren't drawn from the deck \n");
        -:  132:
        2:  133:    printf("All tests taken!\n");
        -:  134:
        2:  135:    return 0;
        -:  136:}
