        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <assert.h>
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:#include <stdlib.h>
        -:    8:#include <string.h>
        -:    9:
        -:   10:// verify the test
        -:   11:int counterVariable = 0 ; 
        -:   12:
        -:   13:
        -:   14:// assertTrue function to collect coverage
        -:   15:void assertTrueFunction(int x, int y){
        -:   16:
        4:   17:     if (x == y){
        4:   18:          printf("Test: PASSED\n" );
        4:   19:     }
        -:   20:
        -:   21:
        -:   22:     else {
    #####:   23:          printf("Test: FAILED" );
        -:   24:  
    #####:   25:     counterVariable++; 
        -:   26:}
        -:   27:
        4:   28:}
        -:   29:
        -:   30:
        -:   31:// main driver to test out the function
        -:   32:
        -:   33:int main(){
        -:   34:
        -:   35:	int r;
        2:   36:	int numPlayers = 2;
        -:   37:
        -:   38:	// the kingdom cards
        2:   39:	int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   40:               , remodel, smithy, village, baron, great_hall};
        -:   41:
        -:   42:
        -:   43:     struct gameState G;
        2:   44:     int seed = 2000;
        -:   45:
        2:   46:     printf ("TESTING fullDeckCount():\n");
        -:   47:
        2:   48:     memset(&G,23,sizeof(struct gameState));   // clear the game state
        -:   49:
        2:   50:     r = initializeGame(numPlayers,k,seed,&G);
        -:   51:
        2:   52:     G.supplyCount[province] = 1;
        -:   53:
        2:   54:     G.supplyCount[0] = 0;
        -:   55:
        2:   56:     G.supplyCount[1] = 0; 
        -:   57:
        2:   58:     G.supplyCount[2] = 0; 
        -:   59:
        2:   60:     printf("\nThree empty piles given\n");
        -:   61:
        -:   62:
        2:   63:     assertTrueFunction(isGameOver(&G),1);
        -:   64:
        -:   65:   	// verify that cards empty  
        2:   66:     G.supplyCount[0] = 1; 
        -:   67:
        2:   68:     G.supplyCount[1] = 1; 
        -:   69:
        2:   70:     G.supplyCount[2] = 1; 
        -:   71:
        -:   72:
        2:   73:     printf("\n The province Cards arent empty\n");
        2:   74:     printf("\n The Three supply piles arent empty\n");
        -:   75:
        -:   76:
        2:   77:     assertTrueFunction(isGameOver(&G),0);
        -:   78:
        -:   79:
        2:   80:     if (counterVariable){
        -:   81:
    #####:   82:     	printf("Test: Test Failed\n");
    #####:   83:     	printf("Test: Test Failed %d\n",counterVariable);
        -:   84:     
    #####:   85:     }
        -:   86:
        -:   87:     else {
        2:   88:     	printf("\nTest: Test passed\n\n");
        -:   89:     }
        -:   90:
        -:   91:
        2:   92:     return 0 ; 
        -:   93:
        -:   94:
        -:   95:
        -:   96:
        -:   97:
        -:   98:
        -:   99:
        -:  100:}
