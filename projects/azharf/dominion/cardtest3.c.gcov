        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <assert.h>
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:#include <stdlib.h>
        -:    8:#include <string.h>
        -:    9:
        -:   10:
        -:   11:// verify the test
        -:   12:int counterVariable = 0 ; 
        -:   13:
        -:   14:
        -:   15:// assertTrue function to collect coverage
function assertTrueFunction called 18 returned 100% blocks executed 100%
        -:   16:void assertTrueFunction(int x, int y){
        -:   17:
       18:   18:    if (x == y){
branch  0 taken 78%
branch  1 taken 22%
       14:   19:        printf("Test: PASSED\n" );
       14:   20:    }
        -:   21:
        -:   22:
        -:   23:    else {
        4:   24:        printf("Test: FAILED" );
        -:   25:    
        4:   26:    counterVariable ++; 
        -:   27:}
        -:   28:
       18:   29:}
        -:   30:
        -:   31:
        -:   32:
        -:   33:
        -:   34:
        -:   35:
function main called 1 returned 100% blocks executed 88%
        -:   36: int main(){
        -:   37:
        1:   38:				int choice_1 = 0 ;
        1:   39:    			int choice_2 = 0; 
        1:   40:    			int choice_3 = 0 ; 
        -:   41:    			
        1:   42:				int bonus = 0 ; 
        1:   43: 				int numPlayers = 2; 
        1:   44:    			int player_0 = 0;
        1:   45:    			int player_1 = 1 ; 
        -:   46:    			int cards; 
        1:   47:    			int handPos = 0 ;
        -:   48:
        1:   49:    			int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   50:               , remodel, smithy, village, baron, great_hall};
        -:   51:
        1:   52:               int seed = 200; 
        -:   53:
        -:   54:               struct gameState state , stateOriginal; 
        -:   55:
        1:   56:               printf("TESTING  council_room()\n");
        -:   57:
        1:   58:                memset(&state,23,sizeof(struct gameState)); 
        -:   59:
        1:   60:                memset(&stateOriginal,23,sizeof(struct gameState)); 
        -:   61:
        1:   62:                initializeGame(numPlayers, k , seed, &state);
        -:   63:
        1:   64:                memcpy(&stateOriginal,&state,sizeof(struct gameState));
        -:   65:                // call cardEffect function 
        1:   66:                cardEffect(council_room, choice_1, choice_2, choice_3,&state,handPos, &bonus);
        -:   67:
        -:   68:
        -:   69:
        1:   70:                printf("\n The player_0 gains 4 cards\n");
        1:   71:                assertTrueFunction(state.handCount[player_0],stateOriginal.handCount[player_0] + 3);
        -:   72:
        -:   73:
        -:   74:
        -:   75:
        1:   76:                 printf("\n The player_0 gains 4 cards in piles\n");
        1:   77:                 assertTrueFunction(state.handCount[player_0],stateOriginal.handCount[player_0] - 4);
        -:   78:
        1:   79:                 printf("\n The player_0 buys 4 cards \n");
        1:   80:                 assertTrueFunction(state.handCount[player_0],stateOriginal.handCount[player_0] + 1);
        -:   81:
        1:   82:                 	printf("\nvictory card piles is the same\n");
        -:   83:                 	
        1:   84:                 	printf("Province Pile\n");
        -:   85:                 	
        1:   86:                 	assertTrueFunction(state.supplyCount[province],stateOriginal.supplyCount[province]);
        -:   87:                     
        1:   88:                     printf("Duchy Pile\n");
        -:   89:                     
        1:   90:                     assertTrueFunction(state.supplyCount[duchy],stateOriginal.supplyCount[duchy]);
        -:   91:					
        1:   92:					printf("Estate Pile\n");
        -:   93:			    	
        1:   94:			    	assertTrueFunction(state.supplyCount[estate],stateOriginal.supplyCount[estate]);
        -:   95:
        -:   96:
        -:   97:
        -:   98:
        1:   99:			    	  	printf("\n kingdom card pile is the same\n");
       22:  100:			    	  	for (int i = 0; i<10; ++i){
branch  0 taken 91%
branch  1 taken 9%
       10:  101:    					printf("testing the cards piles . . . \n");
        -:  102:
       10:  103:    					assertTrueFunction(state.supplyCount [k[i]],stateOriginal.supplyCount[k[i]]);
        -:  104:		    		
        -:  105:
        -:  106:
        -:  107:				
       10:  108:}
        -:  109:
        1:  110:					printf("\nPlayer_1 gets a card\n");
        -:  111:
        -:  112:
        -:  113:
        1:  114:    				assertTrueFunction(state.handCount[player_1],stateOriginal.handCount[player_1] + 1);
        -:  115:
        1:  116:    				printf("\nPlayer_1 gets a card from deck\n");
        1:  117:    				 assertTrueFunction(state.handCount[player_1],stateOriginal.handCount[player_1] -1);
        -:  118:
        -:  119:    				 
        -:  120:
        -:  121:
        -:  122:
        -:  123:    				 
        1:  124:    			if(counterVariable){
branch  0 taken 100%
branch  1 taken 0%
        1:  125:                                    printf("\nTest: Test Failed\n");
        1:  126:                                    printf("Failed:  %d\n",counterVariable);
        -:  127:                                
        1:  128:                                }
        -:  129:
        -:  130:                                else {
        -:  131:
    #####:  132:                                    printf("\nTest: Test Concluded\n\n");
        -:  133:                                }
        -:  134:
        -:  135:
        -:  136:
        1:  137:                                return 0 ; 
        -:  138:
        -:  139:
        -:  140:
        -:  141:
        -:  142:
        -:  143:
        -:  144:
        -:  145:}
        -:  146:
        -:  147:
        -:  148:
        -:  149:
        -:  150:
        -:  151:
        -:  152:
        -:  153:
        -:  154:
        -:  155:
        -:  156:
        -:  157:
        -:  158:
