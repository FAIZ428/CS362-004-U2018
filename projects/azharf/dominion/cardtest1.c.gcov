        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <assert.h>
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:#include <stdlib.h>
        -:    8:#include <string.h>
        -:    9:
        -:   10:
        -:   11:
        -:   12:
        -:   13:// verify the test
        -:   14:int counterVariable = 0 ; 
        -:   15:
        -:   16:
        -:   17:// assertTrue function to collect coverage
function assertTrueFunction called 18 returned 100% blocks executed 100%
        -:   18:void assertTrueFunction(int x, int y){
        -:   19:
       18:   20:    if (x == y){
branch  0 taken 72%
branch  1 taken 28%
       13:   21:        printf("Test: PASSED\n" );
       13:   22:    }
        -:   23:
        -:   24:
        -:   25:    else {
        5:   26:        printf("Test: FAILED" );
        -:   27:    
        5:   28:    counterVariable ++; 
        -:   29:}
        -:   30:
       18:   31:}
        -:   32:
        -:   33:
        -:   34:
        -:   35:
        -:   36:
function main called 1 returned 100% blocks executed 88%
        -:   37:int main(){
        -:   38:
        -:   39:
        1:   40:int choice_1 = 0 ;
        1:   41:          int choice_2 = 0; 
        1:   42:          int choice_3 = 0 ; 
        -:   43:          
        1:   44:        int bonus = 0 ; 
        1:   45:        int numPlayers = 2; 
        1:   46:          int player_0 = 0;
        1:   47:          int player_1 = 1 ; 
        -:   48:          int cards; 
        1:   49:          int handPos = 0 ;
        -:   50:
        1:   51:          int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   52:               , remodel, smithy, village, baron, great_hall};
        -:   53:
        1:   54:               int seed = 2000; 
        -:   55:
        -:   56:               struct gameState state , stateOriginal; 
        -:   57:
        1:   58:               printf("TESTING  feast()\n");
        -:   59:
        1:   60:                memset(&state,23,sizeof(struct gameState)); 
        -:   61:
        1:   62:                memset(&stateOriginal,23,sizeof(struct gameState)); 
        -:   63:
        1:   64:                initializeGame(numPlayers, k , seed, &state);
        -:   65:
        1:   66:                memcpy(&stateOriginal,&state,sizeof(struct gameState));
        -:   67:                // call cardEffect function 
        1:   68:                cardEffect(feast, choice_1, choice_2, choice_3,&state,handPos, &bonus);
        -:   69:
        -:   70:
        -:   71:
        1:   72:                printf("\n The player_0 gains 4 cards\n");
        1:   73:                assertTrueFunction(state.handCount[player_0],stateOriginal.handCount[player_0] + 3);
        -:   74:
        -:   75:
        -:   76:
        -:   77:
        1:   78:                 printf("\n The player_0 gains 4 cards in piles\n");
        1:   79:                 assertTrueFunction(state.handCount[player_0],stateOriginal.handCount[player_0] - 4);
        -:   80:
        1:   81:                 printf("\n The player_0 buys 4 cards \n");
        1:   82:                 assertTrueFunction(state.handCount[player_0],stateOriginal.handCount[player_0] + 1);
        -:   83:
        1:   84:                  printf("\nvictory card piles is the same\n");
        -:   85:                  
        1:   86:                  printf("Province Pile\n");
        -:   87:                  
        1:   88:                  assertTrueFunction(state.supplyCount[province],stateOriginal.supplyCount[province]);
        -:   89:                     
        1:   90:                     printf("Duchy Pile\n");
        -:   91:                     
        1:   92:                     assertTrueFunction(state.supplyCount[duchy],stateOriginal.supplyCount[duchy]);
        -:   93:          
        1:   94:          printf("Estate Pile\n");
        -:   95:            
        1:   96:            assertTrueFunction(state.supplyCount[estate],stateOriginal.supplyCount[estate]);
        -:   97:
        -:   98:
        -:   99:
        -:  100:
        1:  101:                printf("\n kingdom card pile is the same\n");
       22:  102:                for (int i = 0; i<10; ++i){
branch  0 taken 91%
branch  1 taken 9%
       10:  103:              printf("testing the cards piles . . . \n");
        -:  104:
       10:  105:              assertTrueFunction(state.supplyCount [k[i]],stateOriginal.supplyCount[k[i]]);
        -:  106:            
        -:  107:
        -:  108:
        -:  109:        
       10:  110:}
        -:  111:
        1:  112:          printf("\nPlayer_1 gets a card\n");
        -:  113:
        -:  114:
        -:  115:
        1:  116:            assertTrueFunction(state.handCount[player_1],stateOriginal.handCount[player_1] + 1);
        -:  117:
        1:  118:            printf("\nPlayer_1 gets a card from deck\n");
        1:  119:             assertTrueFunction(state.handCount[player_1],stateOriginal.handCount[player_1] -1);
        -:  120:
        -:  121:             
        -:  122:
        -:  123:
        -:  124:
        -:  125:             
        1:  126:          if(counterVariable){
branch  0 taken 100%
branch  1 taken 0%
        1:  127:                                    printf("\nTest: Test Failed\n");
        1:  128:                                    printf("Failed:  %d\n",counterVariable);
        -:  129:                                
        1:  130:                                }
        -:  131:
        -:  132:                                else {
        -:  133:
    #####:  134:                                    printf("\nTest: Test Concluded\n\n");
        -:  135:                                }
        -:  136:
        -:  137:
        -:  138:
        1:  139:                                return 0 ; 
        -:  140:
        -:  141:
        -:  142:
        -:  143:
        -:  144:
        -:  145:
        -:  146:
        -:  147:}
