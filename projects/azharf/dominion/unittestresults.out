Result for running Dominion test suit:
unittest1.c:
TESTING shuffle():

Player deck count = 0
Test: PASSED

 The player decks is 10 previously and post shuffle
Test: PASSED

 The cards have been shuffled
Test: PASSED

Test: Test passed

File 'unittest1.c'
Lines executed:81.82% of 33
unittest1.c:creating 'unittest1.c.gcov'

File 'dominion.c'
Lines executed:16.62% of 650
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include "rngs.h"
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:
        -:   10:
        -:   11:int compare(const void* a, const void* b) {
       56:   12:  if (*(int*)a > *(int*)b)
    #####:   13:    return 1;
       56:   14:  if (*(int*)a < *(int*)b)
       20:   15:    return -1;
       36:   16:  return 0;
       56:   17:}
        -:   18:
        -:   19:
        -:   20:
        -:   21:struct gameState* newGame() {
    #####:   22:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   23:  return g;
        -:   24:}
        -:   25:
        -:   26:
        -:   27:
        -:   28:
        -:   29:
        -:   30:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   31:      int k8, int k9, int k10) {
    #####:   32:  int* k = malloc(10 * sizeof(int));
    #####:   33:  k[0] = k1;
    #####:   34:  k[1] = k2;
    #####:   35:  k[2] = k3;
    #####:   36:  k[3] = k4;
    #####:   37:  k[4] = k5;
    #####:   38:  k[5] = k6;
    #####:   39:  k[6] = k7;
    #####:   40:  k[7] = k8;
    #####:   41:  k[8] = k9;
    #####:   42:  k[9] = k10;
    #####:   43:  return k;
        -:   44:}
        -:   45:
        -:   46:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   47:       struct gameState *state) {
        -:   48:
        -:   49:  int i;
        -:   50:  int j;
        -:   51:  int it;     
        -:   52:  //set up random number generator
        1:   53:  SelectStream(1);
        1:   54:  PutSeed((long)randomSeed);
        -:   55:  
        -:   56:  //check number of players
        2:   57:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   58:    {
    #####:   59:      return -1;
        -:   60:    }
        -:   61:
        -:   62:  //set number of players
        1:   63:  state->numPlayers = numPlayers;
        -:   64:
        -:   65:  //check selected kingdom cards are different
       22:   66:  for (i = 0; i < 10; i++)
        -:   67:    {
      220:   68:      for (j = 0; j < 10; j++)
        -:   69:        {
      190:   70:    if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   71:      {
    #####:   72:        return -1;
        -:   73:      }
      100:   74:        }
       10:   75:    }
        -:   76:
        -:   77:
        -:   78:  //initialize supply
        -:   79:  ///////////////////////////////
        -:   80:
        -:   81:  //set number of Curse cards
        1:   82:  if (numPlayers == 2)
        -:   83:    {
        1:   84:      state->supplyCount[curse] = 10;
        1:   85:    }
    #####:   86:  else if (numPlayers == 3)
        -:   87:    {
    #####:   88:      state->supplyCount[curse] = 20;
    #####:   89:    }
        -:   90:  else
        -:   91:    {
    #####:   92:      state->supplyCount[curse] = 30;
        -:   93:    }
        -:   94:
        -:   95:  //set number of Victory cards
        1:   96:  if (numPlayers == 2)
        -:   97:    {
        1:   98:      state->supplyCount[estate] = 8;
        1:   99:      state->supplyCount[duchy] = 8;
        1:  100:      state->supplyCount[province] = 8;
        1:  101:    }
        -:  102:  else
        -:  103:    {
    #####:  104:      state->supplyCount[estate] = 12;
    #####:  105:      state->supplyCount[duchy] = 12;
    #####:  106:      state->supplyCount[province] = 12;
        -:  107:    }
        -:  108:
        -:  109:  //set number of Treasure cards
        1:  110:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  111:  state->supplyCount[silver] = 40;
        1:  112:  state->supplyCount[gold] = 30;
        -:  113:
        -:  114:  //set number of Kingdom cards
       42:  115:  for (i = adventurer; i <= treasure_map; i++)        //loop all cards
        -:  116:    {
      330:  117:      for (j = 0; j < 10; j++)              //loop chosen cards
        -:  118:  {
      155:  119:    if (kingdomCards[j] == i)
        -:  120:      {
        -:  121:        //check if card is a 'Victory' Kingdom card
       19:  122:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  123:    {
        2:  124:      if (numPlayers == 2){ 
        2:  125:        state->supplyCount[i] = 8; 
        2:  126:      }
    #####:  127:      else{ state->supplyCount[i] = 12; }
        2:  128:    }
        -:  129:        else
        -:  130:    {
        8:  131:      state->supplyCount[i] = 10;
        -:  132:    }
       10:  133:        break;
        -:  134:      }
        -:  135:    else    //card is not in the set choosen for the game
        -:  136:      {
      145:  137:        state->supplyCount[i] = -1;
        -:  138:      }
      145:  139:  }
        -:  140:
       20:  141:    }
        -:  142:
        -:  143:  ////////////////////////
        -:  144:  //supply intilization complete
        -:  145:
        -:  146:  //set player decks
        6:  147:  for (i = 0; i < numPlayers; i++)
        -:  148:    {
        2:  149:      state->deckCount[i] = 0;
       16:  150:      for (j = 0; j < 3; j++)
        -:  151:  {
        6:  152:    state->deck[i][j] = estate;
        6:  153:    state->deckCount[i]++;
        6:  154:  }
       32:  155:      for (j = 3; j < 10; j++)
        -:  156:  {
       14:  157:    state->deck[i][j] = copper;
       14:  158:    state->deckCount[i]++;    
       14:  159:  }
        2:  160:    }
        -:  161:
        -:  162:  //shuffle player decks
        6:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
        2:  165:      if ( shuffle(i, state) < 0 )
        -:  166:  {
    #####:  167:    return -1;
        -:  168:  }
        2:  169:    }
        -:  170:
        -:  171:  //draw player hands
        6:  172:  for (i = 0; i < numPlayers; i++)
        -:  173:    {  
        -:  174:      //initialize hand size to zero
        2:  175:      state->handCount[i] = 0;
        2:  176:      state->discardCount[i] = 0;
        -:  177:      //draw 5 cards
        -:  178:      // for (j = 0; j < 5; j++)
        -:  179:      //  {
        -:  180:      //    drawCard(i, state);
        -:  181:      //  }
        2:  182:    }
        -:  183:  
        -:  184:  //set embargo tokens to 0 for all supply piles
       56:  185:  for (i = 0; i <= treasure_map; i++)
        -:  186:    {
       27:  187:      state->embargoTokens[i] = 0;
       27:  188:    }
        -:  189:
        -:  190:  //initialize first player's turn
        1:  191:  state->outpostPlayed = 0;
        1:  192:  state->phase = 0;
        1:  193:  state->numActions = 1;
        1:  194:  state->numBuys = 1;
        1:  195:  state->playedCardCount = 0;
        1:  196:  state->whoseTurn = 0;
        1:  197:  state->handCount[state->whoseTurn] = 0;
        -:  198:  //int it; move to top
        -:  199:
        -:  200:  //Moved draw cards to here, only drawing at the start of a turn
       12:  201:  for (it = 0; it < 5; it++){
        5:  202:    drawCard(state->whoseTurn, state);
        5:  203:  }
        -:  204:
        1:  205:  updateCoins(state->whoseTurn, state, 0);
        -:  206:
        1:  207:  return 0;
        1:  208:}
        -:  209:
        -:  210:int shuffle(int player, struct gameState *state) {
        -:  211: 
        -:  212:
        -:  213:  int newDeck[MAX_DECK];
        5:  214:  int newDeckPos = 0;
        -:  215:  int card;
        -:  216:  int i;
        -:  217:
        5:  218:  if (state->deckCount[player] < 1)
        1:  219:    return -1;
        4:  220:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  221:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  222:
       88:  223:  while (state->deckCount[player] > 0) {
       40:  224:    card = floor(Random() * state->deckCount[player]);
       40:  225:    newDeck[newDeckPos] = state->deck[player][card];
       40:  226:    newDeckPos++;
      278:  227:    for (i = card; i < state->deckCount[player]-1; i++) {
       99:  228:      state->deck[player][i] = state->deck[player][i+1];
       99:  229:    }
       40:  230:    state->deckCount[player]--;
        -:  231:  }
       88:  232:  for (i = 0; i < newDeckPos; i++) {
       40:  233:    state->deck[player][i] = newDeck[i];
       40:  234:    state->deckCount[player]++;
       40:  235:  }
        -:  236:
        4:  237:  return 0;
        5:  238:}
        -:  239:
        -:  240:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  241:{ 
        -:  242:  int card;
    #####:  243:  int coin_bonus = 0;     //tracks coins gain from actions
        -:  244:
        -:  245:  //check if it is the right phase
    #####:  246:  if (state->phase != 0)
        -:  247:    {
    #####:  248:      return -1;
        -:  249:    }
        -:  250:  
        -:  251:  //check if player has enough actions
    #####:  252:  if ( state->numActions < 1 )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:  
        -:  257:  //get card played
    #####:  258:  card = handCard(handPos, state);
        -:  259:  
        -:  260:  //check if selected card is an action
    #####:  261:  if ( card < adventurer || card > treasure_map )
        -:  262:    {
    #####:  263:      return -1;
        -:  264:    }
        -:  265:  
        -:  266:  //play card
    #####:  267:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  268:    {
    #####:  269:      return -1;
        -:  270:    }
        -:  271:  
        -:  272:  //reduce number of actions
    #####:  273:  state->numActions--;
        -:  274:
        -:  275:  //update coins (Treasure cards may be added with card draws)
    #####:  276:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  277:  
    #####:  278:  return 0;
    #####:  279:}
        -:  280:
        -:  281:int buyCard(int supplyPos, struct gameState *state) {
        -:  282:  int who;
        -:  283:  if (DEBUG){
        -:  284:    printf("Entering buyCard...\n");
        -:  285:  }
        -:  286:
        -:  287:  // I don't know what to do about the phase thing.
        -:  288:
    #####:  289:  who = state->whoseTurn;
        -:  290:
    #####:  291:  if (state->numBuys < 1){
        -:  292:    if (DEBUG)
        -:  293:      printf("You do not have any buys left\n");
    #####:  294:    return -1;
    #####:  295:  } else if (supplyCount(supplyPos, state) <1){
        -:  296:    if (DEBUG)
        -:  297:      printf("There are not any of that type of card left\n");
    #####:  298:    return -1;
    #####:  299:  } else if (state->coins < getCost(supplyPos)){
        -:  300:    if (DEBUG) 
        -:  301:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  302:    return -1;
        -:  303:  } else {
    #####:  304:    state->phase=1;
        -:  305:    //state->supplyCount[supplyPos]--;
    #####:  306:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  307:  
    #####:  308:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  309:    state->numBuys--;
        -:  310:    if (DEBUG)
        -:  311:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  312:  }
        -:  313:
        -:  314:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  315:  //state->discardCount[who]++;
        -:  316:    
    #####:  317:  return 0;
    #####:  318:}
        -:  319:
        -:  320:
        -:  321:
        -:  322:int numHandCards(struct gameState *state) {
    #####:  323:  return state->handCount[ whoseTurn(state) ];
        -:  324:}
        -:  325:
        -:  326:int handCard(int handPos, struct gameState *state) {
    #####:  327:  int currentPlayer = whoseTurn(state);
    #####:  328:  return state->hand[currentPlayer][handPos];
        -:  329:}
        -:  330:
        -:  331:int supplyCount(int card, struct gameState *state) {
    #####:  332:  return state->supplyCount[card];
        -:  333:}
        -:  334:
        -:  335:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  336:  int i;
    #####:  337:  int count = 0;
        -:  338:
    #####:  339:  for (i = 0; i < state->deckCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->deck[player][i] == card) count++;
    #####:  342:    }
        -:  343:
    #####:  344:  for (i = 0; i < state->handCount[player]; i++)
        -:  345:    {
    #####:  346:      if (state->hand[player][i] == card) count++;
    #####:  347:    }
        -:  348:
    #####:  349:  for (i = 0; i < state->discardCount[player]; i++)
        -:  350:    {
    #####:  351:      if (state->discard[player][i] == card) count++;
    #####:  352:    }
        -:  353:
    #####:  354:  return count;
        -:  355:}
        -:  356:
        -:  357:int whoseTurn(struct gameState *state) {
    #####:  358:  return state->whoseTurn;
        -:  359:}
        -:  360:
        -:  361:
        -:  362:int endTurn(struct gameState *state) {
        -:  363:  int k;
        -:  364:  int i;
    #####:  365:  int currentPlayer = whoseTurn(state);
        -:  366:  
        -:  367:  //Discard hand
    #####:  368:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  369:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  370:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  371:  }
    #####:  372:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  373:    
        -:  374:  //Code for determining the player
    #####:  375:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  376:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  377:  }
        -:  378:  else{
    #####:  379:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  380:  }
        -:  381:
    #####:  382:  state->outpostPlayed = 0;
    #####:  383:  state->phase = 0;
    #####:  384:  state->numActions = 1;
    #####:  385:  state->coins = 0;
    #####:  386:  state->numBuys = 1;
    #####:  387:  state->playedCardCount = 0;
    #####:  388:  state->handCount[state->whoseTurn] = 0;
        -:  389:
        -:  390:  //int k; move to top
        -:  391:  //Next player draws hand
    #####:  392:  for (k = 0; k < 5; k++){
    #####:  393:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  394:  }
        -:  395:
        -:  396:  //Update money
    #####:  397:  updateCoins(state->whoseTurn, state , 0);
        -:  398:
    #####:  399:  return 0;
        -:  400:}
        -:  401:
        -:  402:
        -:  403:
        -:  404:
        -:  405:
        -:  406:int isGameOver(struct gameState *state) {
        -:  407:  int i;
        -:  408:  int j;
        -:  409:  
        -:  410:  //if stack of Province cards is empty, the game ends
    #####:  411:  if (state->supplyCount[province] == 0)
        -:  412:    {
    #####:  413:      return 1;
        -:  414:    }
        -:  415:
        -:  416:  //if three supply pile are at 0, the game ends
    #####:  417:  j = 0;
    #####:  418:  for (i = 0; i < 25; i++)
        -:  419:    {
    #####:  420:      if (state->supplyCount[i] == 0)
        -:  421:  {
    #####:  422:    j++;
    #####:  423:  }
    #####:  424:    }
    #####:  425:  if ( j >= 3)
        -:  426:    {
    #####:  427:      return 1;
        -:  428:    }
        -:  429:
    #####:  430:  return 0;
    #####:  431:}
        -:  432:
        -:  433:int scoreFor (int player, struct gameState *state) {
        -:  434:
        -:  435:  int i;
    #####:  436:  int score = 0;
        -:  437:  //score from hand
    #####:  438:  for (i = 0; i < state->handCount[player]; i++)
        -:  439:    {
    #####:  440:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  441:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  442:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  443:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  444:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  445:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  446:    }
        -:  447:
        -:  448:  //score from discard
    #####:  449:  for (i = 0; i < state->discardCount[player]; i++)
        -:  450:    {
    #####:  451:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  452:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  453:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  454:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  455:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  456:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  457:    }
        -:  458:
        -:  459:  //score from deck
    #####:  460:  for (i = 0; i < state->discardCount[player]; i++)
        -:  461:    {
    #####:  462:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  463:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  464:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  465:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  466:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  467:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  468:    }
        -:  469:
    #####:  470:  return score;
        -:  471:}
        -:  472:
        -:  473:
        -:  474:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  475:  int i;  
        -:  476:  int j;
        -:  477:  int highScore;
        -:  478:  int currentPlayer;
        -:  479:
        -:  480:  //get score for each player
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  482:    {
        -:  483:      //set unused player scores to -9999
    #####:  484:      if (i >= state->numPlayers)
        -:  485:  {
    #####:  486:    players[i] = -9999;
    #####:  487:  }
        -:  488:      else
        -:  489:  {
    #####:  490:    players[i] = scoreFor (i, state);
        -:  491:  }
    #####:  492:    }
        -:  493:
        -:  494:  //find highest score
    #####:  495:  j = 0;
    #####:  496:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  497:    {
    #####:  498:      if (players[i] > players[j])
        -:  499:  {
    #####:  500:    j = i;
    #####:  501:  }
    #####:  502:    }
    #####:  503:  highScore = players[j];
        -:  504:
        -:  505:  //add 1 to players who had less turns
    #####:  506:  currentPlayer = whoseTurn(state);
    #####:  507:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  508:    {
    #####:  509:      if ( players[i] == highScore && i > currentPlayer )
        -:  510:  {
    #####:  511:    players[i]++;
    #####:  512:  }
    #####:  513:    }
        -:  514:
        -:  515:  //find new highest score
    #####:  516:  j = 0;
    #####:  517:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  518:    {
    #####:  519:      if ( players[i] > players[j] )
        -:  520:  {
    #####:  521:    j = i;
    #####:  522:  }
    #####:  523:    }
    #####:  524:  highScore = players[j];
        -:  525:
        -:  526:  //set winners in array to 1 and rest to 0
    #####:  527:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  528:    {
    #####:  529:      if ( players[i] == highScore )
        -:  530:  {
    #####:  531:    players[i] = 1;
    #####:  532:  }
        -:  533:      else
        -:  534:  {
    #####:  535:    players[i] = 0;
        -:  536:  }
    #####:  537:    }
        -:  538:
    #####:  539:  return 0;
        -:  540:}
        -:  541:
        -:  542:
        -:  543:int drawCard(int player, struct gameState *state)
        -:  544:{ int count;
        -:  545:  int deckCounter;
        5:  546:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  547:    
        -:  548:    //Step 1 Shuffle the discard pile back into a deck
        -:  549:    int i;
        -:  550:    //Move discard to deck
    #####:  551:    for (i = 0; i < state->discardCount[player];i++){
    #####:  552:      state->deck[player][i] = state->discard[player][i];
    #####:  553:      state->discard[player][i] = -1;
    #####:  554:    }
        -:  555:
    #####:  556:    state->deckCount[player] = state->discardCount[player];
    #####:  557:    state->discardCount[player] = 0;//Reset discard
        -:  558:
        -:  559:    //Shufffle the deck
    #####:  560:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  561:   
        -:  562:    if (DEBUG){//Debug statements
        -:  563:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  564:    }
        -:  565:    
    #####:  566:    state->discardCount[player] = 0;
        -:  567:
        -:  568:    //Step 2 Draw Card
    #####:  569:    count = state->handCount[player];//Get current player's hand count
        -:  570:    
        -:  571:    if (DEBUG){//Debug statements
        -:  572:      printf("Current hand count: %d\n", count);
        -:  573:    }
        -:  574:    
    #####:  575:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  576:
    #####:  577:    if (deckCounter == 0)
    #####:  578:      return -1;
        -:  579:
    #####:  580:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  581:    state->deckCount[player]--;
    #####:  582:    state->handCount[player]++;//Increment hand count
    #####:  583:  }
        -:  584:
        -:  585:  else{
        5:  586:    int count = state->handCount[player];//Get current hand count for player
        -:  587:    int deckCounter;
        -:  588:    if (DEBUG){//Debug statements
        -:  589:      printf("Current hand count: %d\n", count);
        -:  590:    }
        -:  591:
        5:  592:    deckCounter = state->deckCount[player];//Create holder for the deck count
        5:  593:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        5:  594:    state->deckCount[player]--;
        5:  595:    state->handCount[player]++;//Increment hand count
        -:  596:  }
        -:  597:
        5:  598:  return 0;
        5:  599:}
        -:  600:
        -:  601:
        -:  602:
        -:  603:
        -:  604:
        -:  605:
        -:  606:
        -:  607:int getCost(int cardNumber)
        -:  608:{
    #####:  609:  switch( cardNumber ) 
        -:  610:    {
        -:  611:    case curse:
    #####:  612:      return 0;
        -:  613:    case estate:
    #####:  614:      return 2;
        -:  615:    case duchy:
    #####:  616:      return 5;
        -:  617:    case province:
    #####:  618:      return 8;
        -:  619:    case copper:
    #####:  620:      return 0;
        -:  621:    case silver:
    #####:  622:      return 3;
        -:  623:    case gold:
    #####:  624:      return 6;
        -:  625:
        -:  626:
        -:  627:
        -:  628:
        -:  629:
        -:  630:    case adventurer:
    #####:  631:      return 6;
        -:  632:    
        -:  633:
        -:  634:
        -:  635:
        -:  636:    case council_room:
    #####:  637:      return 5;
        -:  638:    
        -:  639:
        -:  640:
        -:  641:    case feast:
    #####:  642:      return 4;
        -:  643:    
        -:  644:
        -:  645:
        -:  646:
        -:  647:
        -:  648:    case gardens:
    #####:  649:      return 4;
        -:  650:    case mine:
    #####:  651:      return 5;
        -:  652:    case remodel:
    #####:  653:      return 4;
        -:  654:
        -:  655:
        -:  656:
        -:  657:    case smithy:
    #####:  658:      return 4;
        -:  659:    
        -:  660:
        -:  661:
        -:  662:
        -:  663:
        -:  664:
        -:  665:    case village:
    #####:  666:      return 3;
        -:  667:    case baron:
    #####:  668:      return 4;
        -:  669:    case great_hall:
    #####:  670:      return 3;
        -:  671:    case minion:
    #####:  672:      return 5;
        -:  673:    case steward:
    #####:  674:      return 3;
        -:  675:    case tribute:
    #####:  676:      return 5;
        -:  677:    case ambassador:
    #####:  678:      return 3;
        -:  679:    case cutpurse:
    #####:  680:      return 4;
        -:  681:    case embargo: 
    #####:  682:      return 2;
        -:  683:    case outpost:
    #####:  684:      return 5;
        -:  685:    case salvager:
    #####:  686:      return 4;
        -:  687:    case sea_hag:
    #####:  688:      return 4;
        -:  689:    case treasure_map:
    #####:  690:      return 4;
        -:  691:    }
        -:  692:  
    #####:  693:  return -1;
    #####:  694:}
        -:  695:
        -:  696:
        -:  697:
        -:  698:
        -:  699:
        -:  700:
        -:  701:// adventurerFunction created (REFACTORING)
        -:  702:// For the function Adventure, we should add a variable, and add a 
        -:  703:// parameter to the function. We should also add a structure, and a 
        -:  704:// pointer to a given variable
        -:  705:
        -:  706:void adventurerFunction(int currentPlayer, int temphand[], int z, struct gameState *state){
        -:  707:
        -:  708:  int cardDrawn;
    #####:  709:  int drawntreasure = 0;
        -:  710:
        -:  711:  // we should have 3 cards revealed from the deck instead of 2 that was originally
        -:  712:  // placed
        -:  713:
        -:  714:    // bug
        -:  715:    
    #####:  716: while(drawntreasure<3){
        -:  717:  
    #####:  718:  if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  719:    shuffle(currentPlayer, state);
    #####:  720:  }
    #####:  721:  drawCard(currentPlayer, state);
        -:  722:  
        -:  723:
        -:  724:
    #####:  725:  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  726:  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  727:    drawntreasure++;
        -:  728:  else{
    #####:  729:    temphand[z]=cardDrawn;
    #####:  730:    state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  731:    z++;
        -:  732:  }
        -:  733:  }
        -:  734:
        -:  735:
        -:  736:    // here we omit the return 0 as it is not required as given previoulsy in the case
    #####:  737:      while(z-1 >=0){
    #####:  738:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  739:      z=z-1;
        -:  740:      }
    #####:  741:    }
        -:  742:
        -:  743:
        -:  744:// FunctionSmithy created (Refactored)
        -:  745:
        -:  746:void smithyFunction(int currentPlayer, int handPos,struct gameState *state){
        -:  747:
        -:  748:   // for loop enforced in function
        -:  749:
        -:  750:    // bug detected
    #####:  751:  for ( int i = 0; i<4;i++)
        -:  752:  {
        -:  753:
    #####:  754:    drawCard(currentPlayer,state);
        -:  755:
    #####:  756:  }
        -:  757:
        -:  758:        //discard card from hand
    #####:  759:        discardCard(handPos, currentPlayer,state,0);
        -:  760:
        -:  761:        // Since void function we dont return 0
    #####:  762:}
        -:  763:
        -:  764:
        -:  765:
        -:  766:// function_council_room created (refactored)
        -:  767:
        -:  768:void council_roomFunction( int currentPlayer, int handPos, struct gameState *state){
        -:  769:
        -:  770:    // bug detected
        -:  771:   
    #####:  772:   for( int i = 0; i<5 ; i++)
        -:  773:    {
        -:  774:
    #####:  775:      drawCard(currentPlayer,state);
    #####:  776:    }
        -:  777:
        -:  778:      //+1 Buy
    #####:  779:    state->numBuys++;
        -:  780:
        -:  781:
        -:  782:      //Each other player draws a card
    #####:  783:      for (int i = 0; i < state->numPlayers; i++)
        -:  784:  {
    #####:  785:    if ( i != currentPlayer )
        -:  786:      {
    #####:  787:        drawCard(i, state);
    #####:  788:      }
    #####:  789:  }
        -:  790:
        -:  791:  // put played card in placed card pile
    #####:  792:  discardCard(handPos,currentPlayer,state, 0);
        -:  793:
    #####:  794:}
        -:  795:
        -:  796:// functionSalvager created(refactored)
        -:  797:
        -:  798:void salvagerFunction(int choice1,int handPos,int currentPlayer,struct gameState *state)
        -:  799:{
        -:  800:  
        -:  801:
        -:  802:  //+1 buy
    #####:  803:      state->numBuys++;
        -:  804:      
    #####:  805:      if (choice1)
        -:  806:  {
        -:  807:    //gain coins equal to trashed card
    #####:  808:    state->coins = state->coins + getCost( handCard(choice1, state) );
        -:  809:   
        -:  810:    //trash card
    #####:  811:    discardCard(choice1, currentPlayer, state, 1);  
    #####:  812:  }
        -:  813:      
        -:  814:      //discard card
    #####:  815:      discardCard(handPos, currentPlayer, state, 0);
        -:  816:    
    #####:  817:}
        -:  818:
        -:  819:
        -:  820:
        -:  821:
        -:  822:// outpostFunction (REFACTORED)
        -:  823:void outpostFunction(int handPos,int currentPlayer, struct gameState *state){
        -:  824:
        -:  825: //bug 
        -:  826:
        -:  827:  //set outpost flag
    #####:  828:      state->outpostPlayed++;
        -:  829:      
        -:  830:      //discard card
    #####:  831:      discardCard(handPos, currentPlayer, state, 0);
        -:  832:  
    #####:  833:}
        -:  834:
        -:  835:
        -:  836:
        -:  837:
        -:  838:
        -:  839:
        -:  840:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  841:{
        -:  842:  int i;
        -:  843:  int j;
        -:  844:  int k;
        -:  845:  int x;
        -:  846:  int index;
    #####:  847:  int currentPlayer = whoseTurn(state);
    #####:  848:  int nextPlayer = currentPlayer + 1;
        -:  849:
    #####:  850:  int tributeRevealedCards[2] = {-1, -1};
        -:  851:  int temphand[MAX_HAND];// moved above the if statement
    #####:  852:  int drawntreasure=0;
        -:  853:  int cardDrawn;
    #####:  854:  int z = 0;// this is the counter for the temp hand
    #####:  855:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  856:    nextPlayer = 0;
    #####:  857:  }
        -:  858:  
        -:  859:  
        -:  860:  //uses switch to select card and perform actions
        -:  861:  
        -:  862:
        -:  863:
        -:  864:
    #####:  865:  switch( card ) 
        -:  866:    {
        -:  867:    
        -:  868:
        -:  869:
        -:  870:/*********************************************************************/
        -:  871:
        -:  872:
        -:  873:
        -:  874:
        -:  875:    case adventurer:
        -:  876:    // CALL THE FUNCTION
    #####:  877:        adventurerFunction(currentPlayer,temphand,z,state);
    #####:  878:        return 0; 
        -:  879:
        -:  880:
        -:  881:/*********************************************************************/
        -:  882:
        -:  883:
        -:  884:
        -:  885:// call the council_room function
        -:  886:
        -:  887:    case council_room:
    #####:  888:          council_roomFunction(currentPlayer,handPos,state);
    #####:  889:          return 0; 
        -:  890:
        -:  891:
        -:  892:
        -:  893:      
        -:  894:   
        -:  895:
        -:  896:
        -:  897:
        -:  898:/*********************************************************************/
        -:  899:
        -:  900:    
        -:  901:      
        -:  902:
        -:  903:
        -:  904:
        -:  905:    case feast:
        -:  906:      //gain card with cost up to 5
        -:  907:      //Backup hand
    #####:  908:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  909:  temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  910:  state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  911:      }
        -:  912:      //Backup hand
        -:  913:
        -:  914:      //Update Coins for Buy
    #####:  915:      updateCoins(currentPlayer, state, 5);
    #####:  916:      x = 1;//Condition to loop on
    #####:  917:      while( x == 1) {//Buy one card
    #####:  918:  if (supplyCount(choice1, state) <= 0){
        -:  919:    if (DEBUG)
        -:  920:      printf("None of that card left, sorry!\n");
        -:  921:
        -:  922:    if (DEBUG){
        -:  923:      printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  924:    }
    #####:  925:  }
    #####:  926:  else if (state->coins < getCost(choice1)){
    #####:  927:    printf("That card is too expensive!\n");
        -:  928:
        -:  929:    if (DEBUG){
        -:  930:      printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  931:    }
    #####:  932:  }
        -:  933:  else{
        -:  934:
        -:  935:    if (DEBUG){
        -:  936:      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  937:    }
        -:  938:
    #####:  939:    gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  940:    x = 0;//No more buying cards
        -:  941:
        -:  942:    if (DEBUG){
        -:  943:      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  944:    }
        -:  945:
        -:  946:  }
        -:  947:      }     
        -:  948:
        -:  949:      //Reset Hand
    #####:  950:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  951:  state->hand[currentPlayer][i] = temphand[i];
    #####:  952:  temphand[i] = -1;
    #####:  953:      }
        -:  954:      //Reset Hand
        -:  955:            
    #####:  956:      return 0;
        -:  957:      
        -:  958:    
        -:  959:/*********************************************************************/
        -:  960:
        -:  961:
        -:  962:
        -:  963:    case gardens:
    #####:  964:      return -1;
        -:  965:      
        -:  966:   
        -:  967:/*********************************************************************/
        -:  968:
        -:  969:
        -:  970:
        -:  971:    case mine:
    #####:  972:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  973:
    #####:  974:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  975:  {
    #####:  976:    return -1;
        -:  977:  }
        -:  978:    
    #####:  979:      if (choice2 > treasure_map || choice2 < curse)
        -:  980:  {
    #####:  981:    return -1;
        -:  982:  }
        -:  983:
    #####:  984:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  985:  {
    #####:  986:    return -1;
        -:  987:  }
        -:  988:
    #####:  989:      gainCard(choice2, state, 2, currentPlayer);
        -:  990:
        -:  991:      //discard card from hand
    #####:  992:      discardCard(handPos, currentPlayer, state, 0);
        -:  993:
        -:  994:      //discard trashed card
    #####:  995:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  996:  {
    #####:  997:    if (state->hand[currentPlayer][i] == j)
        -:  998:      {
    #####:  999:        discardCard(i, currentPlayer, state, 0);      
    #####: 1000:        break;
        -: 1001:      }
    #####: 1002:  }
        -: 1003:      
    #####: 1004:      return 0;
        -: 1005:      
        -: 1006:    /*********************************************************************/
        -: 1007:
        -: 1008:
        -: 1009:
        -: 1010:
        -: 1011:    case remodel:
    #####: 1012:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1013:
    #####: 1014:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -: 1015:  {
    #####: 1016:    return -1;
        -: 1017:  }
        -: 1018:
    #####: 1019:      gainCard(choice2, state, 0, currentPlayer);
        -: 1020:
        -: 1021:      //discard card from hand
    #####: 1022:      discardCard(handPos, currentPlayer, state, 0);
        -: 1023:
        -: 1024:      //discard trashed card
    #####: 1025:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1026:  {
    #####: 1027:    if (state->hand[currentPlayer][i] == j)
        -: 1028:      {
    #####: 1029:        discardCard(i, currentPlayer, state, 0);      
    #####: 1030:        break;
        -: 1031:      }
    #####: 1032:  }
        -: 1033:
        -: 1034:
    #####: 1035:      return 0;
        -: 1036:    
        -: 1037:    
        -: 1038:
        -: 1039:
        -: 1040:
        -: 1041:
        -: 1042:
        -: 1043:/*********************************************************************/
        -: 1044:
        -: 1045:   
        -: 1046:    
        -: 1047:
        -: 1048:
        -: 1049:      case smithy:
    #####: 1050:        smithyFunction(currentPlayer,handPos,state);
    #####: 1051:        return 0 ; 
        -: 1052:
        -: 1053:
        -: 1054:/*********************************************************************/
        -: 1055:
        -: 1056:
        -: 1057:
        -: 1058:
        -: 1059:    case village:
        -: 1060:      //+1 Card
    #####: 1061:      drawCard(currentPlayer, state);
        -: 1062:      
        -: 1063:      //+2 Actions
    #####: 1064:      state->numActions = state->numActions + 2;
        -: 1065:      
        -: 1066:      //discard played card from hand
    #####: 1067:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1068:      return 0;
        -: 1069:    
        -: 1070:
        -: 1071:
        -: 1072:/*********************************************************************/
        -: 1073:
        -: 1074:
        -: 1075:
        -: 1076:
        -: 1077:
        -: 1078:    case baron:
    #####: 1079:      state->numBuys++;//Increase buys by 1!
    #####: 1080:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####: 1081:  int p = 0;//Iterator for hand!
    #####: 1082:  int card_not_discarded = 1;//Flag for discard set!
    #####: 1083:  while(card_not_discarded){
    #####: 1084:    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####: 1085:      state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1086:      state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1087:      state->discardCount[currentPlayer]++;
    #####: 1088:      for (;p < state->handCount[currentPlayer]; p++){
    #####: 1089:        state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####: 1090:      }
    #####: 1091:      state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1092:      state->handCount[currentPlayer]--;
    #####: 1093:      card_not_discarded = 0;//Exit the loop
    #####: 1094:    }
    #####: 1095:    else if (p > state->handCount[currentPlayer]){
        -: 1096:      if(DEBUG) {
        -: 1097:        printf("No estate cards in your hand, invalid choice\n");
        -: 1098:        printf("Must gain an estate if there are any\n");
        -: 1099:      }
    #####: 1100:      if (supplyCount(estate, state) > 0){
    #####: 1101:        gainCard(estate, state, 0, currentPlayer);
    #####: 1102:        state->supplyCount[estate]--;//Decrement estates
    #####: 1103:        if (supplyCount(estate, state) == 0){
    #####: 1104:    isGameOver(state);
    #####: 1105:        }
    #####: 1106:      }
    #####: 1107:      card_not_discarded = 0;//Exit the loop
    #####: 1108:    }
        -: 1109:          
        -: 1110:    else{
    #####: 1111:      p++;//Next card
        -: 1112:    }
        -: 1113:  }
    #####: 1114:      }
        -: 1115:          
        -: 1116:      else{
    #####: 1117:  if (supplyCount(estate, state) > 0){
    #####: 1118:    gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1119:    state->supplyCount[estate]--;//Decrement Estates
    #####: 1120:    if (supplyCount(estate, state) == 0){
    #####: 1121:      isGameOver(state);
    #####: 1122:    }
    #####: 1123:  }
        -: 1124:      }
        -: 1125:      
        -: 1126:      
    #####: 1127:      return 0;
        -: 1128:    
        -: 1129:    
        -: 1130:
        -: 1131:/*********************************************************************/
        -: 1132:
        -: 1133:
        -: 1134:
        -: 1135:
        -: 1136:    case great_hall:
        -: 1137:      //+1 Card
    #####: 1138:      drawCard(currentPlayer, state);
        -: 1139:      
        -: 1140:      //+1 Actions
    #####: 1141:      state->numActions++;
        -: 1142:      
        -: 1143:      //discard card from hand
    #####: 1144:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1145:      return 0;
        -: 1146:    
        -: 1147:    
        -: 1148:
        -: 1149:
        -: 1150:/*********************************************************************/
        -: 1151:
        -: 1152:
        -: 1153:
        -: 1154:
        -: 1155:    case minion:
        -: 1156:      //+1 action
    #####: 1157:      state->numActions++;
        -: 1158:      
        -: 1159:      //discard card from hand
    #####: 1160:      discardCard(handPos, currentPlayer, state, 0);
        -: 1161:      
    #####: 1162:      if (choice1)    //+2 coins
        -: 1163:  {
    #####: 1164:    state->coins = state->coins + 2;
    #####: 1165:  }
        -: 1166:      
    #####: 1167:      else if (choice2)   //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1168:  {
        -: 1169:    //discard hand
    #####: 1170:    while(numHandCards(state) > 0)
        -: 1171:      {
    #####: 1172:        discardCard(handPos, currentPlayer, state, 0);
        -: 1173:      }
        -: 1174:        
        -: 1175:    //draw 4
    #####: 1176:    for (i = 0; i < 4; i++)
        -: 1177:      {
    #####: 1178:        drawCard(currentPlayer, state);
    #####: 1179:      }
        -: 1180:        
        -: 1181:    //other players discard hand and redraw if hand size > 4
    #####: 1182:    for (i = 0; i < state->numPlayers; i++)
        -: 1183:      {
    #####: 1184:        if (i != currentPlayer)
        -: 1185:    {
    #####: 1186:      if ( state->handCount[i] > 4 )
        -: 1187:        {
        -: 1188:          //discard hand
    #####: 1189:          while( state->handCount[i] > 0 )
        -: 1190:      {
    #####: 1191:        discardCard(handPos, i, state, 0);
        -: 1192:      }
        -: 1193:              
        -: 1194:          //draw 4
    #####: 1195:          for (j = 0; j < 4; j++)
        -: 1196:      {
    #####: 1197:        drawCard(i, state);
    #####: 1198:      }
    #####: 1199:        }
    #####: 1200:    }
    #####: 1201:      }
        -: 1202:        
    #####: 1203:  }
    #####: 1204:      return 0;
        -: 1205:    
        -: 1206:   
        -: 1207:
        -: 1208:
        -: 1209:
        -: 1210:
        -: 1211:/*********************************************************************/
        -: 1212:
        -: 1213:
        -: 1214:
        -: 1215:
        -: 1216:    case steward:
    #####: 1217:      if (choice1 == 1)
        -: 1218:  {
        -: 1219:    //+2 cards
    #####: 1220:    drawCard(currentPlayer, state);
    #####: 1221:    drawCard(currentPlayer, state);
    #####: 1222:  }
    #####: 1223:      else if (choice1 == 2)
        -: 1224:  {
        -: 1225:    //+2 coins
    #####: 1226:    state->coins = state->coins + 2;
    #####: 1227:  }
        -: 1228:      else
        -: 1229:  {
        -: 1230:    //trash 2 cards in hand
    #####: 1231:    discardCard(choice2, currentPlayer, state, 1);
    #####: 1232:    discardCard(choice3, currentPlayer, state, 1);
        -: 1233:  }
        -: 1234:      
        -: 1235:      //discard card from hand
    #####: 1236:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1237:      return 0;
        -: 1238:    
        -: 1239:    
        -: 1240:
        -: 1241:
        -: 1242:
        -: 1243:/**********************************************************************/
        -: 1244:
        -: 1245:
        -: 1246:
        -: 1247:
        -: 1248:
        -: 1249:
        -: 1250:
        -: 1251:
        -: 1252:    case tribute:
    #####: 1253:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1254:  if (state->deckCount[nextPlayer] > 0){
    #####: 1255:    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1256:    state->deckCount[nextPlayer]--;
    #####: 1257:  }
    #####: 1258:  else if (state->discardCount[nextPlayer] > 0){
    #####: 1259:    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1260:    state->discardCount[nextPlayer]--;
    #####: 1261:  }
        -: 1262:  else{
        -: 1263:    //No Card to Reveal
        -: 1264:    if (DEBUG){
        -: 1265:      printf("No cards to reveal\n");
        -: 1266:    }
        -: 1267:  }
    #####: 1268:      }
        -: 1269:      
        -: 1270:      else{
    #####: 1271:  if (state->deckCount[nextPlayer] == 0){
    #####: 1272:    for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1273:      state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1274:      state->deckCount[nextPlayer]++;
    #####: 1275:      state->discard[nextPlayer][i] = -1;
    #####: 1276:      state->discardCount[nextPlayer]--;
    #####: 1277:    }
        -: 1278:          
    #####: 1279:    shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1280:  } 
    #####: 1281:  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1282:  state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1283:  state->deckCount[nextPlayer]--;
    #####: 1284:  tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1285:  state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1286:  state->deckCount[nextPlayer]--;
        -: 1287:      }    
        -: 1288:           
    #####: 1289:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1290:  state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1291:  state->playedCardCount++;
    #####: 1292:  tributeRevealedCards[1] = -1;
    #####: 1293:      }
        -: 1294:
    #####: 1295:      for (i = 0; i <= 2; i ++){
    #####: 1296:  if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1297:    state->coins += 2;
    #####: 1298:  }
        -: 1299:        
    #####: 1300:  else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1301:    drawCard(currentPlayer, state);
    #####: 1302:    drawCard(currentPlayer, state);
    #####: 1303:  }
        -: 1304:  else{//Action Card
    #####: 1305:    state->numActions = state->numActions + 2;
        -: 1306:  }
    #####: 1307:      }
        -: 1308:      
    #####: 1309:      return 0;
        -: 1310:    
        -: 1311:   
        -: 1312:
        -: 1313:/*********************************************************************/
        -: 1314:
        -: 1315:
        -: 1316:
        -: 1317:
        -: 1318:
        -: 1319:    case ambassador:
    #####: 1320:      j = 0;    //used to check if player has enough cards to discard
        -: 1321:
    #####: 1322:      if (choice2 > 2 || choice2 < 0)
        -: 1323:  {
    #####: 1324:    return -1;        
        -: 1325:  }
        -: 1326:
    #####: 1327:      if (choice1 == handPos)
        -: 1328:  {
    #####: 1329:    return -1;
        -: 1330:  }
        -: 1331:
    #####: 1332:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1333:  {
    #####: 1334:    if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1335:      {
    #####: 1336:        j++;
    #####: 1337:      }
    #####: 1338:  }
    #####: 1339:      if (j < choice2)
        -: 1340:  {
    #####: 1341:    return -1;        
        -: 1342:  }
        -: 1343:
        -: 1344:      if (DEBUG) 
        -: 1345:  printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1346:
        -: 1347:      //increase supply count for choosen card by amount being discarded
    #####: 1348:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1349:      
        -: 1350:      //each other player gains a copy of revealed card
    #####: 1351:      for (i = 0; i < state->numPlayers; i++)
        -: 1352:  {
    #####: 1353:    if (i != currentPlayer)
        -: 1354:      {
    #####: 1355:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1356:      }
    #####: 1357:  }
        -: 1358:
        -: 1359:      //discard played card from hand
    #####: 1360:      discardCard(handPos, currentPlayer, state, 0);      
        -: 1361:
        -: 1362:      //trash copies of cards returned to supply
    #####: 1363:      for (j = 0; j < choice2; j++)
        -: 1364:  {
    #####: 1365:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1366:      {
    #####: 1367:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1368:    {
    #####: 1369:      discardCard(i, currentPlayer, state, 1);
    #####: 1370:      break;
        -: 1371:    }
    #####: 1372:      }
    #####: 1373:  }     
        -: 1374:
    #####: 1375:      return 0;
        -: 1376:    
        -: 1377:   
        -: 1378:
        -: 1379:/********************************/
        -: 1380:
        -: 1381:
        -: 1382:
        -: 1383:
        -: 1384:
        -: 1385:
        -: 1386:    case cutpurse:
        -: 1387:
    #####: 1388:      updateCoins(currentPlayer, state, 2);
    #####: 1389:      for (i = 0; i < state->numPlayers; i++)
        -: 1390:  {
    #####: 1391:    if (i != currentPlayer)
        -: 1392:      {
    #####: 1393:        for (j = 0; j < state->handCount[i]; j++)
        -: 1394:    {
    #####: 1395:      if (state->hand[i][j] == copper)
        -: 1396:        {
    #####: 1397:          discardCard(j, i, state, 0);
    #####: 1398:          break;
        -: 1399:        }
    #####: 1400:      if (j == state->handCount[i])
        -: 1401:        {
    #####: 1402:          for (k = 0; k < state->handCount[i]; k++)
        -: 1403:      {
        -: 1404:        if (DEBUG)
        -: 1405:          printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1406:      } 
    #####: 1407:          break;
        -: 1408:        }   
    #####: 1409:    }
        -: 1410:          
    #####: 1411:      }
        -: 1412:        
    #####: 1413:  }       
        -: 1414:
        -: 1415:      //discard played card from hand
    #####: 1416:      discardCard(handPos, currentPlayer, state, 0);      
        -: 1417:
    #####: 1418:      return 0;
        -: 1419:
        -: 1420:    
        -: 1421:    
        -: 1422:
        -: 1423:
        -: 1424:/********************************/
        -: 1425:
        -: 1426:
        -: 1427:
        -: 1428:
        -: 1429:
        -: 1430:
        -: 1431:
        -: 1432:
        -: 1433:
        -: 1434:    case embargo: 
        -: 1435:      //+2 Coins
    #####: 1436:      state->coins = state->coins + 2;
        -: 1437:      
        -: 1438:      //see if selected pile is in play
    #####: 1439:      if ( state->supplyCount[choice1] == -1 )
        -: 1440:  {
    #####: 1441:    return -1;
        -: 1442:  }
        -: 1443:      
        -: 1444:
    #####: 1445:       state->embargoTokens[choice1]++;
        -: 1446:      
        -: 1447:      //trash card
    #####: 1448:      discardCard(handPos, currentPlayer, state, 1);    
    #####: 1449:      return 0;
        -: 1450:    
        -: 1451:
        -: 1452:/********************************/
        -: 1453:
        -: 1454:
        -: 1455:   
        -: 1456:
        -: 1457:      
        -: 1458:
        -: 1459:
        -: 1460:
        -: 1461:      // call outpost function 
        -: 1462:      case outpost:
    #####: 1463:      outpostFunction(currentPlayer,handPos,state);
    #####: 1464:      return 0;
        -: 1465:
        -: 1466:
        -: 1467:
        -: 1468:/********************************/
        -: 1469:
        -: 1470:
        -: 1471:
        -: 1472:
        -: 1473:      // call salvegerFunction
        -: 1474:      case salvager:
    #####: 1475:      salvagerFunction(currentPlayer,handPos,choice1,state);
    #####: 1476:      return 0 ;
        -: 1477:
        -: 1478:
        -: 1479:
        -: 1480:
        -: 1481:
        -: 1482:  /********************************/
        -: 1483:
        -: 1484:
        -: 1485:
        -: 1486:
        -: 1487:    
        -: 1488:
        -: 1489:
        -: 1490:
        -: 1491:
        -: 1492:
        -: 1493:    case sea_hag:
    #####: 1494:      for (i = 0; i < state->numPlayers; i++){
    #####: 1495:  if (i != currentPlayer){
    #####: 1496:    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];          state->deckCount[i]--;
    #####: 1497:    state->discardCount[i]++;
    #####: 1498:    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1499:  }
    #####: 1500:      }
    #####: 1501:      return 0;
        -: 1502:    
        -: 1503:   
        -: 1504:
        -: 1505:
        -: 1506:/********************************/
        -: 1507:
        -: 1508:
        -: 1509:
        -: 1510:
        -: 1511:    case treasure_map:
        -: 1512:      //search hand for another treasure_map
    #####: 1513:      index = -1;
    #####: 1514:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1515:  {
    #####: 1516:    if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1517:      {
    #####: 1518:        index = i;
    #####: 1519:        break;
        -: 1520:      }
    #####: 1521:  }
    #####: 1522:      if (index > -1)
        -: 1523:  {
        -: 1524:    //trash both treasure cards
    #####: 1525:    discardCard(handPos, currentPlayer, state, 1);
    #####: 1526:    discardCard(index, currentPlayer, state, 1);
        -: 1527:
        -: 1528:    //gain 4 Gold cards
    #####: 1529:    for (i = 0; i < 4; i++)
        -: 1530:      {
    #####: 1531:        gainCard(gold, state, 1, currentPlayer);
    #####: 1532:      }
        -: 1533:        
        -: 1534:    //return success
    #####: 1535:    return 1;
        -: 1536:  }
        -: 1537:      
        -: 1538:      //no second treasure_map found in hand
    #####: 1539:      return -1;
        -: 1540:    }
        -: 1541:  
    #####: 1542:  return -1;
    #####: 1543:}
        -: 1544:
        -: 1545:/********************************/
        -: 1546:
        -: 1547:
        -: 1548:
        -: 1549:
        -: 1550:
        -: 1551:
        -: 1552:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1553:{
        -: 1554:  
        -: 1555:  //if card is not trashed, added to Played pile 
    #####: 1556:  if (trashFlag < 1)
        -: 1557:    {
        -: 1558:      //add card to played pile
    #####: 1559:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1560:      state->playedCardCount++;
    #####: 1561:    }
        -: 1562:  
        -: 1563:  //set played card to -1
    #####: 1564:  state->hand[currentPlayer][handPos] = -1;
        -: 1565:  
        -: 1566:  //remove card from player's hand
    #####: 1567:  if ( handPos == (state->handCount[currentPlayer] - 1) )   //last card in hand array is played
        -: 1568:    {
        -: 1569:      //reduce number of cards in hand
    #####: 1570:      state->handCount[currentPlayer]--;
    #####: 1571:    }
    #####: 1572:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1573:    {
        -: 1574:      //reduce number of cards in hand
    #####: 1575:      state->handCount[currentPlayer]--;
    #####: 1576:    }
        -: 1577:  else  
        -: 1578:    {
        -: 1579:      //replace discarded card with last card in hand
    #####: 1580:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1581:      //set last card to -1
    #####: 1582:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1583:      //reduce number of cards in hand
    #####: 1584:      state->handCount[currentPlayer]--;
        -: 1585:    }
        -: 1586:  
    #####: 1587:  return 0;
        -: 1588:}
        -: 1589:
        -: 1590:
        -: 1591:
        -: 1592:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1593:{
        -: 1594:  //Note: supplyPos is enum of choosen card
        -: 1595:  
        -: 1596:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1597:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1598:    {
    #####: 1599:      return -1;
        -: 1600:    }
        -: 1601:  
        -: 1602:  //added card for [whoseTurn] current player:
        -: 1603:  // toFlag = 0 : add to discard
        -: 1604:  // toFlag = 1 : add to deck
        -: 1605:  // toFlag = 2 : add to hand
        -: 1606:
    #####: 1607:  if (toFlag == 1)
        -: 1608:    {
    #####: 1609:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1610:      state->deckCount[player]++;
    #####: 1611:    }
    #####: 1612:  else if (toFlag == 2)
        -: 1613:    {
    #####: 1614:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1615:      state->handCount[player]++;
    #####: 1616:    }
        -: 1617:  else
        -: 1618:    {
    #####: 1619:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1620:      state->discardCount[player]++;
        -: 1621:    }
        -: 1622:  
        -: 1623:  //decrease number in supply pile
    #####: 1624:  state->supplyCount[supplyPos]--;
        -: 1625:   
    #####: 1626:  return 0;
    #####: 1627:}
        -: 1628:
        -: 1629:
        -: 1630:
        -: 1631:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1632:{
        -: 1633:  int i;
        -: 1634:  
        -: 1635:  //reset coin count
        1: 1636:  state->coins = 0;
        -: 1637:
        -: 1638:  //add coins for each Treasure card in player's hand
       12: 1639:  for (i = 0; i < state->handCount[player]; i++)
        -: 1640:    {
        5: 1641:      if (state->hand[player][i] == copper)
        -: 1642:  {
        4: 1643:    state->coins += 1;
        4: 1644:  }
        1: 1645:      else if (state->hand[player][i] == silver)
        -: 1646:  {
    #####: 1647:    state->coins += 2;
    #####: 1648:  }
        1: 1649:      else if (state->hand[player][i] == gold)
        -: 1650:  {
    #####: 1651:    state->coins += 3;
    #####: 1652:  } 
        5: 1653:    } 
        -: 1654:
        -: 1655:  //add bonus
        1: 1656:  state->coins += bonus;
        -: 1657:
        1: 1658:  return 0;
        -: 1659:}
        -: 1660:
        -: 1661:
        -: 1662://end of dominion.c
        -: 1663:
unittest2.c:
TESTING updateCoins():
Test player 0 with 1 treasure card(s) and 0 bonus.
G.coins = 1, expected = 1
G.coins = 2, expected = 2
G.coins = 3, expected = 3
Test player 0 with 1 treasure card(s) and 1 bonus.
G.coins = 2, expected = 2
G.coins = 3, expected = 3
G.coins = 4, expected = 4
Test player 0 with 1 treasure card(s) and 2 bonus.
G.coins = 3, expected = 3
G.coins = 4, expected = 4
G.coins = 5, expected = 5
Test player 0 with 1 treasure card(s) and 3 bonus.
G.coins = 4, expected = 4
G.coins = 5, expected = 5
G.coins = 6, expected = 6
Test player 0 with 1 treasure card(s) and 4 bonus.
G.coins = 5, expected = 5
G.coins = 6, expected = 6
G.coins = 7, expected = 7
Test player 0 with 1 treasure card(s) and 5 bonus.
G.coins = 6, expected = 6
G.coins = 7, expected = 7
G.coins = 8, expected = 8
Test player 0 with 1 treasure card(s) and 6 bonus.
G.coins = 7, expected = 7
G.coins = 8, expected = 8
G.coins = 9, expected = 9
Test player 0 with 1 treasure card(s) and 7 bonus.
G.coins = 8, expected = 8
G.coins = 9, expected = 9
G.coins = 10, expected = 10
Test player 0 with 1 treasure card(s) and 8 bonus.
G.coins = 9, expected = 9
G.coins = 10, expected = 10
G.coins = 11, expected = 11
Test player 0 with 1 treasure card(s) and 9 bonus.
G.coins = 10, expected = 10
G.coins = 11, expected = 11
G.coins = 12, expected = 12
Test player 0 with 1 treasure card(s) and 10 bonus.
G.coins = 11, expected = 11
G.coins = 12, expected = 12
G.coins = 13, expected = 13
Test player 0 with 2 treasure card(s) and 0 bonus.
G.coins = 2, expected = 2
G.coins = 4, expected = 4
G.coins = 6, expected = 6
Test player 0 with 2 treasure card(s) and 1 bonus.
G.coins = 3, expected = 3
G.coins = 5, expected = 5
G.coins = 7, expected = 7
Test player 0 with 2 treasure card(s) and 2 bonus.
G.coins = 4, expected = 4
G.coins = 6, expected = 6
G.coins = 8, expected = 8
Test player 0 with 2 treasure card(s) and 3 bonus.
G.coins = 5, expected = 5
G.coins = 7, expected = 7
G.coins = 9, expected = 9
Test player 0 with 2 treasure card(s) and 4 bonus.
G.coins = 6, expected = 6
G.coins = 8, expected = 8
G.coins = 10, expected = 10
Test player 0 with 2 treasure card(s) and 5 bonus.
G.coins = 7, expected = 7
G.coins = 9, expected = 9
G.coins = 11, expected = 11
Test player 0 with 2 treasure card(s) and 6 bonus.
G.coins = 8, expected = 8
G.coins = 10, expected = 10
G.coins = 12, expected = 12
Test player 0 with 2 treasure card(s) and 7 bonus.
G.coins = 9, expected = 9
G.coins = 11, expected = 11
G.coins = 13, expected = 13
Test player 0 with 2 treasure card(s) and 8 bonus.
G.coins = 10, expected = 10
G.coins = 12, expected = 12
G.coins = 14, expected = 14
Test player 0 with 2 treasure card(s) and 9 bonus.
G.coins = 11, expected = 11
G.coins = 13, expected = 13
G.coins = 15, expected = 15
Test player 0 with 2 treasure card(s) and 10 bonus.
G.coins = 12, expected = 12
G.coins = 14, expected = 14
G.coins = 16, expected = 16
Test player 0 with 3 treasure card(s) and 0 bonus.
G.coins = 3, expected = 3
G.coins = 6, expected = 6
G.coins = 9, expected = 9
Test player 0 with 3 treasure card(s) and 1 bonus.
G.coins = 4, expected = 4
G.coins = 7, expected = 7
G.coins = 10, expected = 10
Test player 0 with 3 treasure card(s) and 2 bonus.
G.coins = 5, expected = 5
G.coins = 8, expected = 8
G.coins = 11, expected = 11
Test player 0 with 3 treasure card(s) and 3 bonus.
G.coins = 6, expected = 6
G.coins = 9, expected = 9
G.coins = 12, expected = 12
Test player 0 with 3 treasure card(s) and 4 bonus.
G.coins = 7, expected = 7
G.coins = 10, expected = 10
G.coins = 13, expected = 13
Test player 0 with 3 treasure card(s) and 5 bonus.
G.coins = 8, expected = 8
G.coins = 11, expected = 11
G.coins = 14, expected = 14
Test player 0 with 3 treasure card(s) and 6 bonus.
G.coins = 9, expected = 9
G.coins = 12, expected = 12
G.coins = 15, expected = 15
Test player 0 with 3 treasure card(s) and 7 bonus.
G.coins = 10, expected = 10
G.coins = 13, expected = 13
G.coins = 16, expected = 16
Test player 0 with 3 treasure card(s) and 8 bonus.
G.coins = 11, expected = 11
G.coins = 14, expected = 14
G.coins = 17, expected = 17
Test player 0 with 3 treasure card(s) and 9 bonus.
G.coins = 12, expected = 12
G.coins = 15, expected = 15
G.coins = 18, expected = 18
Test player 0 with 3 treasure card(s) and 10 bonus.
G.coins = 13, expected = 13
G.coins = 16, expected = 16
G.coins = 19, expected = 19
Test player 0 with 4 treasure card(s) and 0 bonus.
G.coins = 4, expected = 4
G.coins = 8, expected = 8
G.coins = 12, expected = 12
Test player 0 with 4 treasure card(s) and 1 bonus.
G.coins = 5, expected = 5
G.coins = 9, expected = 9
G.coins = 13, expected = 13
Test player 0 with 4 treasure card(s) and 2 bonus.
G.coins = 6, expected = 6
G.coins = 10, expected = 10
G.coins = 14, expected = 14
Test player 0 with 4 treasure card(s) and 3 bonus.
G.coins = 7, expected = 7
G.coins = 11, expected = 11
G.coins = 15, expected = 15
Test player 0 with 4 treasure card(s) and 4 bonus.
G.coins = 8, expected = 8
G.coins = 12, expected = 12
G.coins = 16, expected = 16
Test player 0 with 4 treasure card(s) and 5 bonus.
G.coins = 9, expected = 9
G.coins = 13, expected = 13
G.coins = 17, expected = 17
Test player 0 with 4 treasure card(s) and 6 bonus.
G.coins = 10, expected = 10
G.coins = 14, expected = 14
G.coins = 18, expected = 18
Test player 0 with 4 treasure card(s) and 7 bonus.
G.coins = 11, expected = 11
G.coins = 15, expected = 15
G.coins = 19, expected = 19
Test player 0 with 4 treasure card(s) and 8 bonus.
G.coins = 12, expected = 12
G.coins = 16, expected = 16
G.coins = 20, expected = 20
Test player 0 with 4 treasure card(s) and 9 bonus.
G.coins = 13, expected = 13
G.coins = 17, expected = 17
G.coins = 21, expected = 21
Test player 0 with 4 treasure card(s) and 10 bonus.
G.coins = 14, expected = 14
G.coins = 18, expected = 18
G.coins = 22, expected = 22
Test player 0 with 5 treasure card(s) and 0 bonus.
G.coins = 5, expected = 5
G.coins = 10, expected = 10
G.coins = 15, expected = 15
Test player 0 with 5 treasure card(s) and 1 bonus.
G.coins = 6, expected = 6
G.coins = 11, expected = 11
G.coins = 16, expected = 16
Test player 0 with 5 treasure card(s) and 2 bonus.
G.coins = 7, expected = 7
G.coins = 12, expected = 12
G.coins = 17, expected = 17
Test player 0 with 5 treasure card(s) and 3 bonus.
G.coins = 8, expected = 8
G.coins = 13, expected = 13
G.coins = 18, expected = 18
Test player 0 with 5 treasure card(s) and 4 bonus.
G.coins = 9, expected = 9
G.coins = 14, expected = 14
G.coins = 19, expected = 19
Test player 0 with 5 treasure card(s) and 5 bonus.
G.coins = 10, expected = 10
G.coins = 15, expected = 15
G.coins = 20, expected = 20
Test player 0 with 5 treasure card(s) and 6 bonus.
G.coins = 11, expected = 11
G.coins = 16, expected = 16
G.coins = 21, expected = 21
Test player 0 with 5 treasure card(s) and 7 bonus.
G.coins = 12, expected = 12
G.coins = 17, expected = 17
G.coins = 22, expected = 22
Test player 0 with 5 treasure card(s) and 8 bonus.
G.coins = 13, expected = 13
G.coins = 18, expected = 18
G.coins = 23, expected = 23
Test player 0 with 5 treasure card(s) and 9 bonus.
G.coins = 14, expected = 14
G.coins = 19, expected = 19
G.coins = 24, expected = 24
Test player 0 with 5 treasure card(s) and 10 bonus.
G.coins = 15, expected = 15
G.coins = 20, expected = 20
G.coins = 25, expected = 25
Test player 1 with 1 treasure card(s) and 0 bonus.
G.coins = 1, expected = 1
G.coins = 2, expected = 2
G.coins = 3, expected = 3
Test player 1 with 1 treasure card(s) and 1 bonus.
G.coins = 2, expected = 2
G.coins = 3, expected = 3
G.coins = 4, expected = 4
Test player 1 with 1 treasure card(s) and 2 bonus.
G.coins = 3, expected = 3
G.coins = 4, expected = 4
G.coins = 5, expected = 5
Test player 1 with 1 treasure card(s) and 3 bonus.
G.coins = 4, expected = 4
G.coins = 5, expected = 5
G.coins = 6, expected = 6
Test player 1 with 1 treasure card(s) and 4 bonus.
G.coins = 5, expected = 5
G.coins = 6, expected = 6
G.coins = 7, expected = 7
Test player 1 with 1 treasure card(s) and 5 bonus.
G.coins = 6, expected = 6
G.coins = 7, expected = 7
G.coins = 8, expected = 8
Test player 1 with 1 treasure card(s) and 6 bonus.
G.coins = 7, expected = 7
G.coins = 8, expected = 8
G.coins = 9, expected = 9
Test player 1 with 1 treasure card(s) and 7 bonus.
G.coins = 8, expected = 8
G.coins = 9, expected = 9
G.coins = 10, expected = 10
Test player 1 with 1 treasure card(s) and 8 bonus.
G.coins = 9, expected = 9
G.coins = 10, expected = 10
G.coins = 11, expected = 11
Test player 1 with 1 treasure card(s) and 9 bonus.
G.coins = 10, expected = 10
G.coins = 11, expected = 11
G.coins = 12, expected = 12
Test player 1 with 1 treasure card(s) and 10 bonus.
G.coins = 11, expected = 11
G.coins = 12, expected = 12
G.coins = 13, expected = 13
Test player 1 with 2 treasure card(s) and 0 bonus.
G.coins = 2, expected = 2
G.coins = 4, expected = 4
G.coins = 6, expected = 6
Test player 1 with 2 treasure card(s) and 1 bonus.
G.coins = 3, expected = 3
G.coins = 5, expected = 5
G.coins = 7, expected = 7
Test player 1 with 2 treasure card(s) and 2 bonus.
G.coins = 4, expected = 4
G.coins = 6, expected = 6
G.coins = 8, expected = 8
Test player 1 with 2 treasure card(s) and 3 bonus.
G.coins = 5, expected = 5
G.coins = 7, expected = 7
G.coins = 9, expected = 9
Test player 1 with 2 treasure card(s) and 4 bonus.
G.coins = 6, expected = 6
G.coins = 8, expected = 8
G.coins = 10, expected = 10
Test player 1 with 2 treasure card(s) and 5 bonus.
G.coins = 7, expected = 7
G.coins = 9, expected = 9
G.coins = 11, expected = 11
Test player 1 with 2 treasure card(s) and 6 bonus.
G.coins = 8, expected = 8
G.coins = 10, expected = 10
G.coins = 12, expected = 12
Test player 1 with 2 treasure card(s) and 7 bonus.
G.coins = 9, expected = 9
G.coins = 11, expected = 11
G.coins = 13, expected = 13
Test player 1 with 2 treasure card(s) and 8 bonus.
G.coins = 10, expected = 10
G.coins = 12, expected = 12
G.coins = 14, expected = 14
Test player 1 with 2 treasure card(s) and 9 bonus.
G.coins = 11, expected = 11
G.coins = 13, expected = 13
G.coins = 15, expected = 15
Test player 1 with 2 treasure card(s) and 10 bonus.
G.coins = 12, expected = 12
G.coins = 14, expected = 14
G.coins = 16, expected = 16
Test player 1 with 3 treasure card(s) and 0 bonus.
G.coins = 3, expected = 3
G.coins = 6, expected = 6
G.coins = 9, expected = 9
Test player 1 with 3 treasure card(s) and 1 bonus.
G.coins = 4, expected = 4
G.coins = 7, expected = 7
G.coins = 10, expected = 10
Test player 1 with 3 treasure card(s) and 2 bonus.
G.coins = 5, expected = 5
G.coins = 8, expected = 8
G.coins = 11, expected = 11
Test player 1 with 3 treasure card(s) and 3 bonus.
G.coins = 6, expected = 6
G.coins = 9, expected = 9
G.coins = 12, expected = 12
Test player 1 with 3 treasure card(s) and 4 bonus.
G.coins = 7, expected = 7
G.coins = 10, expected = 10
G.coins = 13, expected = 13
Test player 1 with 3 treasure card(s) and 5 bonus.
G.coins = 8, expected = 8
G.coins = 11, expected = 11
G.coins = 14, expected = 14
Test player 1 with 3 treasure card(s) and 6 bonus.
G.coins = 9, expected = 9
G.coins = 12, expected = 12
G.coins = 15, expected = 15
Test player 1 with 3 treasure card(s) and 7 bonus.
G.coins = 10, expected = 10
G.coins = 13, expected = 13
G.coins = 16, expected = 16
Test player 1 with 3 treasure card(s) and 8 bonus.
G.coins = 11, expected = 11
G.coins = 14, expected = 14
G.coins = 17, expected = 17
Test player 1 with 3 treasure card(s) and 9 bonus.
G.coins = 12, expected = 12
G.coins = 15, expected = 15
G.coins = 18, expected = 18
Test player 1 with 3 treasure card(s) and 10 bonus.
G.coins = 13, expected = 13
G.coins = 16, expected = 16
G.coins = 19, expected = 19
Test player 1 with 4 treasure card(s) and 0 bonus.
G.coins = 4, expected = 4
G.coins = 8, expected = 8
G.coins = 12, expected = 12
Test player 1 with 4 treasure card(s) and 1 bonus.
G.coins = 5, expected = 5
G.coins = 9, expected = 9
G.coins = 13, expected = 13
Test player 1 with 4 treasure card(s) and 2 bonus.
G.coins = 6, expected = 6
G.coins = 10, expected = 10
G.coins = 14, expected = 14
Test player 1 with 4 treasure card(s) and 3 bonus.
G.coins = 7, expected = 7
G.coins = 11, expected = 11
G.coins = 15, expected = 15
Test player 1 with 4 treasure card(s) and 4 bonus.
G.coins = 8, expected = 8
G.coins = 12, expected = 12
G.coins = 16, expected = 16
Test player 1 with 4 treasure card(s) and 5 bonus.
G.coins = 9, expected = 9
G.coins = 13, expected = 13
G.coins = 17, expected = 17
Test player 1 with 4 treasure card(s) and 6 bonus.
G.coins = 10, expected = 10
G.coins = 14, expected = 14
G.coins = 18, expected = 18
Test player 1 with 4 treasure card(s) and 7 bonus.
G.coins = 11, expected = 11
G.coins = 15, expected = 15
G.coins = 19, expected = 19
Test player 1 with 4 treasure card(s) and 8 bonus.
G.coins = 12, expected = 12
G.coins = 16, expected = 16
G.coins = 20, expected = 20
Test player 1 with 4 treasure card(s) and 9 bonus.
G.coins = 13, expected = 13
G.coins = 17, expected = 17
G.coins = 21, expected = 21
Test player 1 with 4 treasure card(s) and 10 bonus.
G.coins = 14, expected = 14
G.coins = 18, expected = 18
G.coins = 22, expected = 22
Test player 1 with 5 treasure card(s) and 0 bonus.
G.coins = 5, expected = 5
G.coins = 10, expected = 10
G.coins = 15, expected = 15
Test player 1 with 5 treasure card(s) and 1 bonus.
G.coins = 6, expected = 6
G.coins = 11, expected = 11
G.coins = 16, expected = 16
Test player 1 with 5 treasure card(s) and 2 bonus.
G.coins = 7, expected = 7
G.coins = 12, expected = 12
G.coins = 17, expected = 17
Test player 1 with 5 treasure card(s) and 3 bonus.
G.coins = 8, expected = 8
G.coins = 13, expected = 13
G.coins = 18, expected = 18
Test player 1 with 5 treasure card(s) and 4 bonus.
G.coins = 9, expected = 9
G.coins = 14, expected = 14
G.coins = 19, expected = 19
Test player 1 with 5 treasure card(s) and 5 bonus.
G.coins = 10, expected = 10
G.coins = 15, expected = 15
G.coins = 20, expected = 20
Test player 1 with 5 treasure card(s) and 6 bonus.
G.coins = 11, expected = 11
G.coins = 16, expected = 16
G.coins = 21, expected = 21
Test player 1 with 5 treasure card(s) and 7 bonus.
G.coins = 12, expected = 12
G.coins = 17, expected = 17
G.coins = 22, expected = 22
Test player 1 with 5 treasure card(s) and 8 bonus.
G.coins = 13, expected = 13
G.coins = 18, expected = 18
G.coins = 23, expected = 23
Test player 1 with 5 treasure card(s) and 9 bonus.
G.coins = 14, expected = 14
G.coins = 19, expected = 19
G.coins = 24, expected = 24
Test player 1 with 5 treasure card(s) and 10 bonus.
G.coins = 15, expected = 15
G.coins = 20, expected = 20
G.coins = 25, expected = 25
All tests passed!
File 'unittest2.c'
Lines executed:85.37% of 41
unittest2.c:creating 'unittest2.c.gcov'

File 'dominion.c'
Lines executed:17.23% of 650
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include "rngs.h"
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:
        -:   10:
        -:   11:int compare(const void* a, const void* b) {
     3136:   12:  if (*(int*)a > *(int*)b)
    #####:   13:    return 1;
     3136:   14:  if (*(int*)a < *(int*)b)
     1120:   15:    return -1;
     2016:   16:  return 0;
     3136:   17:}
        -:   18:
        -:   19:
        -:   20:
        -:   21:struct gameState* newGame() {
    #####:   22:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   23:  return g;
        -:   24:}
        -:   25:
        -:   26:
        -:   27:
        -:   28:
        -:   29:
        -:   30:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   31:      int k8, int k9, int k10) {
    #####:   32:  int* k = malloc(10 * sizeof(int));
    #####:   33:  k[0] = k1;
    #####:   34:  k[1] = k2;
    #####:   35:  k[2] = k3;
    #####:   36:  k[3] = k4;
    #####:   37:  k[4] = k5;
    #####:   38:  k[5] = k6;
    #####:   39:  k[6] = k7;
    #####:   40:  k[7] = k8;
    #####:   41:  k[8] = k9;
    #####:   42:  k[9] = k10;
    #####:   43:  return k;
        -:   44:}
        -:   45:
        -:   46:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   47:       struct gameState *state) {
        -:   48:
        -:   49:  int i;
        -:   50:  int j;
        -:   51:  int it;     
        -:   52:  //set up random number generator
      111:   53:  SelectStream(1);
      111:   54:  PutSeed((long)randomSeed);
        -:   55:  
        -:   56:  //check number of players
      222:   57:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   58:    {
    #####:   59:      return -1;
        -:   60:    }
        -:   61:
        -:   62:  //set number of players
      111:   63:  state->numPlayers = numPlayers;
        -:   64:
        -:   65:  //check selected kingdom cards are different
     2442:   66:  for (i = 0; i < 10; i++)
        -:   67:    {
    24420:   68:      for (j = 0; j < 10; j++)
        -:   69:        {
    21090:   70:    if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   71:      {
    #####:   72:        return -1;
        -:   73:      }
    11100:   74:        }
     1110:   75:    }
        -:   76:
        -:   77:
        -:   78:  //initialize supply
        -:   79:  ///////////////////////////////
        -:   80:
        -:   81:  //set number of Curse cards
      111:   82:  if (numPlayers == 2)
        -:   83:    {
      111:   84:      state->supplyCount[curse] = 10;
      111:   85:    }
    #####:   86:  else if (numPlayers == 3)
        -:   87:    {
    #####:   88:      state->supplyCount[curse] = 20;
    #####:   89:    }
        -:   90:  else
        -:   91:    {
    #####:   92:      state->supplyCount[curse] = 30;
        -:   93:    }
        -:   94:
        -:   95:  //set number of Victory cards
      111:   96:  if (numPlayers == 2)
        -:   97:    {
      111:   98:      state->supplyCount[estate] = 8;
      111:   99:      state->supplyCount[duchy] = 8;
      111:  100:      state->supplyCount[province] = 8;
      111:  101:    }
        -:  102:  else
        -:  103:    {
    #####:  104:      state->supplyCount[estate] = 12;
    #####:  105:      state->supplyCount[duchy] = 12;
    #####:  106:      state->supplyCount[province] = 12;
        -:  107:    }
        -:  108:
        -:  109:  //set number of Treasure cards
      111:  110:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      111:  111:  state->supplyCount[silver] = 40;
      111:  112:  state->supplyCount[gold] = 30;
        -:  113:
        -:  114:  //set number of Kingdom cards
     4662:  115:  for (i = adventurer; i <= treasure_map; i++)        //loop all cards
        -:  116:    {
    36630:  117:      for (j = 0; j < 10; j++)              //loop chosen cards
        -:  118:  {
    17205:  119:    if (kingdomCards[j] == i)
        -:  120:      {
        -:  121:        //check if card is a 'Victory' Kingdom card
     2109:  122:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  123:    {
      222:  124:      if (numPlayers == 2){ 
      222:  125:        state->supplyCount[i] = 8; 
      222:  126:      }
    #####:  127:      else{ state->supplyCount[i] = 12; }
      222:  128:    }
        -:  129:        else
        -:  130:    {
      888:  131:      state->supplyCount[i] = 10;
        -:  132:    }
     1110:  133:        break;
        -:  134:      }
        -:  135:    else    //card is not in the set choosen for the game
        -:  136:      {
    16095:  137:        state->supplyCount[i] = -1;
        -:  138:      }
    16095:  139:  }
        -:  140:
     2220:  141:    }
        -:  142:
        -:  143:  ////////////////////////
        -:  144:  //supply intilization complete
        -:  145:
        -:  146:  //set player decks
      666:  147:  for (i = 0; i < numPlayers; i++)
        -:  148:    {
      222:  149:      state->deckCount[i] = 0;
     1776:  150:      for (j = 0; j < 3; j++)
        -:  151:  {
      666:  152:    state->deck[i][j] = estate;
      666:  153:    state->deckCount[i]++;
      666:  154:  }
     3552:  155:      for (j = 3; j < 10; j++)
        -:  156:  {
     1554:  157:    state->deck[i][j] = copper;
     1554:  158:    state->deckCount[i]++;    
     1554:  159:  }
      222:  160:    }
        -:  161:
        -:  162:  //shuffle player decks
      666:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
      222:  165:      if ( shuffle(i, state) < 0 )
        -:  166:  {
    #####:  167:    return -1;
        -:  168:  }
      222:  169:    }
        -:  170:
        -:  171:  //draw player hands
      666:  172:  for (i = 0; i < numPlayers; i++)
        -:  173:    {  
        -:  174:      //initialize hand size to zero
      222:  175:      state->handCount[i] = 0;
      222:  176:      state->discardCount[i] = 0;
        -:  177:      //draw 5 cards
        -:  178:      // for (j = 0; j < 5; j++)
        -:  179:      //  {
        -:  180:      //    drawCard(i, state);
        -:  181:      //  }
      222:  182:    }
        -:  183:  
        -:  184:  //set embargo tokens to 0 for all supply piles
     6216:  185:  for (i = 0; i <= treasure_map; i++)
        -:  186:    {
     2997:  187:      state->embargoTokens[i] = 0;
     2997:  188:    }
        -:  189:
        -:  190:  //initialize first player's turn
      111:  191:  state->outpostPlayed = 0;
      111:  192:  state->phase = 0;
      111:  193:  state->numActions = 1;
      111:  194:  state->numBuys = 1;
      111:  195:  state->playedCardCount = 0;
      111:  196:  state->whoseTurn = 0;
      111:  197:  state->handCount[state->whoseTurn] = 0;
        -:  198:  //int it; move to top
        -:  199:
        -:  200:  //Moved draw cards to here, only drawing at the start of a turn
     1332:  201:  for (it = 0; it < 5; it++){
      555:  202:    drawCard(state->whoseTurn, state);
      555:  203:  }
        -:  204:
      111:  205:  updateCoins(state->whoseTurn, state, 0);
        -:  206:
      111:  207:  return 0;
      111:  208:}
        -:  209:
        -:  210:int shuffle(int player, struct gameState *state) {
        -:  211: 
        -:  212:
        -:  213:  int newDeck[MAX_DECK];
      225:  214:  int newDeckPos = 0;
        -:  215:  int card;
        -:  216:  int i;
        -:  217:
      225:  218:  if (state->deckCount[player] < 1)
        1:  219:    return -1;
      224:  220:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  221:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  222:
     4928:  223:  while (state->deckCount[player] > 0) {
     2240:  224:    card = floor(Random() * state->deckCount[player]);
     2240:  225:    newDeck[newDeckPos] = state->deck[player][card];
     2240:  226:    newDeckPos++;
    15678:  227:    for (i = card; i < state->deckCount[player]-1; i++) {
     5599:  228:      state->deck[player][i] = state->deck[player][i+1];
     5599:  229:    }
     2240:  230:    state->deckCount[player]--;
        -:  231:  }
     4928:  232:  for (i = 0; i < newDeckPos; i++) {
     2240:  233:    state->deck[player][i] = newDeck[i];
     2240:  234:    state->deckCount[player]++;
     2240:  235:  }
        -:  236:
      224:  237:  return 0;
      225:  238:}
        -:  239:
        -:  240:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  241:{ 
        -:  242:  int card;
    #####:  243:  int coin_bonus = 0;     //tracks coins gain from actions
        -:  244:
        -:  245:  //check if it is the right phase
    #####:  246:  if (state->phase != 0)
        -:  247:    {
    #####:  248:      return -1;
        -:  249:    }
        -:  250:  
        -:  251:  //check if player has enough actions
    #####:  252:  if ( state->numActions < 1 )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:  
        -:  257:  //get card played
    #####:  258:  card = handCard(handPos, state);
        -:  259:  
        -:  260:  //check if selected card is an action
    #####:  261:  if ( card < adventurer || card > treasure_map )
        -:  262:    {
    #####:  263:      return -1;
        -:  264:    }
        -:  265:  
        -:  266:  //play card
    #####:  267:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  268:    {
    #####:  269:      return -1;
        -:  270:    }
        -:  271:  
        -:  272:  //reduce number of actions
    #####:  273:  state->numActions--;
        -:  274:
        -:  275:  //update coins (Treasure cards may be added with card draws)
    #####:  276:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  277:  
    #####:  278:  return 0;
    #####:  279:}
        -:  280:
        -:  281:int buyCard(int supplyPos, struct gameState *state) {
        -:  282:  int who;
        -:  283:  if (DEBUG){
        -:  284:    printf("Entering buyCard...\n");
        -:  285:  }
        -:  286:
        -:  287:  // I don't know what to do about the phase thing.
        -:  288:
    #####:  289:  who = state->whoseTurn;
        -:  290:
    #####:  291:  if (state->numBuys < 1){
        -:  292:    if (DEBUG)
        -:  293:      printf("You do not have any buys left\n");
    #####:  294:    return -1;
    #####:  295:  } else if (supplyCount(supplyPos, state) <1){
        -:  296:    if (DEBUG)
        -:  297:      printf("There are not any of that type of card left\n");
    #####:  298:    return -1;
    #####:  299:  } else if (state->coins < getCost(supplyPos)){
        -:  300:    if (DEBUG) 
        -:  301:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  302:    return -1;
        -:  303:  } else {
    #####:  304:    state->phase=1;
        -:  305:    //state->supplyCount[supplyPos]--;
    #####:  306:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  307:  
    #####:  308:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  309:    state->numBuys--;
        -:  310:    if (DEBUG)
        -:  311:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  312:  }
        -:  313:
        -:  314:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  315:  //state->discardCount[who]++;
        -:  316:    
    #####:  317:  return 0;
    #####:  318:}
        -:  319:
        -:  320:
        -:  321:
        -:  322:int numHandCards(struct gameState *state) {
    #####:  323:  return state->handCount[ whoseTurn(state) ];
        -:  324:}
        -:  325:
        -:  326:int handCard(int handPos, struct gameState *state) {
    #####:  327:  int currentPlayer = whoseTurn(state);
    #####:  328:  return state->hand[currentPlayer][handPos];
        -:  329:}
        -:  330:
        -:  331:int supplyCount(int card, struct gameState *state) {
    #####:  332:  return state->supplyCount[card];
        -:  333:}
        -:  334:
        -:  335:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  336:  int i;
    #####:  337:  int count = 0;
        -:  338:
    #####:  339:  for (i = 0; i < state->deckCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->deck[player][i] == card) count++;
    #####:  342:    }
        -:  343:
    #####:  344:  for (i = 0; i < state->handCount[player]; i++)
        -:  345:    {
    #####:  346:      if (state->hand[player][i] == card) count++;
    #####:  347:    }
        -:  348:
    #####:  349:  for (i = 0; i < state->discardCount[player]; i++)
        -:  350:    {
    #####:  351:      if (state->discard[player][i] == card) count++;
    #####:  352:    }
        -:  353:
    #####:  354:  return count;
        -:  355:}
        -:  356:
        -:  357:int whoseTurn(struct gameState *state) {
    #####:  358:  return state->whoseTurn;
        -:  359:}
        -:  360:
        -:  361:
        -:  362:int endTurn(struct gameState *state) {
        -:  363:  int k;
        -:  364:  int i;
    #####:  365:  int currentPlayer = whoseTurn(state);
        -:  366:  
        -:  367:  //Discard hand
    #####:  368:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  369:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  370:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  371:  }
    #####:  372:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  373:    
        -:  374:  //Code for determining the player
    #####:  375:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  376:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  377:  }
        -:  378:  else{
    #####:  379:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  380:  }
        -:  381:
    #####:  382:  state->outpostPlayed = 0;
    #####:  383:  state->phase = 0;
    #####:  384:  state->numActions = 1;
    #####:  385:  state->coins = 0;
    #####:  386:  state->numBuys = 1;
    #####:  387:  state->playedCardCount = 0;
    #####:  388:  state->handCount[state->whoseTurn] = 0;
        -:  389:
        -:  390:  //int k; move to top
        -:  391:  //Next player draws hand
    #####:  392:  for (k = 0; k < 5; k++){
    #####:  393:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  394:  }
        -:  395:
        -:  396:  //Update money
    #####:  397:  updateCoins(state->whoseTurn, state , 0);
        -:  398:
    #####:  399:  return 0;
        -:  400:}
        -:  401:
        -:  402:
        -:  403:
        -:  404:
        -:  405:
        -:  406:int isGameOver(struct gameState *state) {
        -:  407:  int i;
        -:  408:  int j;
        -:  409:  
        -:  410:  //if stack of Province cards is empty, the game ends
    #####:  411:  if (state->supplyCount[province] == 0)
        -:  412:    {
    #####:  413:      return 1;
        -:  414:    }
        -:  415:
        -:  416:  //if three supply pile are at 0, the game ends
    #####:  417:  j = 0;
    #####:  418:  for (i = 0; i < 25; i++)
        -:  419:    {
    #####:  420:      if (state->supplyCount[i] == 0)
        -:  421:  {
    #####:  422:    j++;
    #####:  423:  }
    #####:  424:    }
    #####:  425:  if ( j >= 3)
        -:  426:    {
    #####:  427:      return 1;
        -:  428:    }
        -:  429:
    #####:  430:  return 0;
    #####:  431:}
        -:  432:
        -:  433:int scoreFor (int player, struct gameState *state) {
        -:  434:
        -:  435:  int i;
    #####:  436:  int score = 0;
        -:  437:  //score from hand
    #####:  438:  for (i = 0; i < state->handCount[player]; i++)
        -:  439:    {
    #####:  440:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  441:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  442:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  443:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  444:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  445:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  446:    }
        -:  447:
        -:  448:  //score from discard
    #####:  449:  for (i = 0; i < state->discardCount[player]; i++)
        -:  450:    {
    #####:  451:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  452:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  453:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  454:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  455:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  456:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  457:    }
        -:  458:
        -:  459:  //score from deck
    #####:  460:  for (i = 0; i < state->discardCount[player]; i++)
        -:  461:    {
    #####:  462:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  463:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  464:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  465:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  466:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  467:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  468:    }
        -:  469:
    #####:  470:  return score;
        -:  471:}
        -:  472:
        -:  473:
        -:  474:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  475:  int i;  
        -:  476:  int j;
        -:  477:  int highScore;
        -:  478:  int currentPlayer;
        -:  479:
        -:  480:  //get score for each player
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  482:    {
        -:  483:      //set unused player scores to -9999
    #####:  484:      if (i >= state->numPlayers)
        -:  485:  {
    #####:  486:    players[i] = -9999;
    #####:  487:  }
        -:  488:      else
        -:  489:  {
    #####:  490:    players[i] = scoreFor (i, state);
        -:  491:  }
    #####:  492:    }
        -:  493:
        -:  494:  //find highest score
    #####:  495:  j = 0;
    #####:  496:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  497:    {
    #####:  498:      if (players[i] > players[j])
        -:  499:  {
    #####:  500:    j = i;
    #####:  501:  }
    #####:  502:    }
    #####:  503:  highScore = players[j];
        -:  504:
        -:  505:  //add 1 to players who had less turns
    #####:  506:  currentPlayer = whoseTurn(state);
    #####:  507:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  508:    {
    #####:  509:      if ( players[i] == highScore && i > currentPlayer )
        -:  510:  {
    #####:  511:    players[i]++;
    #####:  512:  }
    #####:  513:    }
        -:  514:
        -:  515:  //find new highest score
    #####:  516:  j = 0;
    #####:  517:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  518:    {
    #####:  519:      if ( players[i] > players[j] )
        -:  520:  {
    #####:  521:    j = i;
    #####:  522:  }
    #####:  523:    }
    #####:  524:  highScore = players[j];
        -:  525:
        -:  526:  //set winners in array to 1 and rest to 0
    #####:  527:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  528:    {
    #####:  529:      if ( players[i] == highScore )
        -:  530:  {
    #####:  531:    players[i] = 1;
    #####:  532:  }
        -:  533:      else
        -:  534:  {
    #####:  535:    players[i] = 0;
        -:  536:  }
    #####:  537:    }
        -:  538:
    #####:  539:  return 0;
        -:  540:}
        -:  541:
        -:  542:
        -:  543:int drawCard(int player, struct gameState *state)
        -:  544:{ int count;
        -:  545:  int deckCounter;
      555:  546:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  547:    
        -:  548:    //Step 1 Shuffle the discard pile back into a deck
        -:  549:    int i;
        -:  550:    //Move discard to deck
    #####:  551:    for (i = 0; i < state->discardCount[player];i++){
    #####:  552:      state->deck[player][i] = state->discard[player][i];
    #####:  553:      state->discard[player][i] = -1;
    #####:  554:    }
        -:  555:
    #####:  556:    state->deckCount[player] = state->discardCount[player];
    #####:  557:    state->discardCount[player] = 0;//Reset discard
        -:  558:
        -:  559:    //Shufffle the deck
    #####:  560:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  561:   
        -:  562:    if (DEBUG){//Debug statements
        -:  563:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  564:    }
        -:  565:    
    #####:  566:    state->discardCount[player] = 0;
        -:  567:
        -:  568:    //Step 2 Draw Card
    #####:  569:    count = state->handCount[player];//Get current player's hand count
        -:  570:    
        -:  571:    if (DEBUG){//Debug statements
        -:  572:      printf("Current hand count: %d\n", count);
        -:  573:    }
        -:  574:    
    #####:  575:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  576:
    #####:  577:    if (deckCounter == 0)
    #####:  578:      return -1;
        -:  579:
    #####:  580:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  581:    state->deckCount[player]--;
    #####:  582:    state->handCount[player]++;//Increment hand count
    #####:  583:  }
        -:  584:
        -:  585:  else{
      555:  586:    int count = state->handCount[player];//Get current hand count for player
        -:  587:    int deckCounter;
        -:  588:    if (DEBUG){//Debug statements
        -:  589:      printf("Current hand count: %d\n", count);
        -:  590:    }
        -:  591:
      555:  592:    deckCounter = state->deckCount[player];//Create holder for the deck count
      555:  593:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      555:  594:    state->deckCount[player]--;
      555:  595:    state->handCount[player]++;//Increment hand count
        -:  596:  }
        -:  597:
      555:  598:  return 0;
      555:  599:}
        -:  600:
        -:  601:
        -:  602:
        -:  603:
        -:  604:
        -:  605:
        -:  606:
        -:  607:int getCost(int cardNumber)
        -:  608:{
    #####:  609:  switch( cardNumber ) 
        -:  610:    {
        -:  611:    case curse:
    #####:  612:      return 0;
        -:  613:    case estate:
    #####:  614:      return 2;
        -:  615:    case duchy:
    #####:  616:      return 5;
        -:  617:    case province:
    #####:  618:      return 8;
        -:  619:    case copper:
    #####:  620:      return 0;
        -:  621:    case silver:
    #####:  622:      return 3;
        -:  623:    case gold:
    #####:  624:      return 6;
        -:  625:
        -:  626:
        -:  627:
        -:  628:
        -:  629:
        -:  630:    case adventurer:
    #####:  631:      return 6;
        -:  632:    
        -:  633:
        -:  634:
        -:  635:
        -:  636:    case council_room:
    #####:  637:      return 5;
        -:  638:    
        -:  639:
        -:  640:
        -:  641:    case feast:
    #####:  642:      return 4;
        -:  643:    
        -:  644:
        -:  645:
        -:  646:
        -:  647:
        -:  648:    case gardens:
    #####:  649:      return 4;
        -:  650:    case mine:
    #####:  651:      return 5;
        -:  652:    case remodel:
    #####:  653:      return 4;
        -:  654:
        -:  655:
        -:  656:
        -:  657:    case smithy:
    #####:  658:      return 4;
        -:  659:    
        -:  660:
        -:  661:
        -:  662:
        -:  663:
        -:  664:
        -:  665:    case village:
    #####:  666:      return 3;
        -:  667:    case baron:
    #####:  668:      return 4;
        -:  669:    case great_hall:
    #####:  670:      return 3;
        -:  671:    case minion:
    #####:  672:      return 5;
        -:  673:    case steward:
    #####:  674:      return 3;
        -:  675:    case tribute:
    #####:  676:      return 5;
        -:  677:    case ambassador:
    #####:  678:      return 3;
        -:  679:    case cutpurse:
    #####:  680:      return 4;
        -:  681:    case embargo: 
    #####:  682:      return 2;
        -:  683:    case outpost:
    #####:  684:      return 5;
        -:  685:    case salvager:
    #####:  686:      return 4;
        -:  687:    case sea_hag:
    #####:  688:      return 4;
        -:  689:    case treasure_map:
    #####:  690:      return 4;
        -:  691:    }
        -:  692:  
    #####:  693:  return -1;
    #####:  694:}
        -:  695:
        -:  696:
        -:  697:
        -:  698:
        -:  699:
        -:  700:
        -:  701:// adventurerFunction created (REFACTORING)
        -:  702:// For the function Adventure, we should add a variable, and add a 
        -:  703:// parameter to the function. We should also add a structure, and a 
        -:  704:// pointer to a given variable
        -:  705:
        -:  706:void adventurerFunction(int currentPlayer, int temphand[], int z, struct gameState *state){
        -:  707:
        -:  708:  int cardDrawn;
    #####:  709:  int drawntreasure = 0;
        -:  710:
        -:  711:  // we should have 3 cards revealed from the deck instead of 2 that was originally
        -:  712:  // placed
        -:  713:
        -:  714:    // bug
        -:  715:    
    #####:  716: while(drawntreasure<3){
        -:  717:  
    #####:  718:  if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  719:    shuffle(currentPlayer, state);
    #####:  720:  }
    #####:  721:  drawCard(currentPlayer, state);
        -:  722:  
        -:  723:
        -:  724:
    #####:  725:  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  726:  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  727:    drawntreasure++;
        -:  728:  else{
    #####:  729:    temphand[z]=cardDrawn;
    #####:  730:    state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  731:    z++;
        -:  732:  }
        -:  733:  }
        -:  734:
        -:  735:
        -:  736:    // here we omit the return 0 as it is not required as given previoulsy in the case
    #####:  737:      while(z-1 >=0){
    #####:  738:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  739:      z=z-1;
        -:  740:      }
    #####:  741:    }
        -:  742:
        -:  743:
        -:  744:// FunctionSmithy created (Refactored)
        -:  745:
        -:  746:void smithyFunction(int currentPlayer, int handPos,struct gameState *state){
        -:  747:
        -:  748:   // for loop enforced in function
        -:  749:
        -:  750:    // bug detected
    #####:  751:  for ( int i = 0; i<4;i++)
        -:  752:  {
        -:  753:
    #####:  754:    drawCard(currentPlayer,state);
        -:  755:
    #####:  756:  }
        -:  757:
        -:  758:        //discard card from hand
    #####:  759:        discardCard(handPos, currentPlayer,state,0);
        -:  760:
        -:  761:        // Since void function we dont return 0
    #####:  762:}
        -:  763:
        -:  764:
        -:  765:
        -:  766:// function_council_room created (refactored)
        -:  767:
        -:  768:void council_roomFunction( int currentPlayer, int handPos, struct gameState *state){
        -:  769:
        -:  770:    // bug detected
        -:  771:   
    #####:  772:   for( int i = 0; i<5 ; i++)
        -:  773:    {
        -:  774:
    #####:  775:      drawCard(currentPlayer,state);
    #####:  776:    }
        -:  777:
        -:  778:      //+1 Buy
    #####:  779:    state->numBuys++;
        -:  780:
        -:  781:
        -:  782:      //Each other player draws a card
    #####:  783:      for (int i = 0; i < state->numPlayers; i++)
        -:  784:  {
    #####:  785:    if ( i != currentPlayer )
        -:  786:      {
    #####:  787:        drawCard(i, state);
    #####:  788:      }
    #####:  789:  }
        -:  790:
        -:  791:  // put played card in placed card pile
    #####:  792:  discardCard(handPos,currentPlayer,state, 0);
        -:  793:
    #####:  794:}
        -:  795:
        -:  796:// functionSalvager created(refactored)
        -:  797:
        -:  798:void salvagerFunction(int choice1,int handPos,int currentPlayer,struct gameState *state)
        -:  799:{
        -:  800:  
        -:  801:
        -:  802:  //+1 buy
    #####:  803:      state->numBuys++;
        -:  804:      
    #####:  805:      if (choice1)
        -:  806:  {
        -:  807:    //gain coins equal to trashed card
    #####:  808:    state->coins = state->coins + getCost( handCard(choice1, state) );
        -:  809:   
        -:  810:    //trash card
    #####:  811:    discardCard(choice1, currentPlayer, state, 1);  
    #####:  812:  }
        -:  813:      
        -:  814:      //discard card
    #####:  815:      discardCard(handPos, currentPlayer, state, 0);
        -:  816:    
    #####:  817:}
        -:  818:
        -:  819:
        -:  820:
        -:  821:
        -:  822:// outpostFunction (REFACTORED)
        -:  823:void outpostFunction(int handPos,int currentPlayer, struct gameState *state){
        -:  824:
        -:  825: //bug 
        -:  826:
        -:  827:  //set outpost flag
    #####:  828:      state->outpostPlayed++;
        -:  829:      
        -:  830:      //discard card
    #####:  831:      discardCard(handPos, currentPlayer, state, 0);
        -:  832:  
    #####:  833:}
        -:  834:
        -:  835:
        -:  836:
        -:  837:
        -:  838:
        -:  839:
        -:  840:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  841:{
        -:  842:  int i;
        -:  843:  int j;
        -:  844:  int k;
        -:  845:  int x;
        -:  846:  int index;
    #####:  847:  int currentPlayer = whoseTurn(state);
    #####:  848:  int nextPlayer = currentPlayer + 1;
        -:  849:
    #####:  850:  int tributeRevealedCards[2] = {-1, -1};
        -:  851:  int temphand[MAX_HAND];// moved above the if statement
    #####:  852:  int drawntreasure=0;
        -:  853:  int cardDrawn;
    #####:  854:  int z = 0;// this is the counter for the temp hand
    #####:  855:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  856:    nextPlayer = 0;
    #####:  857:  }
        -:  858:  
        -:  859:  
        -:  860:  //uses switch to select card and perform actions
        -:  861:  
        -:  862:
        -:  863:
        -:  864:
    #####:  865:  switch( card ) 
        -:  866:    {
        -:  867:    
        -:  868:
        -:  869:
        -:  870:/*********************************************************************/
        -:  871:
        -:  872:
        -:  873:
        -:  874:
        -:  875:    case adventurer:
        -:  876:    // CALL THE FUNCTION
    #####:  877:        adventurerFunction(currentPlayer,temphand,z,state);
    #####:  878:        return 0; 
        -:  879:
        -:  880:
        -:  881:/*********************************************************************/
        -:  882:
        -:  883:
        -:  884:
        -:  885:// call the council_room function
        -:  886:
        -:  887:    case council_room:
    #####:  888:          council_roomFunction(currentPlayer,handPos,state);
    #####:  889:          return 0; 
        -:  890:
        -:  891:
        -:  892:
        -:  893:      
        -:  894:   
        -:  895:
        -:  896:
        -:  897:
        -:  898:/*********************************************************************/
        -:  899:
        -:  900:    
        -:  901:      
        -:  902:
        -:  903:
        -:  904:
        -:  905:    case feast:
        -:  906:      //gain card with cost up to 5
        -:  907:      //Backup hand
    #####:  908:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  909:  temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  910:  state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  911:      }
        -:  912:      //Backup hand
        -:  913:
        -:  914:      //Update Coins for Buy
    #####:  915:      updateCoins(currentPlayer, state, 5);
    #####:  916:      x = 1;//Condition to loop on
    #####:  917:      while( x == 1) {//Buy one card
    #####:  918:  if (supplyCount(choice1, state) <= 0){
        -:  919:    if (DEBUG)
        -:  920:      printf("None of that card left, sorry!\n");
        -:  921:
        -:  922:    if (DEBUG){
        -:  923:      printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  924:    }
    #####:  925:  }
    #####:  926:  else if (state->coins < getCost(choice1)){
    #####:  927:    printf("That card is too expensive!\n");
        -:  928:
        -:  929:    if (DEBUG){
        -:  930:      printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  931:    }
    #####:  932:  }
        -:  933:  else{
        -:  934:
        -:  935:    if (DEBUG){
        -:  936:      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  937:    }
        -:  938:
    #####:  939:    gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  940:    x = 0;//No more buying cards
        -:  941:
        -:  942:    if (DEBUG){
        -:  943:      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  944:    }
        -:  945:
        -:  946:  }
        -:  947:      }     
        -:  948:
        -:  949:      //Reset Hand
    #####:  950:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  951:  state->hand[currentPlayer][i] = temphand[i];
    #####:  952:  temphand[i] = -1;
    #####:  953:      }
        -:  954:      //Reset Hand
        -:  955:            
    #####:  956:      return 0;
        -:  957:      
        -:  958:    
        -:  959:/*********************************************************************/
        -:  960:
        -:  961:
        -:  962:
        -:  963:    case gardens:
    #####:  964:      return -1;
        -:  965:      
        -:  966:   
        -:  967:/*********************************************************************/
        -:  968:
        -:  969:
        -:  970:
        -:  971:    case mine:
    #####:  972:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  973:
    #####:  974:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  975:  {
    #####:  976:    return -1;
        -:  977:  }
        -:  978:    
    #####:  979:      if (choice2 > treasure_map || choice2 < curse)
        -:  980:  {
    #####:  981:    return -1;
        -:  982:  }
        -:  983:
    #####:  984:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  985:  {
    #####:  986:    return -1;
        -:  987:  }
        -:  988:
    #####:  989:      gainCard(choice2, state, 2, currentPlayer);
        -:  990:
        -:  991:      //discard card from hand
    #####:  992:      discardCard(handPos, currentPlayer, state, 0);
        -:  993:
        -:  994:      //discard trashed card
    #####:  995:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  996:  {
    #####:  997:    if (state->hand[currentPlayer][i] == j)
        -:  998:      {
    #####:  999:        discardCard(i, currentPlayer, state, 0);      
    #####: 1000:        break;
        -: 1001:      }
    #####: 1002:  }
        -: 1003:      
    #####: 1004:      return 0;
        -: 1005:      
        -: 1006:    /*********************************************************************/
        -: 1007:
        -: 1008:
        -: 1009:
        -: 1010:
        -: 1011:    case remodel:
    #####: 1012:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1013:
    #####: 1014:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -: 1015:  {
    #####: 1016:    return -1;
        -: 1017:  }
        -: 1018:
    #####: 1019:      gainCard(choice2, state, 0, currentPlayer);
        -: 1020:
        -: 1021:      //discard card from hand
    #####: 1022:      discardCard(handPos, currentPlayer, state, 0);
        -: 1023:
        -: 1024:      //discard trashed card
    #####: 1025:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1026:  {
    #####: 1027:    if (state->hand[currentPlayer][i] == j)
        -: 1028:      {
    #####: 1029:        discardCard(i, currentPlayer, state, 0);      
    #####: 1030:        break;
        -: 1031:      }
    #####: 1032:  }
        -: 1033:
        -: 1034:
    #####: 1035:      return 0;
        -: 1036:    
        -: 1037:    
        -: 1038:
        -: 1039:
        -: 1040:
        -: 1041:
        -: 1042:
        -: 1043:/*********************************************************************/
        -: 1044:
        -: 1045:   
        -: 1046:    
        -: 1047:
        -: 1048:
        -: 1049:      case smithy:
    #####: 1050:        smithyFunction(currentPlayer,handPos,state);
    #####: 1051:        return 0 ; 
        -: 1052:
        -: 1053:
        -: 1054:/*********************************************************************/
        -: 1055:
        -: 1056:
        -: 1057:
        -: 1058:
        -: 1059:    case village:
        -: 1060:      //+1 Card
    #####: 1061:      drawCard(currentPlayer, state);
        -: 1062:      
        -: 1063:      //+2 Actions
    #####: 1064:      state->numActions = state->numActions + 2;
        -: 1065:      
        -: 1066:      //discard played card from hand
    #####: 1067:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1068:      return 0;
        -: 1069:    
        -: 1070:
        -: 1071:
        -: 1072:/*********************************************************************/
        -: 1073:
        -: 1074:
        -: 1075:
        -: 1076:
        -: 1077:
        -: 1078:    case baron:
    #####: 1079:      state->numBuys++;//Increase buys by 1!
    #####: 1080:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####: 1081:  int p = 0;//Iterator for hand!
    #####: 1082:  int card_not_discarded = 1;//Flag for discard set!
    #####: 1083:  while(card_not_discarded){
    #####: 1084:    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####: 1085:      state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1086:      state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1087:      state->discardCount[currentPlayer]++;
    #####: 1088:      for (;p < state->handCount[currentPlayer]; p++){
    #####: 1089:        state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####: 1090:      }
    #####: 1091:      state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1092:      state->handCount[currentPlayer]--;
    #####: 1093:      card_not_discarded = 0;//Exit the loop
    #####: 1094:    }
    #####: 1095:    else if (p > state->handCount[currentPlayer]){
        -: 1096:      if(DEBUG) {
        -: 1097:        printf("No estate cards in your hand, invalid choice\n");
        -: 1098:        printf("Must gain an estate if there are any\n");
        -: 1099:      }
    #####: 1100:      if (supplyCount(estate, state) > 0){
    #####: 1101:        gainCard(estate, state, 0, currentPlayer);
    #####: 1102:        state->supplyCount[estate]--;//Decrement estates
    #####: 1103:        if (supplyCount(estate, state) == 0){
    #####: 1104:    isGameOver(state);
    #####: 1105:        }
    #####: 1106:      }
    #####: 1107:      card_not_discarded = 0;//Exit the loop
    #####: 1108:    }
        -: 1109:          
        -: 1110:    else{
    #####: 1111:      p++;//Next card
        -: 1112:    }
        -: 1113:  }
    #####: 1114:      }
        -: 1115:          
        -: 1116:      else{
    #####: 1117:  if (supplyCount(estate, state) > 0){
    #####: 1118:    gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1119:    state->supplyCount[estate]--;//Decrement Estates
    #####: 1120:    if (supplyCount(estate, state) == 0){
    #####: 1121:      isGameOver(state);
    #####: 1122:    }
    #####: 1123:  }
        -: 1124:      }
        -: 1125:      
        -: 1126:      
    #####: 1127:      return 0;
        -: 1128:    
        -: 1129:    
        -: 1130:
        -: 1131:/*********************************************************************/
        -: 1132:
        -: 1133:
        -: 1134:
        -: 1135:
        -: 1136:    case great_hall:
        -: 1137:      //+1 Card
    #####: 1138:      drawCard(currentPlayer, state);
        -: 1139:      
        -: 1140:      //+1 Actions
    #####: 1141:      state->numActions++;
        -: 1142:      
        -: 1143:      //discard card from hand
    #####: 1144:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1145:      return 0;
        -: 1146:    
        -: 1147:    
        -: 1148:
        -: 1149:
        -: 1150:/*********************************************************************/
        -: 1151:
        -: 1152:
        -: 1153:
        -: 1154:
        -: 1155:    case minion:
        -: 1156:      //+1 action
    #####: 1157:      state->numActions++;
        -: 1158:      
        -: 1159:      //discard card from hand
    #####: 1160:      discardCard(handPos, currentPlayer, state, 0);
        -: 1161:      
    #####: 1162:      if (choice1)    //+2 coins
        -: 1163:  {
    #####: 1164:    state->coins = state->coins + 2;
    #####: 1165:  }
        -: 1166:      
    #####: 1167:      else if (choice2)   //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1168:  {
        -: 1169:    //discard hand
    #####: 1170:    while(numHandCards(state) > 0)
        -: 1171:      {
    #####: 1172:        discardCard(handPos, currentPlayer, state, 0);
        -: 1173:      }
        -: 1174:        
        -: 1175:    //draw 4
    #####: 1176:    for (i = 0; i < 4; i++)
        -: 1177:      {
    #####: 1178:        drawCard(currentPlayer, state);
    #####: 1179:      }
        -: 1180:        
        -: 1181:    //other players discard hand and redraw if hand size > 4
    #####: 1182:    for (i = 0; i < state->numPlayers; i++)
        -: 1183:      {
    #####: 1184:        if (i != currentPlayer)
        -: 1185:    {
    #####: 1186:      if ( state->handCount[i] > 4 )
        -: 1187:        {
        -: 1188:          //discard hand
    #####: 1189:          while( state->handCount[i] > 0 )
        -: 1190:      {
    #####: 1191:        discardCard(handPos, i, state, 0);
        -: 1192:      }
        -: 1193:              
        -: 1194:          //draw 4
    #####: 1195:          for (j = 0; j < 4; j++)
        -: 1196:      {
    #####: 1197:        drawCard(i, state);
    #####: 1198:      }
    #####: 1199:        }
    #####: 1200:    }
    #####: 1201:      }
        -: 1202:        
    #####: 1203:  }
    #####: 1204:      return 0;
        -: 1205:    
        -: 1206:   
        -: 1207:
        -: 1208:
        -: 1209:
        -: 1210:
        -: 1211:/*********************************************************************/
        -: 1212:
        -: 1213:
        -: 1214:
        -: 1215:
        -: 1216:    case steward:
    #####: 1217:      if (choice1 == 1)
        -: 1218:  {
        -: 1219:    //+2 cards
    #####: 1220:    drawCard(currentPlayer, state);
    #####: 1221:    drawCard(currentPlayer, state);
    #####: 1222:  }
    #####: 1223:      else if (choice1 == 2)
        -: 1224:  {
        -: 1225:    //+2 coins
    #####: 1226:    state->coins = state->coins + 2;
    #####: 1227:  }
        -: 1228:      else
        -: 1229:  {
        -: 1230:    //trash 2 cards in hand
    #####: 1231:    discardCard(choice2, currentPlayer, state, 1);
    #####: 1232:    discardCard(choice3, currentPlayer, state, 1);
        -: 1233:  }
        -: 1234:      
        -: 1235:      //discard card from hand
    #####: 1236:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1237:      return 0;
        -: 1238:    
        -: 1239:    
        -: 1240:
        -: 1241:
        -: 1242:
        -: 1243:/**********************************************************************/
        -: 1244:
        -: 1245:
        -: 1246:
        -: 1247:
        -: 1248:
        -: 1249:
        -: 1250:
        -: 1251:
        -: 1252:    case tribute:
    #####: 1253:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1254:  if (state->deckCount[nextPlayer] > 0){
    #####: 1255:    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1256:    state->deckCount[nextPlayer]--;
    #####: 1257:  }
    #####: 1258:  else if (state->discardCount[nextPlayer] > 0){
    #####: 1259:    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1260:    state->discardCount[nextPlayer]--;
    #####: 1261:  }
        -: 1262:  else{
        -: 1263:    //No Card to Reveal
        -: 1264:    if (DEBUG){
        -: 1265:      printf("No cards to reveal\n");
        -: 1266:    }
        -: 1267:  }
    #####: 1268:      }
        -: 1269:      
        -: 1270:      else{
    #####: 1271:  if (state->deckCount[nextPlayer] == 0){
    #####: 1272:    for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1273:      state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1274:      state->deckCount[nextPlayer]++;
    #####: 1275:      state->discard[nextPlayer][i] = -1;
    #####: 1276:      state->discardCount[nextPlayer]--;
    #####: 1277:    }
        -: 1278:          
    #####: 1279:    shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1280:  } 
    #####: 1281:  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1282:  state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1283:  state->deckCount[nextPlayer]--;
    #####: 1284:  tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1285:  state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1286:  state->deckCount[nextPlayer]--;
        -: 1287:      }    
        -: 1288:           
    #####: 1289:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1290:  state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1291:  state->playedCardCount++;
    #####: 1292:  tributeRevealedCards[1] = -1;
    #####: 1293:      }
        -: 1294:
    #####: 1295:      for (i = 0; i <= 2; i ++){
    #####: 1296:  if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1297:    state->coins += 2;
    #####: 1298:  }
        -: 1299:        
    #####: 1300:  else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1301:    drawCard(currentPlayer, state);
    #####: 1302:    drawCard(currentPlayer, state);
    #####: 1303:  }
        -: 1304:  else{//Action Card
    #####: 1305:    state->numActions = state->numActions + 2;
        -: 1306:  }
    #####: 1307:      }
        -: 1308:      
    #####: 1309:      return 0;
        -: 1310:    
        -: 1311:   
        -: 1312:
        -: 1313:/*********************************************************************/
        -: 1314:
        -: 1315:
        -: 1316:
        -: 1317:
        -: 1318:
        -: 1319:    case ambassador:
    #####: 1320:      j = 0;    //used to check if player has enough cards to discard
        -: 1321:
    #####: 1322:      if (choice2 > 2 || choice2 < 0)
        -: 1323:  {
    #####: 1324:    return -1;        
        -: 1325:  }
        -: 1326:
    #####: 1327:      if (choice1 == handPos)
        -: 1328:  {
    #####: 1329:    return -1;
        -: 1330:  }
        -: 1331:
    #####: 1332:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1333:  {
    #####: 1334:    if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1335:      {
    #####: 1336:        j++;
    #####: 1337:      }
    #####: 1338:  }
    #####: 1339:      if (j < choice2)
        -: 1340:  {
    #####: 1341:    return -1;        
        -: 1342:  }
        -: 1343:
        -: 1344:      if (DEBUG) 
        -: 1345:  printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1346:
        -: 1347:      //increase supply count for choosen card by amount being discarded
    #####: 1348:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1349:      
        -: 1350:      //each other player gains a copy of revealed card
    #####: 1351:      for (i = 0; i < state->numPlayers; i++)
        -: 1352:  {
    #####: 1353:    if (i != currentPlayer)
        -: 1354:      {
    #####: 1355:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1356:      }
    #####: 1357:  }
        -: 1358:
        -: 1359:      //discard played card from hand
    #####: 1360:      discardCard(handPos, currentPlayer, state, 0);      
        -: 1361:
        -: 1362:      //trash copies of cards returned to supply
    #####: 1363:      for (j = 0; j < choice2; j++)
        -: 1364:  {
    #####: 1365:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1366:      {
    #####: 1367:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1368:    {
    #####: 1369:      discardCard(i, currentPlayer, state, 1);
    #####: 1370:      break;
        -: 1371:    }
    #####: 1372:      }
    #####: 1373:  }     
        -: 1374:
    #####: 1375:      return 0;
        -: 1376:    
        -: 1377:   
        -: 1378:
        -: 1379:/********************************/
        -: 1380:
        -: 1381:
        -: 1382:
        -: 1383:
        -: 1384:
        -: 1385:
        -: 1386:    case cutpurse:
        -: 1387:
    #####: 1388:      updateCoins(currentPlayer, state, 2);
    #####: 1389:      for (i = 0; i < state->numPlayers; i++)
        -: 1390:  {
    #####: 1391:    if (i != currentPlayer)
        -: 1392:      {
    #####: 1393:        for (j = 0; j < state->handCount[i]; j++)
        -: 1394:    {
    #####: 1395:      if (state->hand[i][j] == copper)
        -: 1396:        {
    #####: 1397:          discardCard(j, i, state, 0);
    #####: 1398:          break;
        -: 1399:        }
    #####: 1400:      if (j == state->handCount[i])
        -: 1401:        {
    #####: 1402:          for (k = 0; k < state->handCount[i]; k++)
        -: 1403:      {
        -: 1404:        if (DEBUG)
        -: 1405:          printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1406:      } 
    #####: 1407:          break;
        -: 1408:        }   
    #####: 1409:    }
        -: 1410:          
    #####: 1411:      }
        -: 1412:        
    #####: 1413:  }       
        -: 1414:
        -: 1415:      //discard played card from hand
    #####: 1416:      discardCard(handPos, currentPlayer, state, 0);      
        -: 1417:
    #####: 1418:      return 0;
        -: 1419:
        -: 1420:    
        -: 1421:    
        -: 1422:
        -: 1423:
        -: 1424:/********************************/
        -: 1425:
        -: 1426:
        -: 1427:
        -: 1428:
        -: 1429:
        -: 1430:
        -: 1431:
        -: 1432:
        -: 1433:
        -: 1434:    case embargo: 
        -: 1435:      //+2 Coins
    #####: 1436:      state->coins = state->coins + 2;
        -: 1437:      
        -: 1438:      //see if selected pile is in play
    #####: 1439:      if ( state->supplyCount[choice1] == -1 )
        -: 1440:  {
    #####: 1441:    return -1;
        -: 1442:  }
        -: 1443:      
        -: 1444:
    #####: 1445:       state->embargoTokens[choice1]++;
        -: 1446:      
        -: 1447:      //trash card
    #####: 1448:      discardCard(handPos, currentPlayer, state, 1);    
    #####: 1449:      return 0;
        -: 1450:    
        -: 1451:
        -: 1452:/********************************/
        -: 1453:
        -: 1454:
        -: 1455:   
        -: 1456:
        -: 1457:      
        -: 1458:
        -: 1459:
        -: 1460:
        -: 1461:      // call outpost function 
        -: 1462:      case outpost:
    #####: 1463:      outpostFunction(currentPlayer,handPos,state);
    #####: 1464:      return 0;
        -: 1465:
        -: 1466:
        -: 1467:
        -: 1468:/********************************/
        -: 1469:
        -: 1470:
        -: 1471:
        -: 1472:
        -: 1473:      // call salvegerFunction
        -: 1474:      case salvager:
    #####: 1475:      salvagerFunction(currentPlayer,handPos,choice1,state);
    #####: 1476:      return 0 ;
        -: 1477:
        -: 1478:
        -: 1479:
        -: 1480:
        -: 1481:
        -: 1482:  /********************************/
        -: 1483:
        -: 1484:
        -: 1485:
        -: 1486:
        -: 1487:    
        -: 1488:
        -: 1489:
        -: 1490:
        -: 1491:
        -: 1492:
        -: 1493:    case sea_hag:
    #####: 1494:      for (i = 0; i < state->numPlayers; i++){
    #####: 1495:  if (i != currentPlayer){
    #####: 1496:    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];          state->deckCount[i]--;
    #####: 1497:    state->discardCount[i]++;
    #####: 1498:    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1499:  }
    #####: 1500:      }
    #####: 1501:      return 0;
        -: 1502:    
        -: 1503:   
        -: 1504:
        -: 1505:
        -: 1506:/********************************/
        -: 1507:
        -: 1508:
        -: 1509:
        -: 1510:
        -: 1511:    case treasure_map:
        -: 1512:      //search hand for another treasure_map
    #####: 1513:      index = -1;
    #####: 1514:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1515:  {
    #####: 1516:    if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1517:      {
    #####: 1518:        index = i;
    #####: 1519:        break;
        -: 1520:      }
    #####: 1521:  }
    #####: 1522:      if (index > -1)
        -: 1523:  {
        -: 1524:    //trash both treasure cards
    #####: 1525:    discardCard(handPos, currentPlayer, state, 1);
    #####: 1526:    discardCard(index, currentPlayer, state, 1);
        -: 1527:
        -: 1528:    //gain 4 Gold cards
    #####: 1529:    for (i = 0; i < 4; i++)
        -: 1530:      {
    #####: 1531:        gainCard(gold, state, 1, currentPlayer);
    #####: 1532:      }
        -: 1533:        
        -: 1534:    //return success
    #####: 1535:    return 1;
        -: 1536:  }
        -: 1537:      
        -: 1538:      //no second treasure_map found in hand
    #####: 1539:      return -1;
        -: 1540:    }
        -: 1541:  
    #####: 1542:  return -1;
    #####: 1543:}
        -: 1544:
        -: 1545:/********************************/
        -: 1546:
        -: 1547:
        -: 1548:
        -: 1549:
        -: 1550:
        -: 1551:
        -: 1552:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1553:{
        -: 1554:  
        -: 1555:  //if card is not trashed, added to Played pile 
    #####: 1556:  if (trashFlag < 1)
        -: 1557:    {
        -: 1558:      //add card to played pile
    #####: 1559:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1560:      state->playedCardCount++;
    #####: 1561:    }
        -: 1562:  
        -: 1563:  //set played card to -1
    #####: 1564:  state->hand[currentPlayer][handPos] = -1;
        -: 1565:  
        -: 1566:  //remove card from player's hand
    #####: 1567:  if ( handPos == (state->handCount[currentPlayer] - 1) )   //last card in hand array is played
        -: 1568:    {
        -: 1569:      //reduce number of cards in hand
    #####: 1570:      state->handCount[currentPlayer]--;
    #####: 1571:    }
    #####: 1572:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1573:    {
        -: 1574:      //reduce number of cards in hand
    #####: 1575:      state->handCount[currentPlayer]--;
    #####: 1576:    }
        -: 1577:  else  
        -: 1578:    {
        -: 1579:      //replace discarded card with last card in hand
    #####: 1580:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1581:      //set last card to -1
    #####: 1582:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1583:      //reduce number of cards in hand
    #####: 1584:      state->handCount[currentPlayer]--;
        -: 1585:    }
        -: 1586:  
    #####: 1587:  return 0;
        -: 1588:}
        -: 1589:
        -: 1590:
        -: 1591:
        -: 1592:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1593:{
        -: 1594:  //Note: supplyPos is enum of choosen card
        -: 1595:  
        -: 1596:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1597:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1598:    {
    #####: 1599:      return -1;
        -: 1600:    }
        -: 1601:  
        -: 1602:  //added card for [whoseTurn] current player:
        -: 1603:  // toFlag = 0 : add to discard
        -: 1604:  // toFlag = 1 : add to deck
        -: 1605:  // toFlag = 2 : add to hand
        -: 1606:
    #####: 1607:  if (toFlag == 1)
        -: 1608:    {
    #####: 1609:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1610:      state->deckCount[player]++;
    #####: 1611:    }
    #####: 1612:  else if (toFlag == 2)
        -: 1613:    {
    #####: 1614:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1615:      state->handCount[player]++;
    #####: 1616:    }
        -: 1617:  else
        -: 1618:    {
    #####: 1619:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1620:      state->discardCount[player]++;
        -: 1621:    }
        -: 1622:  
        -: 1623:  //decrease number in supply pile
    #####: 1624:  state->supplyCount[supplyPos]--;
        -: 1625:   
    #####: 1626:  return 0;
    #####: 1627:}
        -: 1628:
        -: 1629:
        -: 1630:
        -: 1631:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1632:{
        -: 1633:  int i;
        -: 1634:  
        -: 1635:  //reset coin count
      441: 1636:  state->coins = 0;
        -: 1637:
        -: 1638:  //add coins for each Treasure card in player's hand
     3972: 1639:  for (i = 0; i < state->handCount[player]; i++)
        -: 1640:    {
     1545: 1641:      if (state->hand[player][i] == copper)
        -: 1642:  {
      774: 1643:    state->coins += 1;
      774: 1644:  }
      771: 1645:      else if (state->hand[player][i] == silver)
        -: 1646:  {
      330: 1647:    state->coins += 2;
      330: 1648:  }
      441: 1649:      else if (state->hand[player][i] == gold)
        -: 1650:  {
      330: 1651:    state->coins += 3;
      330: 1652:  } 
     1545: 1653:    } 
        -: 1654:
        -: 1655:  //add bonus
      441: 1656:  state->coins += bonus;
        -: 1657:
      441: 1658:  return 0;
        -: 1659:}
        -: 1660:
        -: 1661:
        -: 1662://end of dominion.c
        -: 1663:
unittest3.c:
TESTING isGameOver():

Three empty piles given
Test: PASSED

 The province Cards arent empty

 The Three supply piles arent empty
Test: PASSED

Test: Test passed

File 'unittest3.c'
Lines executed:83.33% of 30
unittest3.c:creating 'unittest3.c.gcov'

File 'dominion.c'
Lines executed:18.92% of 650
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include "rngs.h"
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:
        -:   10:
        -:   11:int compare(const void* a, const void* b) {
     3164:   12:  if (*(int*)a > *(int*)b)
    #####:   13:    return 1;
     3164:   14:  if (*(int*)a < *(int*)b)
     1130:   15:    return -1;
     2034:   16:  return 0;
     3164:   17:}
        -:   18:
        -:   19:
        -:   20:
        -:   21:struct gameState* newGame() {
    #####:   22:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   23:  return g;
        -:   24:}
        -:   25:
        -:   26:
        -:   27:
        -:   28:
        -:   29:
        -:   30:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   31:      int k8, int k9, int k10) {
    #####:   32:  int* k = malloc(10 * sizeof(int));
    #####:   33:  k[0] = k1;
    #####:   34:  k[1] = k2;
    #####:   35:  k[2] = k3;
    #####:   36:  k[3] = k4;
    #####:   37:  k[4] = k5;
    #####:   38:  k[5] = k6;
    #####:   39:  k[6] = k7;
    #####:   40:  k[7] = k8;
    #####:   41:  k[8] = k9;
    #####:   42:  k[9] = k10;
    #####:   43:  return k;
        -:   44:}
        -:   45:
        -:   46:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   47:       struct gameState *state) {
        -:   48:
        -:   49:  int i;
        -:   50:  int j;
        -:   51:  int it;     
        -:   52:  //set up random number generator
      112:   53:  SelectStream(1);
      112:   54:  PutSeed((long)randomSeed);
        -:   55:  
        -:   56:  //check number of players
      224:   57:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   58:    {
    #####:   59:      return -1;
        -:   60:    }
        -:   61:
        -:   62:  //set number of players
      112:   63:  state->numPlayers = numPlayers;
        -:   64:
        -:   65:  //check selected kingdom cards are different
     2464:   66:  for (i = 0; i < 10; i++)
        -:   67:    {
    24640:   68:      for (j = 0; j < 10; j++)
        -:   69:        {
    21280:   70:    if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   71:      {
    #####:   72:        return -1;
        -:   73:      }
    11200:   74:        }
     1120:   75:    }
        -:   76:
        -:   77:
        -:   78:  //initialize supply
        -:   79:  ///////////////////////////////
        -:   80:
        -:   81:  //set number of Curse cards
      112:   82:  if (numPlayers == 2)
        -:   83:    {
      112:   84:      state->supplyCount[curse] = 10;
      112:   85:    }
    #####:   86:  else if (numPlayers == 3)
        -:   87:    {
    #####:   88:      state->supplyCount[curse] = 20;
    #####:   89:    }
        -:   90:  else
        -:   91:    {
    #####:   92:      state->supplyCount[curse] = 30;
        -:   93:    }
        -:   94:
        -:   95:  //set number of Victory cards
      112:   96:  if (numPlayers == 2)
        -:   97:    {
      112:   98:      state->supplyCount[estate] = 8;
      112:   99:      state->supplyCount[duchy] = 8;
      112:  100:      state->supplyCount[province] = 8;
      112:  101:    }
        -:  102:  else
        -:  103:    {
    #####:  104:      state->supplyCount[estate] = 12;
    #####:  105:      state->supplyCount[duchy] = 12;
    #####:  106:      state->supplyCount[province] = 12;
        -:  107:    }
        -:  108:
        -:  109:  //set number of Treasure cards
      112:  110:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      112:  111:  state->supplyCount[silver] = 40;
      112:  112:  state->supplyCount[gold] = 30;
        -:  113:
        -:  114:  //set number of Kingdom cards
     4704:  115:  for (i = adventurer; i <= treasure_map; i++)        //loop all cards
        -:  116:    {
    36960:  117:      for (j = 0; j < 10; j++)              //loop chosen cards
        -:  118:  {
    17360:  119:    if (kingdomCards[j] == i)
        -:  120:      {
        -:  121:        //check if card is a 'Victory' Kingdom card
     2128:  122:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  123:    {
      224:  124:      if (numPlayers == 2){ 
      224:  125:        state->supplyCount[i] = 8; 
      224:  126:      }
    #####:  127:      else{ state->supplyCount[i] = 12; }
      224:  128:    }
        -:  129:        else
        -:  130:    {
      896:  131:      state->supplyCount[i] = 10;
        -:  132:    }
     1120:  133:        break;
        -:  134:      }
        -:  135:    else    //card is not in the set choosen for the game
        -:  136:      {
    16240:  137:        state->supplyCount[i] = -1;
        -:  138:      }
    16240:  139:  }
        -:  140:
     2240:  141:    }
        -:  142:
        -:  143:  ////////////////////////
        -:  144:  //supply intilization complete
        -:  145:
        -:  146:  //set player decks
      672:  147:  for (i = 0; i < numPlayers; i++)
        -:  148:    {
      224:  149:      state->deckCount[i] = 0;
     1792:  150:      for (j = 0; j < 3; j++)
        -:  151:  {
      672:  152:    state->deck[i][j] = estate;
      672:  153:    state->deckCount[i]++;
      672:  154:  }
     3584:  155:      for (j = 3; j < 10; j++)
        -:  156:  {
     1568:  157:    state->deck[i][j] = copper;
     1568:  158:    state->deckCount[i]++;    
     1568:  159:  }
      224:  160:    }
        -:  161:
        -:  162:  //shuffle player decks
      672:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
      224:  165:      if ( shuffle(i, state) < 0 )
        -:  166:  {
    #####:  167:    return -1;
        -:  168:  }
      224:  169:    }
        -:  170:
        -:  171:  //draw player hands
      672:  172:  for (i = 0; i < numPlayers; i++)
        -:  173:    {  
        -:  174:      //initialize hand size to zero
      224:  175:      state->handCount[i] = 0;
      224:  176:      state->discardCount[i] = 0;
        -:  177:      //draw 5 cards
        -:  178:      // for (j = 0; j < 5; j++)
        -:  179:      //  {
        -:  180:      //    drawCard(i, state);
        -:  181:      //  }
      224:  182:    }
        -:  183:  
        -:  184:  //set embargo tokens to 0 for all supply piles
     6272:  185:  for (i = 0; i <= treasure_map; i++)
        -:  186:    {
     3024:  187:      state->embargoTokens[i] = 0;
     3024:  188:    }
        -:  189:
        -:  190:  //initialize first player's turn
      112:  191:  state->outpostPlayed = 0;
      112:  192:  state->phase = 0;
      112:  193:  state->numActions = 1;
      112:  194:  state->numBuys = 1;
      112:  195:  state->playedCardCount = 0;
      112:  196:  state->whoseTurn = 0;
      112:  197:  state->handCount[state->whoseTurn] = 0;
        -:  198:  //int it; move to top
        -:  199:
        -:  200:  //Moved draw cards to here, only drawing at the start of a turn
     1344:  201:  for (it = 0; it < 5; it++){
      560:  202:    drawCard(state->whoseTurn, state);
      560:  203:  }
        -:  204:
      112:  205:  updateCoins(state->whoseTurn, state, 0);
        -:  206:
      112:  207:  return 0;
      112:  208:}
        -:  209:
        -:  210:int shuffle(int player, struct gameState *state) {
        -:  211: 
        -:  212:
        -:  213:  int newDeck[MAX_DECK];
      227:  214:  int newDeckPos = 0;
        -:  215:  int card;
        -:  216:  int i;
        -:  217:
      227:  218:  if (state->deckCount[player] < 1)
        1:  219:    return -1;
      226:  220:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  221:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  222:
     4972:  223:  while (state->deckCount[player] > 0) {
     2260:  224:    card = floor(Random() * state->deckCount[player]);
     2260:  225:    newDeck[newDeckPos] = state->deck[player][card];
     2260:  226:    newDeckPos++;
    15830:  227:    for (i = card; i < state->deckCount[player]-1; i++) {
     5655:  228:      state->deck[player][i] = state->deck[player][i+1];
     5655:  229:    }
     2260:  230:    state->deckCount[player]--;
        -:  231:  }
     4972:  232:  for (i = 0; i < newDeckPos; i++) {
     2260:  233:    state->deck[player][i] = newDeck[i];
     2260:  234:    state->deckCount[player]++;
     2260:  235:  }
        -:  236:
      226:  237:  return 0;
      227:  238:}
        -:  239:
        -:  240:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  241:{ 
        -:  242:  int card;
    #####:  243:  int coin_bonus = 0;     //tracks coins gain from actions
        -:  244:
        -:  245:  //check if it is the right phase
    #####:  246:  if (state->phase != 0)
        -:  247:    {
    #####:  248:      return -1;
        -:  249:    }
        -:  250:  
        -:  251:  //check if player has enough actions
    #####:  252:  if ( state->numActions < 1 )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:  
        -:  257:  //get card played
    #####:  258:  card = handCard(handPos, state);
        -:  259:  
        -:  260:  //check if selected card is an action
    #####:  261:  if ( card < adventurer || card > treasure_map )
        -:  262:    {
    #####:  263:      return -1;
        -:  264:    }
        -:  265:  
        -:  266:  //play card
    #####:  267:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  268:    {
    #####:  269:      return -1;
        -:  270:    }
        -:  271:  
        -:  272:  //reduce number of actions
    #####:  273:  state->numActions--;
        -:  274:
        -:  275:  //update coins (Treasure cards may be added with card draws)
    #####:  276:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  277:  
    #####:  278:  return 0;
    #####:  279:}
        -:  280:
        -:  281:int buyCard(int supplyPos, struct gameState *state) {
        -:  282:  int who;
        -:  283:  if (DEBUG){
        -:  284:    printf("Entering buyCard...\n");
        -:  285:  }
        -:  286:
        -:  287:  // I don't know what to do about the phase thing.
        -:  288:
    #####:  289:  who = state->whoseTurn;
        -:  290:
    #####:  291:  if (state->numBuys < 1){
        -:  292:    if (DEBUG)
        -:  293:      printf("You do not have any buys left\n");
    #####:  294:    return -1;
    #####:  295:  } else if (supplyCount(supplyPos, state) <1){
        -:  296:    if (DEBUG)
        -:  297:      printf("There are not any of that type of card left\n");
    #####:  298:    return -1;
    #####:  299:  } else if (state->coins < getCost(supplyPos)){
        -:  300:    if (DEBUG) 
        -:  301:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  302:    return -1;
        -:  303:  } else {
    #####:  304:    state->phase=1;
        -:  305:    //state->supplyCount[supplyPos]--;
    #####:  306:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  307:  
    #####:  308:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  309:    state->numBuys--;
        -:  310:    if (DEBUG)
        -:  311:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  312:  }
        -:  313:
        -:  314:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  315:  //state->discardCount[who]++;
        -:  316:    
    #####:  317:  return 0;
    #####:  318:}
        -:  319:
        -:  320:
        -:  321:
        -:  322:int numHandCards(struct gameState *state) {
    #####:  323:  return state->handCount[ whoseTurn(state) ];
        -:  324:}
        -:  325:
        -:  326:int handCard(int handPos, struct gameState *state) {
    #####:  327:  int currentPlayer = whoseTurn(state);
    #####:  328:  return state->hand[currentPlayer][handPos];
        -:  329:}
        -:  330:
        -:  331:int supplyCount(int card, struct gameState *state) {
    #####:  332:  return state->supplyCount[card];
        -:  333:}
        -:  334:
        -:  335:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  336:  int i;
    #####:  337:  int count = 0;
        -:  338:
    #####:  339:  for (i = 0; i < state->deckCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->deck[player][i] == card) count++;
    #####:  342:    }
        -:  343:
    #####:  344:  for (i = 0; i < state->handCount[player]; i++)
        -:  345:    {
    #####:  346:      if (state->hand[player][i] == card) count++;
    #####:  347:    }
        -:  348:
    #####:  349:  for (i = 0; i < state->discardCount[player]; i++)
        -:  350:    {
    #####:  351:      if (state->discard[player][i] == card) count++;
    #####:  352:    }
        -:  353:
    #####:  354:  return count;
        -:  355:}
        -:  356:
        -:  357:int whoseTurn(struct gameState *state) {
    #####:  358:  return state->whoseTurn;
        -:  359:}
        -:  360:
        -:  361:
        -:  362:int endTurn(struct gameState *state) {
        -:  363:  int k;
        -:  364:  int i;
    #####:  365:  int currentPlayer = whoseTurn(state);
        -:  366:  
        -:  367:  //Discard hand
    #####:  368:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  369:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  370:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  371:  }
    #####:  372:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  373:    
        -:  374:  //Code for determining the player
    #####:  375:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  376:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  377:  }
        -:  378:  else{
    #####:  379:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  380:  }
        -:  381:
    #####:  382:  state->outpostPlayed = 0;
    #####:  383:  state->phase = 0;
    #####:  384:  state->numActions = 1;
    #####:  385:  state->coins = 0;
    #####:  386:  state->numBuys = 1;
    #####:  387:  state->playedCardCount = 0;
    #####:  388:  state->handCount[state->whoseTurn] = 0;
        -:  389:
        -:  390:  //int k; move to top
        -:  391:  //Next player draws hand
    #####:  392:  for (k = 0; k < 5; k++){
    #####:  393:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  394:  }
        -:  395:
        -:  396:  //Update money
    #####:  397:  updateCoins(state->whoseTurn, state , 0);
        -:  398:
    #####:  399:  return 0;
        -:  400:}
        -:  401:
        -:  402:
        -:  403:
        -:  404:
        -:  405:
        -:  406:int isGameOver(struct gameState *state) {
        -:  407:  int i;
        -:  408:  int j;
        -:  409:  
        -:  410:  //if stack of Province cards is empty, the game ends
        2:  411:  if (state->supplyCount[province] == 0)
        -:  412:    {
    #####:  413:      return 1;
        -:  414:    }
        -:  415:
        -:  416:  //if three supply pile are at 0, the game ends
        2:  417:  j = 0;
      104:  418:  for (i = 0; i < 25; i++)
        -:  419:    {
       50:  420:      if (state->supplyCount[i] == 0)
        -:  421:  {
        3:  422:    j++;
        3:  423:  }
       50:  424:    }
        2:  425:  if ( j >= 3)
        -:  426:    {
        1:  427:      return 1;
        -:  428:    }
        -:  429:
        1:  430:  return 0;
        2:  431:}
        -:  432:
        -:  433:int scoreFor (int player, struct gameState *state) {
        -:  434:
        -:  435:  int i;
    #####:  436:  int score = 0;
        -:  437:  //score from hand
    #####:  438:  for (i = 0; i < state->handCount[player]; i++)
        -:  439:    {
    #####:  440:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  441:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  442:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  443:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  444:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  445:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  446:    }
        -:  447:
        -:  448:  //score from discard
    #####:  449:  for (i = 0; i < state->discardCount[player]; i++)
        -:  450:    {
    #####:  451:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  452:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  453:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  454:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  455:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  456:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  457:    }
        -:  458:
        -:  459:  //score from deck
    #####:  460:  for (i = 0; i < state->discardCount[player]; i++)
        -:  461:    {
    #####:  462:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  463:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  464:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  465:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  466:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  467:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  468:    }
        -:  469:
    #####:  470:  return score;
        -:  471:}
        -:  472:
        -:  473:
        -:  474:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  475:  int i;  
        -:  476:  int j;
        -:  477:  int highScore;
        -:  478:  int currentPlayer;
        -:  479:
        -:  480:  //get score for each player
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  482:    {
        -:  483:      //set unused player scores to -9999
    #####:  484:      if (i >= state->numPlayers)
        -:  485:  {
    #####:  486:    players[i] = -9999;
    #####:  487:  }
        -:  488:      else
        -:  489:  {
    #####:  490:    players[i] = scoreFor (i, state);
        -:  491:  }
    #####:  492:    }
        -:  493:
        -:  494:  //find highest score
    #####:  495:  j = 0;
    #####:  496:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  497:    {
    #####:  498:      if (players[i] > players[j])
        -:  499:  {
    #####:  500:    j = i;
    #####:  501:  }
    #####:  502:    }
    #####:  503:  highScore = players[j];
        -:  504:
        -:  505:  //add 1 to players who had less turns
    #####:  506:  currentPlayer = whoseTurn(state);
    #####:  507:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  508:    {
    #####:  509:      if ( players[i] == highScore && i > currentPlayer )
        -:  510:  {
    #####:  511:    players[i]++;
    #####:  512:  }
    #####:  513:    }
        -:  514:
        -:  515:  //find new highest score
    #####:  516:  j = 0;
    #####:  517:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  518:    {
    #####:  519:      if ( players[i] > players[j] )
        -:  520:  {
    #####:  521:    j = i;
    #####:  522:  }
    #####:  523:    }
    #####:  524:  highScore = players[j];
        -:  525:
        -:  526:  //set winners in array to 1 and rest to 0
    #####:  527:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  528:    {
    #####:  529:      if ( players[i] == highScore )
        -:  530:  {
    #####:  531:    players[i] = 1;
    #####:  532:  }
        -:  533:      else
        -:  534:  {
    #####:  535:    players[i] = 0;
        -:  536:  }
    #####:  537:    }
        -:  538:
    #####:  539:  return 0;
        -:  540:}
        -:  541:
        -:  542:
        -:  543:int drawCard(int player, struct gameState *state)
        -:  544:{ int count;
        -:  545:  int deckCounter;
      560:  546:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  547:    
        -:  548:    //Step 1 Shuffle the discard pile back into a deck
        -:  549:    int i;
        -:  550:    //Move discard to deck
    #####:  551:    for (i = 0; i < state->discardCount[player];i++){
    #####:  552:      state->deck[player][i] = state->discard[player][i];
    #####:  553:      state->discard[player][i] = -1;
    #####:  554:    }
        -:  555:
    #####:  556:    state->deckCount[player] = state->discardCount[player];
    #####:  557:    state->discardCount[player] = 0;//Reset discard
        -:  558:
        -:  559:    //Shufffle the deck
    #####:  560:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  561:   
        -:  562:    if (DEBUG){//Debug statements
        -:  563:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  564:    }
        -:  565:    
    #####:  566:    state->discardCount[player] = 0;
        -:  567:
        -:  568:    //Step 2 Draw Card
    #####:  569:    count = state->handCount[player];//Get current player's hand count
        -:  570:    
        -:  571:    if (DEBUG){//Debug statements
        -:  572:      printf("Current hand count: %d\n", count);
        -:  573:    }
        -:  574:    
    #####:  575:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  576:
    #####:  577:    if (deckCounter == 0)
    #####:  578:      return -1;
        -:  579:
    #####:  580:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  581:    state->deckCount[player]--;
    #####:  582:    state->handCount[player]++;//Increment hand count
    #####:  583:  }
        -:  584:
        -:  585:  else{
      560:  586:    int count = state->handCount[player];//Get current hand count for player
        -:  587:    int deckCounter;
        -:  588:    if (DEBUG){//Debug statements
        -:  589:      printf("Current hand count: %d\n", count);
        -:  590:    }
        -:  591:
      560:  592:    deckCounter = state->deckCount[player];//Create holder for the deck count
      560:  593:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      560:  594:    state->deckCount[player]--;
      560:  595:    state->handCount[player]++;//Increment hand count
        -:  596:  }
        -:  597:
      560:  598:  return 0;
      560:  599:}
        -:  600:
        -:  601:
        -:  602:
        -:  603:
        -:  604:
        -:  605:
        -:  606:
        -:  607:int getCost(int cardNumber)
        -:  608:{
    #####:  609:  switch( cardNumber ) 
        -:  610:    {
        -:  611:    case curse:
    #####:  612:      return 0;
        -:  613:    case estate:
    #####:  614:      return 2;
        -:  615:    case duchy:
    #####:  616:      return 5;
        -:  617:    case province:
    #####:  618:      return 8;
        -:  619:    case copper:
    #####:  620:      return 0;
        -:  621:    case silver:
    #####:  622:      return 3;
        -:  623:    case gold:
    #####:  624:      return 6;
        -:  625:
        -:  626:
        -:  627:
        -:  628:
        -:  629:
        -:  630:    case adventurer:
    #####:  631:      return 6;
        -:  632:    
        -:  633:
        -:  634:
        -:  635:
        -:  636:    case council_room:
    #####:  637:      return 5;
        -:  638:    
        -:  639:
        -:  640:
        -:  641:    case feast:
    #####:  642:      return 4;
        -:  643:    
        -:  644:
        -:  645:
        -:  646:
        -:  647:
        -:  648:    case gardens:
    #####:  649:      return 4;
        -:  650:    case mine:
    #####:  651:      return 5;
        -:  652:    case remodel:
    #####:  653:      return 4;
        -:  654:
        -:  655:
        -:  656:
        -:  657:    case smithy:
    #####:  658:      return 4;
        -:  659:    
        -:  660:
        -:  661:
        -:  662:
        -:  663:
        -:  664:
        -:  665:    case village:
    #####:  666:      return 3;
        -:  667:    case baron:
    #####:  668:      return 4;
        -:  669:    case great_hall:
    #####:  670:      return 3;
        -:  671:    case minion:
    #####:  672:      return 5;
        -:  673:    case steward:
    #####:  674:      return 3;
        -:  675:    case tribute:
    #####:  676:      return 5;
        -:  677:    case ambassador:
    #####:  678:      return 3;
        -:  679:    case cutpurse:
    #####:  680:      return 4;
        -:  681:    case embargo: 
    #####:  682:      return 2;
        -:  683:    case outpost:
    #####:  684:      return 5;
        -:  685:    case salvager:
    #####:  686:      return 4;
        -:  687:    case sea_hag:
    #####:  688:      return 4;
        -:  689:    case treasure_map:
    #####:  690:      return 4;
        -:  691:    }
        -:  692:  
    #####:  693:  return -1;
    #####:  694:}
        -:  695:
        -:  696:
        -:  697:
        -:  698:
        -:  699:
        -:  700:
        -:  701:// adventurerFunction created (REFACTORING)
        -:  702:// For the function Adventure, we should add a variable, and add a 
        -:  703:// parameter to the function. We should also add a structure, and a 
        -:  704:// pointer to a given variable
        -:  705:
        -:  706:void adventurerFunction(int currentPlayer, int temphand[], int z, struct gameState *state){
        -:  707:
        -:  708:  int cardDrawn;
    #####:  709:  int drawntreasure = 0;
        -:  710:
        -:  711:  // we should have 3 cards revealed from the deck instead of 2 that was originally
        -:  712:  // placed
        -:  713:
        -:  714:    // bug
        -:  715:    
    #####:  716: while(drawntreasure<3){
        -:  717:  
    #####:  718:  if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  719:    shuffle(currentPlayer, state);
    #####:  720:  }
    #####:  721:  drawCard(currentPlayer, state);
        -:  722:  
        -:  723:
        -:  724:
    #####:  725:  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  726:  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  727:    drawntreasure++;
        -:  728:  else{
    #####:  729:    temphand[z]=cardDrawn;
    #####:  730:    state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  731:    z++;
        -:  732:  }
        -:  733:  }
        -:  734:
        -:  735:
        -:  736:    // here we omit the return 0 as it is not required as given previoulsy in the case
    #####:  737:      while(z-1 >=0){
    #####:  738:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  739:      z=z-1;
        -:  740:      }
    #####:  741:    }
        -:  742:
        -:  743:
        -:  744:// FunctionSmithy created (Refactored)
        -:  745:
        -:  746:void smithyFunction(int currentPlayer, int handPos,struct gameState *state){
        -:  747:
        -:  748:   // for loop enforced in function
        -:  749:
        -:  750:    // bug detected
    #####:  751:  for ( int i = 0; i<4;i++)
        -:  752:  {
        -:  753:
    #####:  754:    drawCard(currentPlayer,state);
        -:  755:
    #####:  756:  }
        -:  757:
        -:  758:        //discard card from hand
    #####:  759:        discardCard(handPos, currentPlayer,state,0);
        -:  760:
        -:  761:        // Since void function we dont return 0
    #####:  762:}
        -:  763:
        -:  764:
        -:  765:
        -:  766:// function_council_room created (refactored)
        -:  767:
        -:  768:void council_roomFunction( int currentPlayer, int handPos, struct gameState *state){
        -:  769:
        -:  770:    // bug detected
        -:  771:   
    #####:  772:   for( int i = 0; i<5 ; i++)
        -:  773:    {
        -:  774:
    #####:  775:      drawCard(currentPlayer,state);
    #####:  776:    }
        -:  777:
        -:  778:      //+1 Buy
    #####:  779:    state->numBuys++;
        -:  780:
        -:  781:
        -:  782:      //Each other player draws a card
    #####:  783:      for (int i = 0; i < state->numPlayers; i++)
        -:  784:  {
    #####:  785:    if ( i != currentPlayer )
        -:  786:      {
    #####:  787:        drawCard(i, state);
    #####:  788:      }
    #####:  789:  }
        -:  790:
        -:  791:  // put played card in placed card pile
    #####:  792:  discardCard(handPos,currentPlayer,state, 0);
        -:  793:
    #####:  794:}
        -:  795:
        -:  796:// functionSalvager created(refactored)
        -:  797:
        -:  798:void salvagerFunction(int choice1,int handPos,int currentPlayer,struct gameState *state)
        -:  799:{
        -:  800:  
        -:  801:
        -:  802:  //+1 buy
    #####:  803:      state->numBuys++;
        -:  804:      
    #####:  805:      if (choice1)
        -:  806:  {
        -:  807:    //gain coins equal to trashed card
    #####:  808:    state->coins = state->coins + getCost( handCard(choice1, state) );
        -:  809:   
        -:  810:    //trash card
    #####:  811:    discardCard(choice1, currentPlayer, state, 1);  
    #####:  812:  }
        -:  813:      
        -:  814:      //discard card
    #####:  815:      discardCard(handPos, currentPlayer, state, 0);
        -:  816:    
    #####:  817:}
        -:  818:
        -:  819:
        -:  820:
        -:  821:
        -:  822:// outpostFunction (REFACTORED)
        -:  823:void outpostFunction(int handPos,int currentPlayer, struct gameState *state){
        -:  824:
        -:  825: //bug 
        -:  826:
        -:  827:  //set outpost flag
    #####:  828:      state->outpostPlayed++;
        -:  829:      
        -:  830:      //discard card
    #####:  831:      discardCard(handPos, currentPlayer, state, 0);
        -:  832:  
    #####:  833:}
        -:  834:
        -:  835:
        -:  836:
        -:  837:
        -:  838:
        -:  839:
        -:  840:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  841:{
        -:  842:  int i;
        -:  843:  int j;
        -:  844:  int k;
        -:  845:  int x;
        -:  846:  int index;
    #####:  847:  int currentPlayer = whoseTurn(state);
    #####:  848:  int nextPlayer = currentPlayer + 1;
        -:  849:
    #####:  850:  int tributeRevealedCards[2] = {-1, -1};
        -:  851:  int temphand[MAX_HAND];// moved above the if statement
    #####:  852:  int drawntreasure=0;
        -:  853:  int cardDrawn;
    #####:  854:  int z = 0;// this is the counter for the temp hand
    #####:  855:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  856:    nextPlayer = 0;
    #####:  857:  }
        -:  858:  
        -:  859:  
        -:  860:  //uses switch to select card and perform actions
        -:  861:  
        -:  862:
        -:  863:
        -:  864:
    #####:  865:  switch( card ) 
        -:  866:    {
        -:  867:    
        -:  868:
        -:  869:
        -:  870:/*********************************************************************/
        -:  871:
        -:  872:
        -:  873:
        -:  874:
        -:  875:    case adventurer:
        -:  876:    // CALL THE FUNCTION
    #####:  877:        adventurerFunction(currentPlayer,temphand,z,state);
    #####:  878:        return 0; 
        -:  879:
        -:  880:
        -:  881:/*********************************************************************/
        -:  882:
        -:  883:
        -:  884:
        -:  885:// call the council_room function
        -:  886:
        -:  887:    case council_room:
    #####:  888:          council_roomFunction(currentPlayer,handPos,state);
    #####:  889:          return 0; 
        -:  890:
        -:  891:
        -:  892:
        -:  893:      
        -:  894:   
        -:  895:
        -:  896:
        -:  897:
        -:  898:/*********************************************************************/
        -:  899:
        -:  900:    
        -:  901:      
        -:  902:
        -:  903:
        -:  904:
        -:  905:    case feast:
        -:  906:      //gain card with cost up to 5
        -:  907:      //Backup hand
    #####:  908:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  909:  temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  910:  state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  911:      }
        -:  912:      //Backup hand
        -:  913:
        -:  914:      //Update Coins for Buy
    #####:  915:      updateCoins(currentPlayer, state, 5);
    #####:  916:      x = 1;//Condition to loop on
    #####:  917:      while( x == 1) {//Buy one card
    #####:  918:  if (supplyCount(choice1, state) <= 0){
        -:  919:    if (DEBUG)
        -:  920:      printf("None of that card left, sorry!\n");
        -:  921:
        -:  922:    if (DEBUG){
        -:  923:      printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  924:    }
    #####:  925:  }
    #####:  926:  else if (state->coins < getCost(choice1)){
    #####:  927:    printf("That card is too expensive!\n");
        -:  928:
        -:  929:    if (DEBUG){
        -:  930:      printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  931:    }
    #####:  932:  }
        -:  933:  else{
        -:  934:
        -:  935:    if (DEBUG){
        -:  936:      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  937:    }
        -:  938:
    #####:  939:    gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  940:    x = 0;//No more buying cards
        -:  941:
        -:  942:    if (DEBUG){
        -:  943:      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  944:    }
        -:  945:
        -:  946:  }
        -:  947:      }     
        -:  948:
        -:  949:      //Reset Hand
    #####:  950:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  951:  state->hand[currentPlayer][i] = temphand[i];
    #####:  952:  temphand[i] = -1;
    #####:  953:      }
        -:  954:      //Reset Hand
        -:  955:            
    #####:  956:      return 0;
        -:  957:      
        -:  958:    
        -:  959:/*********************************************************************/
        -:  960:
        -:  961:
        -:  962:
        -:  963:    case gardens:
    #####:  964:      return -1;
        -:  965:      
        -:  966:   
        -:  967:/*********************************************************************/
        -:  968:
        -:  969:
        -:  970:
        -:  971:    case mine:
    #####:  972:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  973:
    #####:  974:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  975:  {
    #####:  976:    return -1;
        -:  977:  }
        -:  978:    
    #####:  979:      if (choice2 > treasure_map || choice2 < curse)
        -:  980:  {
    #####:  981:    return -1;
        -:  982:  }
        -:  983:
    #####:  984:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  985:  {
    #####:  986:    return -1;
        -:  987:  }
        -:  988:
    #####:  989:      gainCard(choice2, state, 2, currentPlayer);
        -:  990:
        -:  991:      //discard card from hand
    #####:  992:      discardCard(handPos, currentPlayer, state, 0);
        -:  993:
        -:  994:      //discard trashed card
    #####:  995:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  996:  {
    #####:  997:    if (state->hand[currentPlayer][i] == j)
        -:  998:      {
    #####:  999:        discardCard(i, currentPlayer, state, 0);      
    #####: 1000:        break;
        -: 1001:      }
    #####: 1002:  }
        -: 1003:      
    #####: 1004:      return 0;
        -: 1005:      
        -: 1006:    /*********************************************************************/
        -: 1007:
        -: 1008:
        -: 1009:
        -: 1010:
        -: 1011:    case remodel:
    #####: 1012:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1013:
    #####: 1014:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -: 1015:  {
    #####: 1016:    return -1;
        -: 1017:  }
        -: 1018:
    #####: 1019:      gainCard(choice2, state, 0, currentPlayer);
        -: 1020:
        -: 1021:      //discard card from hand
    #####: 1022:      discardCard(handPos, currentPlayer, state, 0);
        -: 1023:
        -: 1024:      //discard trashed card
    #####: 1025:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1026:  {
    #####: 1027:    if (state->hand[currentPlayer][i] == j)
        -: 1028:      {
    #####: 1029:        discardCard(i, currentPlayer, state, 0);      
    #####: 1030:        break;
        -: 1031:      }
    #####: 1032:  }
        -: 1033:
        -: 1034:
    #####: 1035:      return 0;
        -: 1036:    
        -: 1037:    
        -: 1038:
        -: 1039:
        -: 1040:
        -: 1041:
        -: 1042:
        -: 1043:/*********************************************************************/
        -: 1044:
        -: 1045:   
        -: 1046:    
        -: 1047:
        -: 1048:
        -: 1049:      case smithy:
    #####: 1050:        smithyFunction(currentPlayer,handPos,state);
    #####: 1051:        return 0 ; 
        -: 1052:
        -: 1053:
        -: 1054:/*********************************************************************/
        -: 1055:
        -: 1056:
        -: 1057:
        -: 1058:
        -: 1059:    case village:
        -: 1060:      //+1 Card
    #####: 1061:      drawCard(currentPlayer, state);
        -: 1062:      
        -: 1063:      //+2 Actions
    #####: 1064:      state->numActions = state->numActions + 2;
        -: 1065:      
        -: 1066:      //discard played card from hand
    #####: 1067:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1068:      return 0;
        -: 1069:    
        -: 1070:
        -: 1071:
        -: 1072:/*********************************************************************/
        -: 1073:
        -: 1074:
        -: 1075:
        -: 1076:
        -: 1077:
        -: 1078:    case baron:
    #####: 1079:      state->numBuys++;//Increase buys by 1!
    #####: 1080:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####: 1081:  int p = 0;//Iterator for hand!
    #####: 1082:  int card_not_discarded = 1;//Flag for discard set!
    #####: 1083:  while(card_not_discarded){
    #####: 1084:    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####: 1085:      state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1086:      state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1087:      state->discardCount[currentPlayer]++;
    #####: 1088:      for (;p < state->handCount[currentPlayer]; p++){
    #####: 1089:        state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####: 1090:      }
    #####: 1091:      state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1092:      state->handCount[currentPlayer]--;
    #####: 1093:      card_not_discarded = 0;//Exit the loop
    #####: 1094:    }
    #####: 1095:    else if (p > state->handCount[currentPlayer]){
        -: 1096:      if(DEBUG) {
        -: 1097:        printf("No estate cards in your hand, invalid choice\n");
        -: 1098:        printf("Must gain an estate if there are any\n");
        -: 1099:      }
    #####: 1100:      if (supplyCount(estate, state) > 0){
    #####: 1101:        gainCard(estate, state, 0, currentPlayer);
    #####: 1102:        state->supplyCount[estate]--;//Decrement estates
    #####: 1103:        if (supplyCount(estate, state) == 0){
    #####: 1104:    isGameOver(state);
    #####: 1105:        }
    #####: 1106:      }
    #####: 1107:      card_not_discarded = 0;//Exit the loop
    #####: 1108:    }
        -: 1109:          
        -: 1110:    else{
    #####: 1111:      p++;//Next card
        -: 1112:    }
        -: 1113:  }
    #####: 1114:      }
        -: 1115:          
        -: 1116:      else{
    #####: 1117:  if (supplyCount(estate, state) > 0){
    #####: 1118:    gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1119:    state->supplyCount[estate]--;//Decrement Estates
    #####: 1120:    if (supplyCount(estate, state) == 0){
    #####: 1121:      isGameOver(state);
    #####: 1122:    }
    #####: 1123:  }
        -: 1124:      }
        -: 1125:      
        -: 1126:      
    #####: 1127:      return 0;
        -: 1128:    
        -: 1129:    
        -: 1130:
        -: 1131:/*********************************************************************/
        -: 1132:
        -: 1133:
        -: 1134:
        -: 1135:
        -: 1136:    case great_hall:
        -: 1137:      //+1 Card
    #####: 1138:      drawCard(currentPlayer, state);
        -: 1139:      
        -: 1140:      //+1 Actions
    #####: 1141:      state->numActions++;
        -: 1142:      
        -: 1143:      //discard card from hand
    #####: 1144:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1145:      return 0;
        -: 1146:    
        -: 1147:    
        -: 1148:
        -: 1149:
        -: 1150:/*********************************************************************/
        -: 1151:
        -: 1152:
        -: 1153:
        -: 1154:
        -: 1155:    case minion:
        -: 1156:      //+1 action
    #####: 1157:      state->numActions++;
        -: 1158:      
        -: 1159:      //discard card from hand
    #####: 1160:      discardCard(handPos, currentPlayer, state, 0);
        -: 1161:      
    #####: 1162:      if (choice1)    //+2 coins
        -: 1163:  {
    #####: 1164:    state->coins = state->coins + 2;
    #####: 1165:  }
        -: 1166:      
    #####: 1167:      else if (choice2)   //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1168:  {
        -: 1169:    //discard hand
    #####: 1170:    while(numHandCards(state) > 0)
        -: 1171:      {
    #####: 1172:        discardCard(handPos, currentPlayer, state, 0);
        -: 1173:      }
        -: 1174:        
        -: 1175:    //draw 4
    #####: 1176:    for (i = 0; i < 4; i++)
        -: 1177:      {
    #####: 1178:        drawCard(currentPlayer, state);
    #####: 1179:      }
        -: 1180:        
        -: 1181:    //other players discard hand and redraw if hand size > 4
    #####: 1182:    for (i = 0; i < state->numPlayers; i++)
        -: 1183:      {
    #####: 1184:        if (i != currentPlayer)
        -: 1185:    {
    #####: 1186:      if ( state->handCount[i] > 4 )
        -: 1187:        {
        -: 1188:          //discard hand
    #####: 1189:          while( state->handCount[i] > 0 )
        -: 1190:      {
    #####: 1191:        discardCard(handPos, i, state, 0);
        -: 1192:      }
        -: 1193:              
        -: 1194:          //draw 4
    #####: 1195:          for (j = 0; j < 4; j++)
        -: 1196:      {
    #####: 1197:        drawCard(i, state);
    #####: 1198:      }
    #####: 1199:        }
    #####: 1200:    }
    #####: 1201:      }
        -: 1202:        
    #####: 1203:  }
    #####: 1204:      return 0;
        -: 1205:    
        -: 1206:   
        -: 1207:
        -: 1208:
        -: 1209:
        -: 1210:
        -: 1211:/*********************************************************************/
        -: 1212:
        -: 1213:
        -: 1214:
        -: 1215:
        -: 1216:    case steward:
    #####: 1217:      if (choice1 == 1)
        -: 1218:  {
        -: 1219:    //+2 cards
    #####: 1220:    drawCard(currentPlayer, state);
    #####: 1221:    drawCard(currentPlayer, state);
    #####: 1222:  }
    #####: 1223:      else if (choice1 == 2)
        -: 1224:  {
        -: 1225:    //+2 coins
    #####: 1226:    state->coins = state->coins + 2;
    #####: 1227:  }
        -: 1228:      else
        -: 1229:  {
        -: 1230:    //trash 2 cards in hand
    #####: 1231:    discardCard(choice2, currentPlayer, state, 1);
    #####: 1232:    discardCard(choice3, currentPlayer, state, 1);
        -: 1233:  }
        -: 1234:      
        -: 1235:      //discard card from hand
    #####: 1236:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1237:      return 0;
        -: 1238:    
        -: 1239:    
        -: 1240:
        -: 1241:
        -: 1242:
        -: 1243:/**********************************************************************/
        -: 1244:
        -: 1245:
        -: 1246:
        -: 1247:
        -: 1248:
        -: 1249:
        -: 1250:
        -: 1251:
        -: 1252:    case tribute:
    #####: 1253:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1254:  if (state->deckCount[nextPlayer] > 0){
    #####: 1255:    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1256:    state->deckCount[nextPlayer]--;
    #####: 1257:  }
    #####: 1258:  else if (state->discardCount[nextPlayer] > 0){
    #####: 1259:    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1260:    state->discardCount[nextPlayer]--;
    #####: 1261:  }
        -: 1262:  else{
        -: 1263:    //No Card to Reveal
        -: 1264:    if (DEBUG){
        -: 1265:      printf("No cards to reveal\n");
        -: 1266:    }
        -: 1267:  }
    #####: 1268:      }
        -: 1269:      
        -: 1270:      else{
    #####: 1271:  if (state->deckCount[nextPlayer] == 0){
    #####: 1272:    for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1273:      state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1274:      state->deckCount[nextPlayer]++;
    #####: 1275:      state->discard[nextPlayer][i] = -1;
    #####: 1276:      state->discardCount[nextPlayer]--;
    #####: 1277:    }
        -: 1278:          
    #####: 1279:    shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1280:  } 
    #####: 1281:  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1282:  state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1283:  state->deckCount[nextPlayer]--;
    #####: 1284:  tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1285:  state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1286:  state->deckCount[nextPlayer]--;
        -: 1287:      }    
        -: 1288:           
    #####: 1289:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1290:  state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1291:  state->playedCardCount++;
    #####: 1292:  tributeRevealedCards[1] = -1;
    #####: 1293:      }
        -: 1294:
    #####: 1295:      for (i = 0; i <= 2; i ++){
    #####: 1296:  if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1297:    state->coins += 2;
    #####: 1298:  }
        -: 1299:        
    #####: 1300:  else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1301:    drawCard(currentPlayer, state);
    #####: 1302:    drawCard(currentPlayer, state);
    #####: 1303:  }
        -: 1304:  else{//Action Card
    #####: 1305:    state->numActions = state->numActions + 2;
        -: 1306:  }
    #####: 1307:      }
        -: 1308:      
    #####: 1309:      return 0;
        -: 1310:    
        -: 1311:   
        -: 1312:
        -: 1313:/*********************************************************************/
        -: 1314:
        -: 1315:
        -: 1316:
        -: 1317:
        -: 1318:
        -: 1319:    case ambassador:
    #####: 1320:      j = 0;    //used to check if player has enough cards to discard
        -: 1321:
    #####: 1322:      if (choice2 > 2 || choice2 < 0)
        -: 1323:  {
    #####: 1324:    return -1;        
        -: 1325:  }
        -: 1326:
    #####: 1327:      if (choice1 == handPos)
        -: 1328:  {
    #####: 1329:    return -1;
        -: 1330:  }
        -: 1331:
    #####: 1332:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1333:  {
    #####: 1334:    if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1335:      {
    #####: 1336:        j++;
    #####: 1337:      }
    #####: 1338:  }
    #####: 1339:      if (j < choice2)
        -: 1340:  {
    #####: 1341:    return -1;        
        -: 1342:  }
        -: 1343:
        -: 1344:      if (DEBUG) 
        -: 1345:  printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1346:
        -: 1347:      //increase supply count for choosen card by amount being discarded
    #####: 1348:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1349:      
        -: 1350:      //each other player gains a copy of revealed card
    #####: 1351:      for (i = 0; i < state->numPlayers; i++)
        -: 1352:  {
    #####: 1353:    if (i != currentPlayer)
        -: 1354:      {
    #####: 1355:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1356:      }
    #####: 1357:  }
        -: 1358:
        -: 1359:      //discard played card from hand
    #####: 1360:      discardCard(handPos, currentPlayer, state, 0);      
        -: 1361:
        -: 1362:      //trash copies of cards returned to supply
    #####: 1363:      for (j = 0; j < choice2; j++)
        -: 1364:  {
    #####: 1365:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1366:      {
    #####: 1367:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1368:    {
    #####: 1369:      discardCard(i, currentPlayer, state, 1);
    #####: 1370:      break;
        -: 1371:    }
    #####: 1372:      }
    #####: 1373:  }     
        -: 1374:
    #####: 1375:      return 0;
        -: 1376:    
        -: 1377:   
        -: 1378:
        -: 1379:/********************************/
        -: 1380:
        -: 1381:
        -: 1382:
        -: 1383:
        -: 1384:
        -: 1385:
        -: 1386:    case cutpurse:
        -: 1387:
    #####: 1388:      updateCoins(currentPlayer, state, 2);
    #####: 1389:      for (i = 0; i < state->numPlayers; i++)
        -: 1390:  {
    #####: 1391:    if (i != currentPlayer)
        -: 1392:      {
    #####: 1393:        for (j = 0; j < state->handCount[i]; j++)
        -: 1394:    {
    #####: 1395:      if (state->hand[i][j] == copper)
        -: 1396:        {
    #####: 1397:          discardCard(j, i, state, 0);
    #####: 1398:          break;
        -: 1399:        }
    #####: 1400:      if (j == state->handCount[i])
        -: 1401:        {
    #####: 1402:          for (k = 0; k < state->handCount[i]; k++)
        -: 1403:      {
        -: 1404:        if (DEBUG)
        -: 1405:          printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1406:      } 
    #####: 1407:          break;
        -: 1408:        }   
    #####: 1409:    }
        -: 1410:          
    #####: 1411:      }
        -: 1412:        
    #####: 1413:  }       
        -: 1414:
        -: 1415:      //discard played card from hand
    #####: 1416:      discardCard(handPos, currentPlayer, state, 0);      
        -: 1417:
    #####: 1418:      return 0;
        -: 1419:
        -: 1420:    
        -: 1421:    
        -: 1422:
        -: 1423:
        -: 1424:/********************************/
        -: 1425:
        -: 1426:
        -: 1427:
        -: 1428:
        -: 1429:
        -: 1430:
        -: 1431:
        -: 1432:
        -: 1433:
        -: 1434:    case embargo: 
        -: 1435:      //+2 Coins
    #####: 1436:      state->coins = state->coins + 2;
        -: 1437:      
        -: 1438:      //see if selected pile is in play
    #####: 1439:      if ( state->supplyCount[choice1] == -1 )
        -: 1440:  {
    #####: 1441:    return -1;
        -: 1442:  }
        -: 1443:      
        -: 1444:
    #####: 1445:       state->embargoTokens[choice1]++;
        -: 1446:      
        -: 1447:      //trash card
    #####: 1448:      discardCard(handPos, currentPlayer, state, 1);    
    #####: 1449:      return 0;
        -: 1450:    
        -: 1451:
        -: 1452:/********************************/
        -: 1453:
        -: 1454:
        -: 1455:   
        -: 1456:
        -: 1457:      
        -: 1458:
        -: 1459:
        -: 1460:
        -: 1461:      // call outpost function 
        -: 1462:      case outpost:
    #####: 1463:      outpostFunction(currentPlayer,handPos,state);
    #####: 1464:      return 0;
        -: 1465:
        -: 1466:
        -: 1467:
        -: 1468:/********************************/
        -: 1469:
        -: 1470:
        -: 1471:
        -: 1472:
        -: 1473:      // call salvegerFunction
        -: 1474:      case salvager:
    #####: 1475:      salvagerFunction(currentPlayer,handPos,choice1,state);
    #####: 1476:      return 0 ;
        -: 1477:
        -: 1478:
        -: 1479:
        -: 1480:
        -: 1481:
        -: 1482:  /********************************/
        -: 1483:
        -: 1484:
        -: 1485:
        -: 1486:
        -: 1487:    
        -: 1488:
        -: 1489:
        -: 1490:
        -: 1491:
        -: 1492:
        -: 1493:    case sea_hag:
    #####: 1494:      for (i = 0; i < state->numPlayers; i++){
    #####: 1495:  if (i != currentPlayer){
    #####: 1496:    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];          state->deckCount[i]--;
    #####: 1497:    state->discardCount[i]++;
    #####: 1498:    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1499:  }
    #####: 1500:      }
    #####: 1501:      return 0;
        -: 1502:    
        -: 1503:   
        -: 1504:
        -: 1505:
        -: 1506:/********************************/
        -: 1507:
        -: 1508:
        -: 1509:
        -: 1510:
        -: 1511:    case treasure_map:
        -: 1512:      //search hand for another treasure_map
    #####: 1513:      index = -1;
    #####: 1514:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1515:  {
    #####: 1516:    if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1517:      {
    #####: 1518:        index = i;
    #####: 1519:        break;
        -: 1520:      }
    #####: 1521:  }
    #####: 1522:      if (index > -1)
        -: 1523:  {
        -: 1524:    //trash both treasure cards
    #####: 1525:    discardCard(handPos, currentPlayer, state, 1);
    #####: 1526:    discardCard(index, currentPlayer, state, 1);
        -: 1527:
        -: 1528:    //gain 4 Gold cards
    #####: 1529:    for (i = 0; i < 4; i++)
        -: 1530:      {
    #####: 1531:        gainCard(gold, state, 1, currentPlayer);
    #####: 1532:      }
        -: 1533:        
        -: 1534:    //return success
    #####: 1535:    return 1;
        -: 1536:  }
        -: 1537:      
        -: 1538:      //no second treasure_map found in hand
    #####: 1539:      return -1;
        -: 1540:    }
        -: 1541:  
    #####: 1542:  return -1;
    #####: 1543:}
        -: 1544:
        -: 1545:/********************************/
        -: 1546:
        -: 1547:
        -: 1548:
        -: 1549:
        -: 1550:
        -: 1551:
        -: 1552:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1553:{
        -: 1554:  
        -: 1555:  //if card is not trashed, added to Played pile 
    #####: 1556:  if (trashFlag < 1)
        -: 1557:    {
        -: 1558:      //add card to played pile
    #####: 1559:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1560:      state->playedCardCount++;
    #####: 1561:    }
        -: 1562:  
        -: 1563:  //set played card to -1
    #####: 1564:  state->hand[currentPlayer][handPos] = -1;
        -: 1565:  
        -: 1566:  //remove card from player's hand
    #####: 1567:  if ( handPos == (state->handCount[currentPlayer] - 1) )   //last card in hand array is played
        -: 1568:    {
        -: 1569:      //reduce number of cards in hand
    #####: 1570:      state->handCount[currentPlayer]--;
    #####: 1571:    }
    #####: 1572:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1573:    {
        -: 1574:      //reduce number of cards in hand
    #####: 1575:      state->handCount[currentPlayer]--;
    #####: 1576:    }
        -: 1577:  else  
        -: 1578:    {
        -: 1579:      //replace discarded card with last card in hand
    #####: 1580:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1581:      //set last card to -1
    #####: 1582:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1583:      //reduce number of cards in hand
    #####: 1584:      state->handCount[currentPlayer]--;
        -: 1585:    }
        -: 1586:  
    #####: 1587:  return 0;
        -: 1588:}
        -: 1589:
        -: 1590:
        -: 1591:
        -: 1592:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1593:{
        -: 1594:  //Note: supplyPos is enum of choosen card
        -: 1595:  
        -: 1596:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1597:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1598:    {
    #####: 1599:      return -1;
        -: 1600:    }
        -: 1601:  
        -: 1602:  //added card for [whoseTurn] current player:
        -: 1603:  // toFlag = 0 : add to discard
        -: 1604:  // toFlag = 1 : add to deck
        -: 1605:  // toFlag = 2 : add to hand
        -: 1606:
    #####: 1607:  if (toFlag == 1)
        -: 1608:    {
    #####: 1609:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1610:      state->deckCount[player]++;
    #####: 1611:    }
    #####: 1612:  else if (toFlag == 2)
        -: 1613:    {
    #####: 1614:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1615:      state->handCount[player]++;
    #####: 1616:    }
        -: 1617:  else
        -: 1618:    {
    #####: 1619:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1620:      state->discardCount[player]++;
        -: 1621:    }
        -: 1622:  
        -: 1623:  //decrease number in supply pile
    #####: 1624:  state->supplyCount[supplyPos]--;
        -: 1625:   
    #####: 1626:  return 0;
    #####: 1627:}
        -: 1628:
        -: 1629:
        -: 1630:
        -: 1631:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1632:{
        -: 1633:  int i;
        -: 1634:  
        -: 1635:  //reset coin count
      442: 1636:  state->coins = 0;
        -: 1637:
        -: 1638:  //add coins for each Treasure card in player's hand
     3984: 1639:  for (i = 0; i < state->handCount[player]; i++)
        -: 1640:    {
     1550: 1641:      if (state->hand[player][i] == copper)
        -: 1642:  {
      778: 1643:    state->coins += 1;
      778: 1644:  }
      772: 1645:      else if (state->hand[player][i] == silver)
        -: 1646:  {
      330: 1647:    state->coins += 2;
      330: 1648:  }
      442: 1649:      else if (state->hand[player][i] == gold)
        -: 1650:  {
      330: 1651:    state->coins += 3;
      330: 1652:  } 
     1550: 1653:    } 
        -: 1654:
        -: 1655:  //add bonus
      442: 1656:  state->coins += bonus;
        -: 1657:
      442: 1658:  return 0;
        -: 1659:}
        -: 1660:
        -: 1661:
        -: 1662://end of dominion.c
        -: 1663:
unittest4.c:
TESTING gainCard():

Gold pile empty
Test: PASSED

 Card has been added to deck
Test: PASSED

Adding card to hand
Test: PASSED

Adding card to discard pile
Test: PASSED

 Decreasing gold supply from hand
Test: PASSED

Test: Test passed

File 'unittest4.c'
Lines executed:86.49% of 37
unittest4.c:creating 'unittest4.c.gcov'

File 'dominion.c'
Lines executed:21.38% of 650
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include "rngs.h"
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:
        -:   10:
        -:   11:int compare(const void* a, const void* b) {
     3192:   12:  if (*(int*)a > *(int*)b)
    #####:   13:    return 1;
     3192:   14:  if (*(int*)a < *(int*)b)
     1140:   15:    return -1;
     2052:   16:  return 0;
     3192:   17:}
        -:   18:
        -:   19:
        -:   20:
        -:   21:struct gameState* newGame() {
    #####:   22:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   23:  return g;
        -:   24:}
        -:   25:
        -:   26:
        -:   27:
        -:   28:
        -:   29:
        -:   30:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   31:      int k8, int k9, int k10) {
    #####:   32:  int* k = malloc(10 * sizeof(int));
    #####:   33:  k[0] = k1;
    #####:   34:  k[1] = k2;
    #####:   35:  k[2] = k3;
    #####:   36:  k[3] = k4;
    #####:   37:  k[4] = k5;
    #####:   38:  k[5] = k6;
    #####:   39:  k[6] = k7;
    #####:   40:  k[7] = k8;
    #####:   41:  k[8] = k9;
    #####:   42:  k[9] = k10;
    #####:   43:  return k;
        -:   44:}
        -:   45:
        -:   46:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   47:       struct gameState *state) {
        -:   48:
        -:   49:  int i;
        -:   50:  int j;
        -:   51:  int it;     
        -:   52:  //set up random number generator
      113:   53:  SelectStream(1);
      113:   54:  PutSeed((long)randomSeed);
        -:   55:  
        -:   56:  //check number of players
      226:   57:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   58:    {
    #####:   59:      return -1;
        -:   60:    }
        -:   61:
        -:   62:  //set number of players
      113:   63:  state->numPlayers = numPlayers;
        -:   64:
        -:   65:  //check selected kingdom cards are different
     2486:   66:  for (i = 0; i < 10; i++)
        -:   67:    {
    24860:   68:      for (j = 0; j < 10; j++)
        -:   69:        {
    21470:   70:    if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   71:      {
    #####:   72:        return -1;
        -:   73:      }
    11300:   74:        }
     1130:   75:    }
        -:   76:
        -:   77:
        -:   78:  //initialize supply
        -:   79:  ///////////////////////////////
        -:   80:
        -:   81:  //set number of Curse cards
      113:   82:  if (numPlayers == 2)
        -:   83:    {
      113:   84:      state->supplyCount[curse] = 10;
      113:   85:    }
    #####:   86:  else if (numPlayers == 3)
        -:   87:    {
    #####:   88:      state->supplyCount[curse] = 20;
    #####:   89:    }
        -:   90:  else
        -:   91:    {
    #####:   92:      state->supplyCount[curse] = 30;
        -:   93:    }
        -:   94:
        -:   95:  //set number of Victory cards
      113:   96:  if (numPlayers == 2)
        -:   97:    {
      113:   98:      state->supplyCount[estate] = 8;
      113:   99:      state->supplyCount[duchy] = 8;
      113:  100:      state->supplyCount[province] = 8;
      113:  101:    }
        -:  102:  else
        -:  103:    {
    #####:  104:      state->supplyCount[estate] = 12;
    #####:  105:      state->supplyCount[duchy] = 12;
    #####:  106:      state->supplyCount[province] = 12;
        -:  107:    }
        -:  108:
        -:  109:  //set number of Treasure cards
      113:  110:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      113:  111:  state->supplyCount[silver] = 40;
      113:  112:  state->supplyCount[gold] = 30;
        -:  113:
        -:  114:  //set number of Kingdom cards
     4746:  115:  for (i = adventurer; i <= treasure_map; i++)        //loop all cards
        -:  116:    {
    37290:  117:      for (j = 0; j < 10; j++)              //loop chosen cards
        -:  118:  {
    17515:  119:    if (kingdomCards[j] == i)
        -:  120:      {
        -:  121:        //check if card is a 'Victory' Kingdom card
     2147:  122:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  123:    {
      226:  124:      if (numPlayers == 2){ 
      226:  125:        state->supplyCount[i] = 8; 
      226:  126:      }
    #####:  127:      else{ state->supplyCount[i] = 12; }
      226:  128:    }
        -:  129:        else
        -:  130:    {
      904:  131:      state->supplyCount[i] = 10;
        -:  132:    }
     1130:  133:        break;
        -:  134:      }
        -:  135:    else    //card is not in the set choosen for the game
        -:  136:      {
    16385:  137:        state->supplyCount[i] = -1;
        -:  138:      }
    16385:  139:  }
        -:  140:
     2260:  141:    }
        -:  142:
        -:  143:  ////////////////////////
        -:  144:  //supply intilization complete
        -:  145:
        -:  146:  //set player decks
      678:  147:  for (i = 0; i < numPlayers; i++)
        -:  148:    {
      226:  149:      state->deckCount[i] = 0;
     1808:  150:      for (j = 0; j < 3; j++)
        -:  151:  {
      678:  152:    state->deck[i][j] = estate;
      678:  153:    state->deckCount[i]++;
      678:  154:  }
     3616:  155:      for (j = 3; j < 10; j++)
        -:  156:  {
     1582:  157:    state->deck[i][j] = copper;
     1582:  158:    state->deckCount[i]++;    
     1582:  159:  }
      226:  160:    }
        -:  161:
        -:  162:  //shuffle player decks
      678:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
      226:  165:      if ( shuffle(i, state) < 0 )
        -:  166:  {
    #####:  167:    return -1;
        -:  168:  }
      226:  169:    }
        -:  170:
        -:  171:  //draw player hands
      678:  172:  for (i = 0; i < numPlayers; i++)
        -:  173:    {  
        -:  174:      //initialize hand size to zero
      226:  175:      state->handCount[i] = 0;
      226:  176:      state->discardCount[i] = 0;
        -:  177:      //draw 5 cards
        -:  178:      // for (j = 0; j < 5; j++)
        -:  179:      //  {
        -:  180:      //    drawCard(i, state);
        -:  181:      //  }
      226:  182:    }
        -:  183:  
        -:  184:  //set embargo tokens to 0 for all supply piles
     6328:  185:  for (i = 0; i <= treasure_map; i++)
        -:  186:    {
     3051:  187:      state->embargoTokens[i] = 0;
     3051:  188:    }
        -:  189:
        -:  190:  //initialize first player's turn
      113:  191:  state->outpostPlayed = 0;
      113:  192:  state->phase = 0;
      113:  193:  state->numActions = 1;
      113:  194:  state->numBuys = 1;
      113:  195:  state->playedCardCount = 0;
      113:  196:  state->whoseTurn = 0;
      113:  197:  state->handCount[state->whoseTurn] = 0;
        -:  198:  //int it; move to top
        -:  199:
        -:  200:  //Moved draw cards to here, only drawing at the start of a turn
     1356:  201:  for (it = 0; it < 5; it++){
      565:  202:    drawCard(state->whoseTurn, state);
      565:  203:  }
        -:  204:
      113:  205:  updateCoins(state->whoseTurn, state, 0);
        -:  206:
      113:  207:  return 0;
      113:  208:}
        -:  209:
        -:  210:int shuffle(int player, struct gameState *state) {
        -:  211: 
        -:  212:
        -:  213:  int newDeck[MAX_DECK];
      229:  214:  int newDeckPos = 0;
        -:  215:  int card;
        -:  216:  int i;
        -:  217:
      229:  218:  if (state->deckCount[player] < 1)
        1:  219:    return -1;
      228:  220:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  221:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  222:
     5016:  223:  while (state->deckCount[player] > 0) {
     2280:  224:    card = floor(Random() * state->deckCount[player]);
     2280:  225:    newDeck[newDeckPos] = state->deck[player][card];
     2280:  226:    newDeckPos++;
    15982:  227:    for (i = card; i < state->deckCount[player]-1; i++) {
     5711:  228:      state->deck[player][i] = state->deck[player][i+1];
     5711:  229:    }
     2280:  230:    state->deckCount[player]--;
        -:  231:  }
     5016:  232:  for (i = 0; i < newDeckPos; i++) {
     2280:  233:    state->deck[player][i] = newDeck[i];
     2280:  234:    state->deckCount[player]++;
     2280:  235:  }
        -:  236:
      228:  237:  return 0;
      229:  238:}
        -:  239:
        -:  240:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  241:{ 
        -:  242:  int card;
    #####:  243:  int coin_bonus = 0;     //tracks coins gain from actions
        -:  244:
        -:  245:  //check if it is the right phase
    #####:  246:  if (state->phase != 0)
        -:  247:    {
    #####:  248:      return -1;
        -:  249:    }
        -:  250:  
        -:  251:  //check if player has enough actions
    #####:  252:  if ( state->numActions < 1 )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:  
        -:  257:  //get card played
    #####:  258:  card = handCard(handPos, state);
        -:  259:  
        -:  260:  //check if selected card is an action
    #####:  261:  if ( card < adventurer || card > treasure_map )
        -:  262:    {
    #####:  263:      return -1;
        -:  264:    }
        -:  265:  
        -:  266:  //play card
    #####:  267:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  268:    {
    #####:  269:      return -1;
        -:  270:    }
        -:  271:  
        -:  272:  //reduce number of actions
    #####:  273:  state->numActions--;
        -:  274:
        -:  275:  //update coins (Treasure cards may be added with card draws)
    #####:  276:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  277:  
    #####:  278:  return 0;
    #####:  279:}
        -:  280:
        -:  281:int buyCard(int supplyPos, struct gameState *state) {
        -:  282:  int who;
        -:  283:  if (DEBUG){
        -:  284:    printf("Entering buyCard...\n");
        -:  285:  }
        -:  286:
        -:  287:  // I don't know what to do about the phase thing.
        -:  288:
    #####:  289:  who = state->whoseTurn;
        -:  290:
    #####:  291:  if (state->numBuys < 1){
        -:  292:    if (DEBUG)
        -:  293:      printf("You do not have any buys left\n");
    #####:  294:    return -1;
    #####:  295:  } else if (supplyCount(supplyPos, state) <1){
        -:  296:    if (DEBUG)
        -:  297:      printf("There are not any of that type of card left\n");
    #####:  298:    return -1;
    #####:  299:  } else if (state->coins < getCost(supplyPos)){
        -:  300:    if (DEBUG) 
        -:  301:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  302:    return -1;
        -:  303:  } else {
    #####:  304:    state->phase=1;
        -:  305:    //state->supplyCount[supplyPos]--;
    #####:  306:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  307:  
    #####:  308:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  309:    state->numBuys--;
        -:  310:    if (DEBUG)
        -:  311:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  312:  }
        -:  313:
        -:  314:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  315:  //state->discardCount[who]++;
        -:  316:    
    #####:  317:  return 0;
    #####:  318:}
        -:  319:
        -:  320:
        -:  321:
        -:  322:int numHandCards(struct gameState *state) {
    #####:  323:  return state->handCount[ whoseTurn(state) ];
        -:  324:}
        -:  325:
        -:  326:int handCard(int handPos, struct gameState *state) {
    #####:  327:  int currentPlayer = whoseTurn(state);
    #####:  328:  return state->hand[currentPlayer][handPos];
        -:  329:}
        -:  330:
        -:  331:int supplyCount(int card, struct gameState *state) {
        5:  332:  return state->supplyCount[card];
        -:  333:}
        -:  334:
        -:  335:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  336:  int i;
    #####:  337:  int count = 0;
        -:  338:
    #####:  339:  for (i = 0; i < state->deckCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->deck[player][i] == card) count++;
    #####:  342:    }
        -:  343:
    #####:  344:  for (i = 0; i < state->handCount[player]; i++)
        -:  345:    {
    #####:  346:      if (state->hand[player][i] == card) count++;
    #####:  347:    }
        -:  348:
    #####:  349:  for (i = 0; i < state->discardCount[player]; i++)
        -:  350:    {
    #####:  351:      if (state->discard[player][i] == card) count++;
    #####:  352:    }
        -:  353:
    #####:  354:  return count;
        -:  355:}
        -:  356:
        -:  357:int whoseTurn(struct gameState *state) {
    #####:  358:  return state->whoseTurn;
        -:  359:}
        -:  360:
        -:  361:
        -:  362:int endTurn(struct gameState *state) {
        -:  363:  int k;
        -:  364:  int i;
    #####:  365:  int currentPlayer = whoseTurn(state);
        -:  366:  
        -:  367:  //Discard hand
    #####:  368:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  369:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  370:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  371:  }
    #####:  372:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  373:    
        -:  374:  //Code for determining the player
    #####:  375:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  376:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  377:  }
        -:  378:  else{
    #####:  379:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  380:  }
        -:  381:
    #####:  382:  state->outpostPlayed = 0;
    #####:  383:  state->phase = 0;
    #####:  384:  state->numActions = 1;
    #####:  385:  state->coins = 0;
    #####:  386:  state->numBuys = 1;
    #####:  387:  state->playedCardCount = 0;
    #####:  388:  state->handCount[state->whoseTurn] = 0;
        -:  389:
        -:  390:  //int k; move to top
        -:  391:  //Next player draws hand
    #####:  392:  for (k = 0; k < 5; k++){
    #####:  393:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  394:  }
        -:  395:
        -:  396:  //Update money
    #####:  397:  updateCoins(state->whoseTurn, state , 0);
        -:  398:
    #####:  399:  return 0;
        -:  400:}
        -:  401:
        -:  402:
        -:  403:
        -:  404:
        -:  405:
        -:  406:int isGameOver(struct gameState *state) {
        -:  407:  int i;
        -:  408:  int j;
        -:  409:  
        -:  410:  //if stack of Province cards is empty, the game ends
        2:  411:  if (state->supplyCount[province] == 0)
        -:  412:    {
    #####:  413:      return 1;
        -:  414:    }
        -:  415:
        -:  416:  //if three supply pile are at 0, the game ends
        2:  417:  j = 0;
      104:  418:  for (i = 0; i < 25; i++)
        -:  419:    {
       50:  420:      if (state->supplyCount[i] == 0)
        -:  421:  {
        3:  422:    j++;
        3:  423:  }
       50:  424:    }
        2:  425:  if ( j >= 3)
        -:  426:    {
        1:  427:      return 1;
        -:  428:    }
        -:  429:
        1:  430:  return 0;
        2:  431:}
        -:  432:
        -:  433:int scoreFor (int player, struct gameState *state) {
        -:  434:
        -:  435:  int i;
    #####:  436:  int score = 0;
        -:  437:  //score from hand
    #####:  438:  for (i = 0; i < state->handCount[player]; i++)
        -:  439:    {
    #####:  440:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  441:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  442:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  443:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  444:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  445:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  446:    }
        -:  447:
        -:  448:  //score from discard
    #####:  449:  for (i = 0; i < state->discardCount[player]; i++)
        -:  450:    {
    #####:  451:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  452:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  453:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  454:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  455:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  456:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  457:    }
        -:  458:
        -:  459:  //score from deck
    #####:  460:  for (i = 0; i < state->discardCount[player]; i++)
        -:  461:    {
    #####:  462:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  463:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  464:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  465:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  466:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  467:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  468:    }
        -:  469:
    #####:  470:  return score;
        -:  471:}
        -:  472:
        -:  473:
        -:  474:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  475:  int i;  
        -:  476:  int j;
        -:  477:  int highScore;
        -:  478:  int currentPlayer;
        -:  479:
        -:  480:  //get score for each player
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  482:    {
        -:  483:      //set unused player scores to -9999
    #####:  484:      if (i >= state->numPlayers)
        -:  485:  {
    #####:  486:    players[i] = -9999;
    #####:  487:  }
        -:  488:      else
        -:  489:  {
    #####:  490:    players[i] = scoreFor (i, state);
        -:  491:  }
    #####:  492:    }
        -:  493:
        -:  494:  //find highest score
    #####:  495:  j = 0;
    #####:  496:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  497:    {
    #####:  498:      if (players[i] > players[j])
        -:  499:  {
    #####:  500:    j = i;
    #####:  501:  }
    #####:  502:    }
    #####:  503:  highScore = players[j];
        -:  504:
        -:  505:  //add 1 to players who had less turns
    #####:  506:  currentPlayer = whoseTurn(state);
    #####:  507:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  508:    {
    #####:  509:      if ( players[i] == highScore && i > currentPlayer )
        -:  510:  {
    #####:  511:    players[i]++;
    #####:  512:  }
    #####:  513:    }
        -:  514:
        -:  515:  //find new highest score
    #####:  516:  j = 0;
    #####:  517:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  518:    {
    #####:  519:      if ( players[i] > players[j] )
        -:  520:  {
    #####:  521:    j = i;
    #####:  522:  }
    #####:  523:    }
    #####:  524:  highScore = players[j];
        -:  525:
        -:  526:  //set winners in array to 1 and rest to 0
    #####:  527:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  528:    {
    #####:  529:      if ( players[i] == highScore )
        -:  530:  {
    #####:  531:    players[i] = 1;
    #####:  532:  }
        -:  533:      else
        -:  534:  {
    #####:  535:    players[i] = 0;
        -:  536:  }
    #####:  537:    }
        -:  538:
    #####:  539:  return 0;
        -:  540:}
        -:  541:
        -:  542:
        -:  543:int drawCard(int player, struct gameState *state)
        -:  544:{ int count;
        -:  545:  int deckCounter;
      565:  546:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  547:    
        -:  548:    //Step 1 Shuffle the discard pile back into a deck
        -:  549:    int i;
        -:  550:    //Move discard to deck
    #####:  551:    for (i = 0; i < state->discardCount[player];i++){
    #####:  552:      state->deck[player][i] = state->discard[player][i];
    #####:  553:      state->discard[player][i] = -1;
    #####:  554:    }
        -:  555:
    #####:  556:    state->deckCount[player] = state->discardCount[player];
    #####:  557:    state->discardCount[player] = 0;//Reset discard
        -:  558:
        -:  559:    //Shufffle the deck
    #####:  560:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  561:   
        -:  562:    if (DEBUG){//Debug statements
        -:  563:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  564:    }
        -:  565:    
    #####:  566:    state->discardCount[player] = 0;
        -:  567:
        -:  568:    //Step 2 Draw Card
    #####:  569:    count = state->handCount[player];//Get current player's hand count
        -:  570:    
        -:  571:    if (DEBUG){//Debug statements
        -:  572:      printf("Current hand count: %d\n", count);
        -:  573:    }
        -:  574:    
    #####:  575:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  576:
    #####:  577:    if (deckCounter == 0)
    #####:  578:      return -1;
        -:  579:
    #####:  580:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  581:    state->deckCount[player]--;
    #####:  582:    state->handCount[player]++;//Increment hand count
    #####:  583:  }
        -:  584:
        -:  585:  else{
      565:  586:    int count = state->handCount[player];//Get current hand count for player
        -:  587:    int deckCounter;
        -:  588:    if (DEBUG){//Debug statements
        -:  589:      printf("Current hand count: %d\n", count);
        -:  590:    }
        -:  591:
      565:  592:    deckCounter = state->deckCount[player];//Create holder for the deck count
      565:  593:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      565:  594:    state->deckCount[player]--;
      565:  595:    state->handCount[player]++;//Increment hand count
        -:  596:  }
        -:  597:
      565:  598:  return 0;
      565:  599:}
        -:  600:
        -:  601:
        -:  602:
        -:  603:
        -:  604:
        -:  605:
        -:  606:
        -:  607:int getCost(int cardNumber)
        -:  608:{
    #####:  609:  switch( cardNumber ) 
        -:  610:    {
        -:  611:    case curse:
    #####:  612:      return 0;
        -:  613:    case estate:
    #####:  614:      return 2;
        -:  615:    case duchy:
    #####:  616:      return 5;
        -:  617:    case province:
    #####:  618:      return 8;
        -:  619:    case copper:
    #####:  620:      return 0;
        -:  621:    case silver:
    #####:  622:      return 3;
        -:  623:    case gold:
    #####:  624:      return 6;
        -:  625:
        -:  626:
        -:  627:
        -:  628:
        -:  629:
        -:  630:    case adventurer:
    #####:  631:      return 6;
        -:  632:    
        -:  633:
        -:  634:
        -:  635:
        -:  636:    case council_room:
    #####:  637:      return 5;
        -:  638:    
        -:  639:
        -:  640:
        -:  641:    case feast:
    #####:  642:      return 4;
        -:  643:    
        -:  644:
        -:  645:
        -:  646:
        -:  647:
        -:  648:    case gardens:
    #####:  649:      return 4;
        -:  650:    case mine:
    #####:  651:      return 5;
        -:  652:    case remodel:
    #####:  653:      return 4;
        -:  654:
        -:  655:
        -:  656:
        -:  657:    case smithy:
    #####:  658:      return 4;
        -:  659:    
        -:  660:
        -:  661:
        -:  662:
        -:  663:
        -:  664:
        -:  665:    case village:
    #####:  666:      return 3;
        -:  667:    case baron:
    #####:  668:      return 4;
        -:  669:    case great_hall:
    #####:  670:      return 3;
        -:  671:    case minion:
    #####:  672:      return 5;
        -:  673:    case steward:
    #####:  674:      return 3;
        -:  675:    case tribute:
    #####:  676:      return 5;
        -:  677:    case ambassador:
    #####:  678:      return 3;
        -:  679:    case cutpurse:
    #####:  680:      return 4;
        -:  681:    case embargo: 
    #####:  682:      return 2;
        -:  683:    case outpost:
    #####:  684:      return 5;
        -:  685:    case salvager:
    #####:  686:      return 4;
        -:  687:    case sea_hag:
    #####:  688:      return 4;
        -:  689:    case treasure_map:
    #####:  690:      return 4;
        -:  691:    }
        -:  692:  
    #####:  693:  return -1;
    #####:  694:}
        -:  695:
        -:  696:
        -:  697:
        -:  698:
        -:  699:
        -:  700:
        -:  701:// adventurerFunction created (REFACTORING)
        -:  702:// For the function Adventure, we should add a variable, and add a 
        -:  703:// parameter to the function. We should also add a structure, and a 
        -:  704:// pointer to a given variable
        -:  705:
        -:  706:void adventurerFunction(int currentPlayer, int temphand[], int z, struct gameState *state){
        -:  707:
        -:  708:  int cardDrawn;
    #####:  709:  int drawntreasure = 0;
        -:  710:
        -:  711:  // we should have 3 cards revealed from the deck instead of 2 that was originally
        -:  712:  // placed
        -:  713:
        -:  714:    // bug
        -:  715:    
    #####:  716: while(drawntreasure<3){
        -:  717:  
    #####:  718:  if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  719:    shuffle(currentPlayer, state);
    #####:  720:  }
    #####:  721:  drawCard(currentPlayer, state);
        -:  722:  
        -:  723:
        -:  724:
    #####:  725:  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  726:  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  727:    drawntreasure++;
        -:  728:  else{
    #####:  729:    temphand[z]=cardDrawn;
    #####:  730:    state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  731:    z++;
        -:  732:  }
        -:  733:  }
        -:  734:
        -:  735:
        -:  736:    // here we omit the return 0 as it is not required as given previoulsy in the case
    #####:  737:      while(z-1 >=0){
    #####:  738:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  739:      z=z-1;
        -:  740:      }
    #####:  741:    }
        -:  742:
        -:  743:
        -:  744:// FunctionSmithy created (Refactored)
        -:  745:
        -:  746:void smithyFunction(int currentPlayer, int handPos,struct gameState *state){
        -:  747:
        -:  748:   // for loop enforced in function
        -:  749:
        -:  750:    // bug detected
    #####:  751:  for ( int i = 0; i<4;i++)
        -:  752:  {
        -:  753:
    #####:  754:    drawCard(currentPlayer,state);
        -:  755:
    #####:  756:  }
        -:  757:
        -:  758:        //discard card from hand
    #####:  759:        discardCard(handPos, currentPlayer,state,0);
        -:  760:
        -:  761:        // Since void function we dont return 0
    #####:  762:}
        -:  763:
        -:  764:
        -:  765:
        -:  766:// function_council_room created (refactored)
        -:  767:
        -:  768:void council_roomFunction( int currentPlayer, int handPos, struct gameState *state){
        -:  769:
        -:  770:    // bug detected
        -:  771:   
    #####:  772:   for( int i = 0; i<5 ; i++)
        -:  773:    {
        -:  774:
    #####:  775:      drawCard(currentPlayer,state);
    #####:  776:    }
        -:  777:
        -:  778:      //+1 Buy
    #####:  779:    state->numBuys++;
        -:  780:
        -:  781:
        -:  782:      //Each other player draws a card
    #####:  783:      for (int i = 0; i < state->numPlayers; i++)
        -:  784:  {
    #####:  785:    if ( i != currentPlayer )
        -:  786:      {
    #####:  787:        drawCard(i, state);
    #####:  788:      }
    #####:  789:  }
        -:  790:
        -:  791:  // put played card in placed card pile
    #####:  792:  discardCard(handPos,currentPlayer,state, 0);
        -:  793:
    #####:  794:}
        -:  795:
        -:  796:// functionSalvager created(refactored)
        -:  797:
        -:  798:void salvagerFunction(int choice1,int handPos,int currentPlayer,struct gameState *state)
        -:  799:{
        -:  800:  
        -:  801:
        -:  802:  //+1 buy
    #####:  803:      state->numBuys++;
        -:  804:      
    #####:  805:      if (choice1)
        -:  806:  {
        -:  807:    //gain coins equal to trashed card
    #####:  808:    state->coins = state->coins + getCost( handCard(choice1, state) );
        -:  809:   
        -:  810:    //trash card
    #####:  811:    discardCard(choice1, currentPlayer, state, 1);  
    #####:  812:  }
        -:  813:      
        -:  814:      //discard card
    #####:  815:      discardCard(handPos, currentPlayer, state, 0);
        -:  816:    
    #####:  817:}
        -:  818:
        -:  819:
        -:  820:
        -:  821:
        -:  822:// outpostFunction (REFACTORED)
        -:  823:void outpostFunction(int handPos,int currentPlayer, struct gameState *state){
        -:  824:
        -:  825: //bug 
        -:  826:
        -:  827:  //set outpost flag
    #####:  828:      state->outpostPlayed++;
        -:  829:      
        -:  830:      //discard card
    #####:  831:      discardCard(handPos, currentPlayer, state, 0);
        -:  832:  
    #####:  833:}
        -:  834:
        -:  835:
        -:  836:
        -:  837:
        -:  838:
        -:  839:
        -:  840:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  841:{
        -:  842:  int i;
        -:  843:  int j;
        -:  844:  int k;
        -:  845:  int x;
        -:  846:  int index;
    #####:  847:  int currentPlayer = whoseTurn(state);
    #####:  848:  int nextPlayer = currentPlayer + 1;
        -:  849:
    #####:  850:  int tributeRevealedCards[2] = {-1, -1};
        -:  851:  int temphand[MAX_HAND];// moved above the if statement
    #####:  852:  int drawntreasure=0;
        -:  853:  int cardDrawn;
    #####:  854:  int z = 0;// this is the counter for the temp hand
    #####:  855:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  856:    nextPlayer = 0;
    #####:  857:  }
        -:  858:  
        -:  859:  
        -:  860:  //uses switch to select card and perform actions
        -:  861:  
        -:  862:
        -:  863:
        -:  864:
    #####:  865:  switch( card ) 
        -:  866:    {
        -:  867:    
        -:  868:
        -:  869:
        -:  870:/*********************************************************************/
        -:  871:
        -:  872:
        -:  873:
        -:  874:
        -:  875:    case adventurer:
        -:  876:    // CALL THE FUNCTION
    #####:  877:        adventurerFunction(currentPlayer,temphand,z,state);
    #####:  878:        return 0; 
        -:  879:
        -:  880:
        -:  881:/*********************************************************************/
        -:  882:
        -:  883:
        -:  884:
        -:  885:// call the council_room function
        -:  886:
        -:  887:    case council_room:
    #####:  888:          council_roomFunction(currentPlayer,handPos,state);
    #####:  889:          return 0; 
        -:  890:
        -:  891:
        -:  892:
        -:  893:      
        -:  894:   
        -:  895:
        -:  896:
        -:  897:
        -:  898:/*********************************************************************/
        -:  899:
        -:  900:    
        -:  901:      
        -:  902:
        -:  903:
        -:  904:
        -:  905:    case feast:
        -:  906:      //gain card with cost up to 5
        -:  907:      //Backup hand
    #####:  908:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  909:  temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  910:  state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  911:      }
        -:  912:      //Backup hand
        -:  913:
        -:  914:      //Update Coins for Buy
    #####:  915:      updateCoins(currentPlayer, state, 5);
    #####:  916:      x = 1;//Condition to loop on
    #####:  917:      while( x == 1) {//Buy one card
    #####:  918:  if (supplyCount(choice1, state) <= 0){
        -:  919:    if (DEBUG)
        -:  920:      printf("None of that card left, sorry!\n");
        -:  921:
        -:  922:    if (DEBUG){
        -:  923:      printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  924:    }
    #####:  925:  }
    #####:  926:  else if (state->coins < getCost(choice1)){
    #####:  927:    printf("That card is too expensive!\n");
        -:  928:
        -:  929:    if (DEBUG){
        -:  930:      printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  931:    }
    #####:  932:  }
        -:  933:  else{
        -:  934:
        -:  935:    if (DEBUG){
        -:  936:      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  937:    }
        -:  938:
    #####:  939:    gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  940:    x = 0;//No more buying cards
        -:  941:
        -:  942:    if (DEBUG){
        -:  943:      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  944:    }
        -:  945:
        -:  946:  }
        -:  947:      }     
        -:  948:
        -:  949:      //Reset Hand
    #####:  950:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  951:  state->hand[currentPlayer][i] = temphand[i];
    #####:  952:  temphand[i] = -1;
    #####:  953:      }
        -:  954:      //Reset Hand
        -:  955:            
    #####:  956:      return 0;
        -:  957:      
        -:  958:    
        -:  959:/*********************************************************************/
        -:  960:
        -:  961:
        -:  962:
        -:  963:    case gardens:
    #####:  964:      return -1;
        -:  965:      
        -:  966:   
        -:  967:/*********************************************************************/
        -:  968:
        -:  969:
        -:  970:
        -:  971:    case mine:
    #####:  972:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  973:
    #####:  974:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  975:  {
    #####:  976:    return -1;
        -:  977:  }
        -:  978:    
    #####:  979:      if (choice2 > treasure_map || choice2 < curse)
        -:  980:  {
    #####:  981:    return -1;
        -:  982:  }
        -:  983:
    #####:  984:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  985:  {
    #####:  986:    return -1;
        -:  987:  }
        -:  988:
    #####:  989:      gainCard(choice2, state, 2, currentPlayer);
        -:  990:
        -:  991:      //discard card from hand
    #####:  992:      discardCard(handPos, currentPlayer, state, 0);
        -:  993:
        -:  994:      //discard trashed card
    #####:  995:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  996:  {
    #####:  997:    if (state->hand[currentPlayer][i] == j)
        -:  998:      {
    #####:  999:        discardCard(i, currentPlayer, state, 0);      
    #####: 1000:        break;
        -: 1001:      }
    #####: 1002:  }
        -: 1003:      
    #####: 1004:      return 0;
        -: 1005:      
        -: 1006:    /*********************************************************************/
        -: 1007:
        -: 1008:
        -: 1009:
        -: 1010:
        -: 1011:    case remodel:
    #####: 1012:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1013:
    #####: 1014:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -: 1015:  {
    #####: 1016:    return -1;
        -: 1017:  }
        -: 1018:
    #####: 1019:      gainCard(choice2, state, 0, currentPlayer);
        -: 1020:
        -: 1021:      //discard card from hand
    #####: 1022:      discardCard(handPos, currentPlayer, state, 0);
        -: 1023:
        -: 1024:      //discard trashed card
    #####: 1025:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1026:  {
    #####: 1027:    if (state->hand[currentPlayer][i] == j)
        -: 1028:      {
    #####: 1029:        discardCard(i, currentPlayer, state, 0);      
    #####: 1030:        break;
        -: 1031:      }
    #####: 1032:  }
        -: 1033:
        -: 1034:
    #####: 1035:      return 0;
        -: 1036:    
        -: 1037:    
        -: 1038:
        -: 1039:
        -: 1040:
        -: 1041:
        -: 1042:
        -: 1043:/*********************************************************************/
        -: 1044:
        -: 1045:   
        -: 1046:    
        -: 1047:
        -: 1048:
        -: 1049:      case smithy:
    #####: 1050:        smithyFunction(currentPlayer,handPos,state);
    #####: 1051:        return 0 ; 
        -: 1052:
        -: 1053:
        -: 1054:/*********************************************************************/
        -: 1055:
        -: 1056:
        -: 1057:
        -: 1058:
        -: 1059:    case village:
        -: 1060:      //+1 Card
    #####: 1061:      drawCard(currentPlayer, state);
        -: 1062:      
        -: 1063:      //+2 Actions
    #####: 1064:      state->numActions = state->numActions + 2;
        -: 1065:      
        -: 1066:      //discard played card from hand
    #####: 1067:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1068:      return 0;
        -: 1069:    
        -: 1070:
        -: 1071:
        -: 1072:/*********************************************************************/
        -: 1073:
        -: 1074:
        -: 1075:
        -: 1076:
        -: 1077:
        -: 1078:    case baron:
    #####: 1079:      state->numBuys++;//Increase buys by 1!
    #####: 1080:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####: 1081:  int p = 0;//Iterator for hand!
    #####: 1082:  int card_not_discarded = 1;//Flag for discard set!
    #####: 1083:  while(card_not_discarded){
    #####: 1084:    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####: 1085:      state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1086:      state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1087:      state->discardCount[currentPlayer]++;
    #####: 1088:      for (;p < state->handCount[currentPlayer]; p++){
    #####: 1089:        state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####: 1090:      }
    #####: 1091:      state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1092:      state->handCount[currentPlayer]--;
    #####: 1093:      card_not_discarded = 0;//Exit the loop
    #####: 1094:    }
    #####: 1095:    else if (p > state->handCount[currentPlayer]){
        -: 1096:      if(DEBUG) {
        -: 1097:        printf("No estate cards in your hand, invalid choice\n");
        -: 1098:        printf("Must gain an estate if there are any\n");
        -: 1099:      }
    #####: 1100:      if (supplyCount(estate, state) > 0){
    #####: 1101:        gainCard(estate, state, 0, currentPlayer);
    #####: 1102:        state->supplyCount[estate]--;//Decrement estates
    #####: 1103:        if (supplyCount(estate, state) == 0){
    #####: 1104:    isGameOver(state);
    #####: 1105:        }
    #####: 1106:      }
    #####: 1107:      card_not_discarded = 0;//Exit the loop
    #####: 1108:    }
        -: 1109:          
        -: 1110:    else{
    #####: 1111:      p++;//Next card
        -: 1112:    }
        -: 1113:  }
    #####: 1114:      }
        -: 1115:          
        -: 1116:      else{
    #####: 1117:  if (supplyCount(estate, state) > 0){
    #####: 1118:    gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1119:    state->supplyCount[estate]--;//Decrement Estates
    #####: 1120:    if (supplyCount(estate, state) == 0){
    #####: 1121:      isGameOver(state);
    #####: 1122:    }
    #####: 1123:  }
        -: 1124:      }
        -: 1125:      
        -: 1126:      
    #####: 1127:      return 0;
        -: 1128:    
        -: 1129:    
        -: 1130:
        -: 1131:/*********************************************************************/
        -: 1132:
        -: 1133:
        -: 1134:
        -: 1135:
        -: 1136:    case great_hall:
        -: 1137:      //+1 Card
    #####: 1138:      drawCard(currentPlayer, state);
        -: 1139:      
        -: 1140:      //+1 Actions
    #####: 1141:      state->numActions++;
        -: 1142:      
        -: 1143:      //discard card from hand
    #####: 1144:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1145:      return 0;
        -: 1146:    
        -: 1147:    
        -: 1148:
        -: 1149:
        -: 1150:/*********************************************************************/
        -: 1151:
        -: 1152:
        -: 1153:
        -: 1154:
        -: 1155:    case minion:
        -: 1156:      //+1 action
    #####: 1157:      state->numActions++;
        -: 1158:      
        -: 1159:      //discard card from hand
    #####: 1160:      discardCard(handPos, currentPlayer, state, 0);
        -: 1161:      
    #####: 1162:      if (choice1)    //+2 coins
        -: 1163:  {
    #####: 1164:    state->coins = state->coins + 2;
    #####: 1165:  }
        -: 1166:      
    #####: 1167:      else if (choice2)   //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1168:  {
        -: 1169:    //discard hand
    #####: 1170:    while(numHandCards(state) > 0)
        -: 1171:      {
    #####: 1172:        discardCard(handPos, currentPlayer, state, 0);
        -: 1173:      }
        -: 1174:        
        -: 1175:    //draw 4
    #####: 1176:    for (i = 0; i < 4; i++)
        -: 1177:      {
    #####: 1178:        drawCard(currentPlayer, state);
    #####: 1179:      }
        -: 1180:        
        -: 1181:    //other players discard hand and redraw if hand size > 4
    #####: 1182:    for (i = 0; i < state->numPlayers; i++)
        -: 1183:      {
    #####: 1184:        if (i != currentPlayer)
        -: 1185:    {
    #####: 1186:      if ( state->handCount[i] > 4 )
        -: 1187:        {
        -: 1188:          //discard hand
    #####: 1189:          while( state->handCount[i] > 0 )
        -: 1190:      {
    #####: 1191:        discardCard(handPos, i, state, 0);
        -: 1192:      }
        -: 1193:              
        -: 1194:          //draw 4
    #####: 1195:          for (j = 0; j < 4; j++)
        -: 1196:      {
    #####: 1197:        drawCard(i, state);
    #####: 1198:      }
    #####: 1199:        }
    #####: 1200:    }
    #####: 1201:      }
        -: 1202:        
    #####: 1203:  }
    #####: 1204:      return 0;
        -: 1205:    
        -: 1206:   
        -: 1207:
        -: 1208:
        -: 1209:
        -: 1210:
        -: 1211:/*********************************************************************/
        -: 1212:
        -: 1213:
        -: 1214:
        -: 1215:
        -: 1216:    case steward:
    #####: 1217:      if (choice1 == 1)
        -: 1218:  {
        -: 1219:    //+2 cards
    #####: 1220:    drawCard(currentPlayer, state);
    #####: 1221:    drawCard(currentPlayer, state);
    #####: 1222:  }
    #####: 1223:      else if (choice1 == 2)
        -: 1224:  {
        -: 1225:    //+2 coins
    #####: 1226:    state->coins = state->coins + 2;
    #####: 1227:  }
        -: 1228:      else
        -: 1229:  {
        -: 1230:    //trash 2 cards in hand
    #####: 1231:    discardCard(choice2, currentPlayer, state, 1);
    #####: 1232:    discardCard(choice3, currentPlayer, state, 1);
        -: 1233:  }
        -: 1234:      
        -: 1235:      //discard card from hand
    #####: 1236:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1237:      return 0;
        -: 1238:    
        -: 1239:    
        -: 1240:
        -: 1241:
        -: 1242:
        -: 1243:/**********************************************************************/
        -: 1244:
        -: 1245:
        -: 1246:
        -: 1247:
        -: 1248:
        -: 1249:
        -: 1250:
        -: 1251:
        -: 1252:    case tribute:
    #####: 1253:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1254:  if (state->deckCount[nextPlayer] > 0){
    #####: 1255:    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1256:    state->deckCount[nextPlayer]--;
    #####: 1257:  }
    #####: 1258:  else if (state->discardCount[nextPlayer] > 0){
    #####: 1259:    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1260:    state->discardCount[nextPlayer]--;
    #####: 1261:  }
        -: 1262:  else{
        -: 1263:    //No Card to Reveal
        -: 1264:    if (DEBUG){
        -: 1265:      printf("No cards to reveal\n");
        -: 1266:    }
        -: 1267:  }
    #####: 1268:      }
        -: 1269:      
        -: 1270:      else{
    #####: 1271:  if (state->deckCount[nextPlayer] == 0){
    #####: 1272:    for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1273:      state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1274:      state->deckCount[nextPlayer]++;
    #####: 1275:      state->discard[nextPlayer][i] = -1;
    #####: 1276:      state->discardCount[nextPlayer]--;
    #####: 1277:    }
        -: 1278:          
    #####: 1279:    shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1280:  } 
    #####: 1281:  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1282:  state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1283:  state->deckCount[nextPlayer]--;
    #####: 1284:  tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1285:  state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1286:  state->deckCount[nextPlayer]--;
        -: 1287:      }    
        -: 1288:           
    #####: 1289:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1290:  state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1291:  state->playedCardCount++;
    #####: 1292:  tributeRevealedCards[1] = -1;
    #####: 1293:      }
        -: 1294:
    #####: 1295:      for (i = 0; i <= 2; i ++){
    #####: 1296:  if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1297:    state->coins += 2;
    #####: 1298:  }
        -: 1299:        
    #####: 1300:  else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1301:    drawCard(currentPlayer, state);
    #####: 1302:    drawCard(currentPlayer, state);
    #####: 1303:  }
        -: 1304:  else{//Action Card
    #####: 1305:    state->numActions = state->numActions + 2;
        -: 1306:  }
    #####: 1307:      }
        -: 1308:      
    #####: 1309:      return 0;
        -: 1310:    
        -: 1311:   
        -: 1312:
        -: 1313:/*********************************************************************/
        -: 1314:
        -: 1315:
        -: 1316:
        -: 1317:
        -: 1318:
        -: 1319:    case ambassador:
    #####: 1320:      j = 0;    //used to check if player has enough cards to discard
        -: 1321:
    #####: 1322:      if (choice2 > 2 || choice2 < 0)
        -: 1323:  {
    #####: 1324:    return -1;        
        -: 1325:  }
        -: 1326:
    #####: 1327:      if (choice1 == handPos)
        -: 1328:  {
    #####: 1329:    return -1;
        -: 1330:  }
        -: 1331:
    #####: 1332:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1333:  {
    #####: 1334:    if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1335:      {
    #####: 1336:        j++;
    #####: 1337:      }
    #####: 1338:  }
    #####: 1339:      if (j < choice2)
        -: 1340:  {
    #####: 1341:    return -1;        
        -: 1342:  }
        -: 1343:
        -: 1344:      if (DEBUG) 
        -: 1345:  printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1346:
        -: 1347:      //increase supply count for choosen card by amount being discarded
    #####: 1348:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1349:      
        -: 1350:      //each other player gains a copy of revealed card
    #####: 1351:      for (i = 0; i < state->numPlayers; i++)
        -: 1352:  {
    #####: 1353:    if (i != currentPlayer)
        -: 1354:      {
    #####: 1355:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1356:      }
    #####: 1357:  }
        -: 1358:
        -: 1359:      //discard played card from hand
    #####: 1360:      discardCard(handPos, currentPlayer, state, 0);      
        -: 1361:
        -: 1362:      //trash copies of cards returned to supply
    #####: 1363:      for (j = 0; j < choice2; j++)
        -: 1364:  {
    #####: 1365:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1366:      {
    #####: 1367:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1368:    {
    #####: 1369:      discardCard(i, currentPlayer, state, 1);
    #####: 1370:      break;
        -: 1371:    }
    #####: 1372:      }
    #####: 1373:  }     
        -: 1374:
    #####: 1375:      return 0;
        -: 1376:    
        -: 1377:   
        -: 1378:
        -: 1379:/********************************/
        -: 1380:
        -: 1381:
        -: 1382:
        -: 1383:
        -: 1384:
        -: 1385:
        -: 1386:    case cutpurse:
        -: 1387:
    #####: 1388:      updateCoins(currentPlayer, state, 2);
    #####: 1389:      for (i = 0; i < state->numPlayers; i++)
        -: 1390:  {
    #####: 1391:    if (i != currentPlayer)
        -: 1392:      {
    #####: 1393:        for (j = 0; j < state->handCount[i]; j++)
        -: 1394:    {
    #####: 1395:      if (state->hand[i][j] == copper)
        -: 1396:        {
    #####: 1397:          discardCard(j, i, state, 0);
    #####: 1398:          break;
        -: 1399:        }
    #####: 1400:      if (j == state->handCount[i])
        -: 1401:        {
    #####: 1402:          for (k = 0; k < state->handCount[i]; k++)
        -: 1403:      {
        -: 1404:        if (DEBUG)
        -: 1405:          printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1406:      } 
    #####: 1407:          break;
        -: 1408:        }   
    #####: 1409:    }
        -: 1410:          
    #####: 1411:      }
        -: 1412:        
    #####: 1413:  }       
        -: 1414:
        -: 1415:      //discard played card from hand
    #####: 1416:      discardCard(handPos, currentPlayer, state, 0);      
        -: 1417:
    #####: 1418:      return 0;
        -: 1419:
        -: 1420:    
        -: 1421:    
        -: 1422:
        -: 1423:
        -: 1424:/********************************/
        -: 1425:
        -: 1426:
        -: 1427:
        -: 1428:
        -: 1429:
        -: 1430:
        -: 1431:
        -: 1432:
        -: 1433:
        -: 1434:    case embargo: 
        -: 1435:      //+2 Coins
    #####: 1436:      state->coins = state->coins + 2;
        -: 1437:      
        -: 1438:      //see if selected pile is in play
    #####: 1439:      if ( state->supplyCount[choice1] == -1 )
        -: 1440:  {
    #####: 1441:    return -1;
        -: 1442:  }
        -: 1443:      
        -: 1444:
    #####: 1445:       state->embargoTokens[choice1]++;
        -: 1446:      
        -: 1447:      //trash card
    #####: 1448:      discardCard(handPos, currentPlayer, state, 1);    
    #####: 1449:      return 0;
        -: 1450:    
        -: 1451:
        -: 1452:/********************************/
        -: 1453:
        -: 1454:
        -: 1455:   
        -: 1456:
        -: 1457:      
        -: 1458:
        -: 1459:
        -: 1460:
        -: 1461:      // call outpost function 
        -: 1462:      case outpost:
    #####: 1463:      outpostFunction(currentPlayer,handPos,state);
    #####: 1464:      return 0;
        -: 1465:
        -: 1466:
        -: 1467:
        -: 1468:/********************************/
        -: 1469:
        -: 1470:
        -: 1471:
        -: 1472:
        -: 1473:      // call salvegerFunction
        -: 1474:      case salvager:
    #####: 1475:      salvagerFunction(currentPlayer,handPos,choice1,state);
    #####: 1476:      return 0 ;
        -: 1477:
        -: 1478:
        -: 1479:
        -: 1480:
        -: 1481:
        -: 1482:  /********************************/
        -: 1483:
        -: 1484:
        -: 1485:
        -: 1486:
        -: 1487:    
        -: 1488:
        -: 1489:
        -: 1490:
        -: 1491:
        -: 1492:
        -: 1493:    case sea_hag:
    #####: 1494:      for (i = 0; i < state->numPlayers; i++){
    #####: 1495:  if (i != currentPlayer){
    #####: 1496:    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];          state->deckCount[i]--;
    #####: 1497:    state->discardCount[i]++;
    #####: 1498:    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1499:  }
    #####: 1500:      }
    #####: 1501:      return 0;
        -: 1502:    
        -: 1503:   
        -: 1504:
        -: 1505:
        -: 1506:/********************************/
        -: 1507:
        -: 1508:
        -: 1509:
        -: 1510:
        -: 1511:    case treasure_map:
        -: 1512:      //search hand for another treasure_map
    #####: 1513:      index = -1;
    #####: 1514:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1515:  {
    #####: 1516:    if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1517:      {
    #####: 1518:        index = i;
    #####: 1519:        break;
        -: 1520:      }
    #####: 1521:  }
    #####: 1522:      if (index > -1)
        -: 1523:  {
        -: 1524:    //trash both treasure cards
    #####: 1525:    discardCard(handPos, currentPlayer, state, 1);
    #####: 1526:    discardCard(index, currentPlayer, state, 1);
        -: 1527:
        -: 1528:    //gain 4 Gold cards
    #####: 1529:    for (i = 0; i < 4; i++)
        -: 1530:      {
    #####: 1531:        gainCard(gold, state, 1, currentPlayer);
    #####: 1532:      }
        -: 1533:        
        -: 1534:    //return success
    #####: 1535:    return 1;
        -: 1536:  }
        -: 1537:      
        -: 1538:      //no second treasure_map found in hand
    #####: 1539:      return -1;
        -: 1540:    }
        -: 1541:  
    #####: 1542:  return -1;
    #####: 1543:}
        -: 1544:
        -: 1545:/********************************/
        -: 1546:
        -: 1547:
        -: 1548:
        -: 1549:
        -: 1550:
        -: 1551:
        -: 1552:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1553:{
        -: 1554:  
        -: 1555:  //if card is not trashed, added to Played pile 
    #####: 1556:  if (trashFlag < 1)
        -: 1557:    {
        -: 1558:      //add card to played pile
    #####: 1559:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1560:      state->playedCardCount++;
    #####: 1561:    }
        -: 1562:  
        -: 1563:  //set played card to -1
    #####: 1564:  state->hand[currentPlayer][handPos] = -1;
        -: 1565:  
        -: 1566:  //remove card from player's hand
    #####: 1567:  if ( handPos == (state->handCount[currentPlayer] - 1) )   //last card in hand array is played
        -: 1568:    {
        -: 1569:      //reduce number of cards in hand
    #####: 1570:      state->handCount[currentPlayer]--;
    #####: 1571:    }
    #####: 1572:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1573:    {
        -: 1574:      //reduce number of cards in hand
    #####: 1575:      state->handCount[currentPlayer]--;
    #####: 1576:    }
        -: 1577:  else  
        -: 1578:    {
        -: 1579:      //replace discarded card with last card in hand
    #####: 1580:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1581:      //set last card to -1
    #####: 1582:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1583:      //reduce number of cards in hand
    #####: 1584:      state->handCount[currentPlayer]--;
        -: 1585:    }
        -: 1586:  
    #####: 1587:  return 0;
        -: 1588:}
        -: 1589:
        -: 1590:
        -: 1591:
        -: 1592:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1593:{
        -: 1594:  //Note: supplyPos is enum of choosen card
        -: 1595:  
        -: 1596:  //check if supply pile is empty (0) or card is not used in game (-1)
        5: 1597:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1598:    {
        1: 1599:      return -1;
        -: 1600:    }
        -: 1601:  
        -: 1602:  //added card for [whoseTurn] current player:
        -: 1603:  // toFlag = 0 : add to discard
        -: 1604:  // toFlag = 1 : add to deck
        -: 1605:  // toFlag = 2 : add to hand
        -: 1606:
        4: 1607:  if (toFlag == 1)
        -: 1608:    {
        1: 1609:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1610:      state->deckCount[player]++;
        1: 1611:    }
        3: 1612:  else if (toFlag == 2)
        -: 1613:    {
        1: 1614:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1615:      state->handCount[player]++;
        1: 1616:    }
        -: 1617:  else
        -: 1618:    {
        2: 1619:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1620:      state->discardCount[player]++;
        -: 1621:    }
        -: 1622:  
        -: 1623:  //decrease number in supply pile
        4: 1624:  state->supplyCount[supplyPos]--;
        -: 1625:   
        4: 1626:  return 0;
        5: 1627:}
        -: 1628:
        -: 1629:
        -: 1630:
        -: 1631:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1632:{
        -: 1633:  int i;
        -: 1634:  
        -: 1635:  //reset coin count
      443: 1636:  state->coins = 0;
        -: 1637:
        -: 1638:  //add coins for each Treasure card in player's hand
     3996: 1639:  for (i = 0; i < state->handCount[player]; i++)
        -: 1640:    {
     1555: 1641:      if (state->hand[player][i] == copper)
        -: 1642:  {
      782: 1643:    state->coins += 1;
      782: 1644:  }
      773: 1645:      else if (state->hand[player][i] == silver)
        -: 1646:  {
      330: 1647:    state->coins += 2;
      330: 1648:  }
      443: 1649:      else if (state->hand[player][i] == gold)
        -: 1650:  {
      330: 1651:    state->coins += 3;
      330: 1652:  } 
     1555: 1653:    } 
        -: 1654:
        -: 1655:  //add bonus
      443: 1656:  state->coins += bonus;
        -: 1657:
      443: 1658:  return 0;
        -: 1659:}
        -: 1660:
        -: 1661:
        -: 1662://end of dominion.c
        -: 1663:
cardtest1.c:
TESTING  feast()

 The player_0 gains 4 cards
Test: FAILED
 The player_0 gains 4 cards in piles
Test: FAILED
 The player_0 buys 4 cards 
Test: FAILED
victory card piles is the same
Province Pile
Test: PASSED
Duchy Pile
Test: PASSED
Estate Pile
Test: PASSED

 kingdom card pile is the same
testing the cards piles . . . 
Test: PASSED
testing the cards piles . . . 
Test: PASSED
testing the cards piles . . . 
Test: PASSED
testing the cards piles . . . 
Test: PASSED
testing the cards piles . . . 
Test: PASSED
testing the cards piles . . . 
Test: PASSED
testing the cards piles . . . 
Test: PASSED
testing the cards piles . . . 
Test: PASSED
testing the cards piles . . . 
Test: PASSED
testing the cards piles . . . 
Test: PASSED

Player_1 gets a card
Test: FAILED
Player_1 gets a card from deck
Test: FAILED
Test: Test Failed
Failed:  5
File 'cardtest1.c'
Lines executed:98.00% of 50
cardtest1.c:creating 'cardtest1.c.gcov'

File 'dominion.c'
Lines executed:25.69% of 650
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:5
        -:    0:Programs:1
        -:    1:
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include "rngs.h"
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:
        -:   10:
        -:   11:int compare(const void* a, const void* b) {
     3220:   12:  if (*(int*)a > *(int*)b)
    #####:   13:    return 1;
     3220:   14:  if (*(int*)a < *(int*)b)
     1150:   15:    return -1;
     2070:   16:  return 0;
     3220:   17:}
        -:   18:
        -:   19:
        -:   20:
        -:   21:struct gameState* newGame() {
    #####:   22:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   23:  return g;
        -:   24:}
        -:   25:
        -:   26:
        -:   27:
        -:   28:
        -:   29:
        -:   30:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   31:      int k8, int k9, int k10) {
    #####:   32:  int* k = malloc(10 * sizeof(int));
    #####:   33:  k[0] = k1;
    #####:   34:  k[1] = k2;
    #####:   35:  k[2] = k3;
    #####:   36:  k[3] = k4;
    #####:   37:  k[4] = k5;
    #####:   38:  k[5] = k6;
    #####:   39:  k[6] = k7;
    #####:   40:  k[7] = k8;
    #####:   41:  k[8] = k9;
    #####:   42:  k[9] = k10;
    #####:   43:  return k;
        -:   44:}
        -:   45:
        -:   46:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   47:       struct gameState *state) {
        -:   48:
        -:   49:  int i;
        -:   50:  int j;
        -:   51:  int it;     
        -:   52:  //set up random number generator
      114:   53:  SelectStream(1);
      114:   54:  PutSeed((long)randomSeed);
        -:   55:  
        -:   56:  //check number of players
      228:   57:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   58:    {
    #####:   59:      return -1;
        -:   60:    }
        -:   61:
        -:   62:  //set number of players
      114:   63:  state->numPlayers = numPlayers;
        -:   64:
        -:   65:  //check selected kingdom cards are different
     2508:   66:  for (i = 0; i < 10; i++)
        -:   67:    {
    25080:   68:      for (j = 0; j < 10; j++)
        -:   69:        {
    21660:   70:    if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   71:      {
    #####:   72:        return -1;
        -:   73:      }
    11400:   74:        }
     1140:   75:    }
        -:   76:
        -:   77:
        -:   78:  //initialize supply
        -:   79:  ///////////////////////////////
        -:   80:
        -:   81:  //set number of Curse cards
      114:   82:  if (numPlayers == 2)
        -:   83:    {
      114:   84:      state->supplyCount[curse] = 10;
      114:   85:    }
    #####:   86:  else if (numPlayers == 3)
        -:   87:    {
    #####:   88:      state->supplyCount[curse] = 20;
    #####:   89:    }
        -:   90:  else
        -:   91:    {
    #####:   92:      state->supplyCount[curse] = 30;
        -:   93:    }
        -:   94:
        -:   95:  //set number of Victory cards
      114:   96:  if (numPlayers == 2)
        -:   97:    {
      114:   98:      state->supplyCount[estate] = 8;
      114:   99:      state->supplyCount[duchy] = 8;
      114:  100:      state->supplyCount[province] = 8;
      114:  101:    }
        -:  102:  else
        -:  103:    {
    #####:  104:      state->supplyCount[estate] = 12;
    #####:  105:      state->supplyCount[duchy] = 12;
    #####:  106:      state->supplyCount[province] = 12;
        -:  107:    }
        -:  108:
        -:  109:  //set number of Treasure cards
      114:  110:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      114:  111:  state->supplyCount[silver] = 40;
      114:  112:  state->supplyCount[gold] = 30;
        -:  113:
        -:  114:  //set number of Kingdom cards
     4788:  115:  for (i = adventurer; i <= treasure_map; i++)        //loop all cards
        -:  116:    {
    37620:  117:      for (j = 0; j < 10; j++)              //loop chosen cards
        -:  118:  {
    17670:  119:    if (kingdomCards[j] == i)
        -:  120:      {
        -:  121:        //check if card is a 'Victory' Kingdom card
     2166:  122:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  123:    {
      228:  124:      if (numPlayers == 2){ 
      228:  125:        state->supplyCount[i] = 8; 
      228:  126:      }
    #####:  127:      else{ state->supplyCount[i] = 12; }
      228:  128:    }
        -:  129:        else
        -:  130:    {
      912:  131:      state->supplyCount[i] = 10;
        -:  132:    }
     1140:  133:        break;
        -:  134:      }
        -:  135:    else    //card is not in the set choosen for the game
        -:  136:      {
    16530:  137:        state->supplyCount[i] = -1;
        -:  138:      }
    16530:  139:  }
        -:  140:
     2280:  141:    }
        -:  142:
        -:  143:  ////////////////////////
        -:  144:  //supply intilization complete
        -:  145:
        -:  146:  //set player decks
      684:  147:  for (i = 0; i < numPlayers; i++)
        -:  148:    {
      228:  149:      state->deckCount[i] = 0;
     1824:  150:      for (j = 0; j < 3; j++)
        -:  151:  {
      684:  152:    state->deck[i][j] = estate;
      684:  153:    state->deckCount[i]++;
      684:  154:  }
     3648:  155:      for (j = 3; j < 10; j++)
        -:  156:  {
     1596:  157:    state->deck[i][j] = copper;
     1596:  158:    state->deckCount[i]++;    
     1596:  159:  }
      228:  160:    }
        -:  161:
        -:  162:  //shuffle player decks
      684:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
      228:  165:      if ( shuffle(i, state) < 0 )
        -:  166:  {
    #####:  167:    return -1;
        -:  168:  }
      228:  169:    }
        -:  170:
        -:  171:  //draw player hands
      684:  172:  for (i = 0; i < numPlayers; i++)
        -:  173:    {  
        -:  174:      //initialize hand size to zero
      228:  175:      state->handCount[i] = 0;
      228:  176:      state->discardCount[i] = 0;
        -:  177:      //draw 5 cards
        -:  178:      // for (j = 0; j < 5; j++)
        -:  179:      //  {
        -:  180:      //    drawCard(i, state);
        -:  181:      //  }
      228:  182:    }
        -:  183:  
        -:  184:  //set embargo tokens to 0 for all supply piles
     6384:  185:  for (i = 0; i <= treasure_map; i++)
        -:  186:    {
     3078:  187:      state->embargoTokens[i] = 0;
     3078:  188:    }
        -:  189:
        -:  190:  //initialize first player's turn
      114:  191:  state->outpostPlayed = 0;
      114:  192:  state->phase = 0;
      114:  193:  state->numActions = 1;
      114:  194:  state->numBuys = 1;
      114:  195:  state->playedCardCount = 0;
      114:  196:  state->whoseTurn = 0;
      114:  197:  state->handCount[state->whoseTurn] = 0;
        -:  198:  //int it; move to top
        -:  199:
        -:  200:  //Moved draw cards to here, only drawing at the start of a turn
     1368:  201:  for (it = 0; it < 5; it++){
      570:  202:    drawCard(state->whoseTurn, state);
      570:  203:  }
        -:  204:
      114:  205:  updateCoins(state->whoseTurn, state, 0);
        -:  206:
      114:  207:  return 0;
      114:  208:}
        -:  209:
        -:  210:int shuffle(int player, struct gameState *state) {
        -:  211: 
        -:  212:
        -:  213:  int newDeck[MAX_DECK];
      231:  214:  int newDeckPos = 0;
        -:  215:  int card;
        -:  216:  int i;
        -:  217:
      231:  218:  if (state->deckCount[player] < 1)
        1:  219:    return -1;
      230:  220:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  221:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  222:
     5060:  223:  while (state->deckCount[player] > 0) {
     2300:  224:    card = floor(Random() * state->deckCount[player]);
     2300:  225:    newDeck[newDeckPos] = state->deck[player][card];
     2300:  226:    newDeckPos++;
    16134:  227:    for (i = card; i < state->deckCount[player]-1; i++) {
     5767:  228:      state->deck[player][i] = state->deck[player][i+1];
     5767:  229:    }
     2300:  230:    state->deckCount[player]--;
        -:  231:  }
     5060:  232:  for (i = 0; i < newDeckPos; i++) {
     2300:  233:    state->deck[player][i] = newDeck[i];
     2300:  234:    state->deckCount[player]++;
     2300:  235:  }
        -:  236:
      230:  237:  return 0;
      231:  238:}
        -:  239:
        -:  240:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  241:{ 
        -:  242:  int card;
    #####:  243:  int coin_bonus = 0;     //tracks coins gain from actions
        -:  244:
        -:  245:  //check if it is the right phase
    #####:  246:  if (state->phase != 0)
        -:  247:    {
    #####:  248:      return -1;
        -:  249:    }
        -:  250:  
        -:  251:  //check if player has enough actions
    #####:  252:  if ( state->numActions < 1 )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:  
        -:  257:  //get card played
    #####:  258:  card = handCard(handPos, state);
        -:  259:  
        -:  260:  //check if selected card is an action
    #####:  261:  if ( card < adventurer || card > treasure_map )
        -:  262:    {
    #####:  263:      return -1;
        -:  264:    }
        -:  265:  
        -:  266:  //play card
    #####:  267:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  268:    {
    #####:  269:      return -1;
        -:  270:    }
        -:  271:  
        -:  272:  //reduce number of actions
    #####:  273:  state->numActions--;
        -:  274:
        -:  275:  //update coins (Treasure cards may be added with card draws)
    #####:  276:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  277:  
    #####:  278:  return 0;
    #####:  279:}
        -:  280:
        -:  281:int buyCard(int supplyPos, struct gameState *state) {
        -:  282:  int who;
        -:  283:  if (DEBUG){
        -:  284:    printf("Entering buyCard...\n");
        -:  285:  }
        -:  286:
        -:  287:  // I don't know what to do about the phase thing.
        -:  288:
    #####:  289:  who = state->whoseTurn;
        -:  290:
    #####:  291:  if (state->numBuys < 1){
        -:  292:    if (DEBUG)
        -:  293:      printf("You do not have any buys left\n");
    #####:  294:    return -1;
    #####:  295:  } else if (supplyCount(supplyPos, state) <1){
        -:  296:    if (DEBUG)
        -:  297:      printf("There are not any of that type of card left\n");
    #####:  298:    return -1;
    #####:  299:  } else if (state->coins < getCost(supplyPos)){
        -:  300:    if (DEBUG) 
        -:  301:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  302:    return -1;
        -:  303:  } else {
    #####:  304:    state->phase=1;
        -:  305:    //state->supplyCount[supplyPos]--;
    #####:  306:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  307:  
    #####:  308:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  309:    state->numBuys--;
        -:  310:    if (DEBUG)
        -:  311:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  312:  }
        -:  313:
        -:  314:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  315:  //state->discardCount[who]++;
        -:  316:    
    #####:  317:  return 0;
    #####:  318:}
        -:  319:
        -:  320:
        -:  321:
        -:  322:int numHandCards(struct gameState *state) {
    #####:  323:  return state->handCount[ whoseTurn(state) ];
        -:  324:}
        -:  325:
        -:  326:int handCard(int handPos, struct gameState *state) {
    #####:  327:  int currentPlayer = whoseTurn(state);
    #####:  328:  return state->hand[currentPlayer][handPos];
        -:  329:}
        -:  330:
        -:  331:int supplyCount(int card, struct gameState *state) {
        7:  332:  return state->supplyCount[card];
        -:  333:}
        -:  334:
        -:  335:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  336:  int i;
    #####:  337:  int count = 0;
        -:  338:
    #####:  339:  for (i = 0; i < state->deckCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->deck[player][i] == card) count++;
    #####:  342:    }
        -:  343:
    #####:  344:  for (i = 0; i < state->handCount[player]; i++)
        -:  345:    {
    #####:  346:      if (state->hand[player][i] == card) count++;
    #####:  347:    }
        -:  348:
    #####:  349:  for (i = 0; i < state->discardCount[player]; i++)
        -:  350:    {
    #####:  351:      if (state->discard[player][i] == card) count++;
    #####:  352:    }
        -:  353:
    #####:  354:  return count;
        -:  355:}
        -:  356:
        -:  357:int whoseTurn(struct gameState *state) {
        1:  358:  return state->whoseTurn;
        -:  359:}
        -:  360:
        -:  361:
        -:  362:int endTurn(struct gameState *state) {
        -:  363:  int k;
        -:  364:  int i;
    #####:  365:  int currentPlayer = whoseTurn(state);
        -:  366:  
        -:  367:  //Discard hand
    #####:  368:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  369:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  370:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  371:  }
    #####:  372:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  373:    
        -:  374:  //Code for determining the player
    #####:  375:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  376:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  377:  }
        -:  378:  else{
    #####:  379:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  380:  }
        -:  381:
    #####:  382:  state->outpostPlayed = 0;
    #####:  383:  state->phase = 0;
    #####:  384:  state->numActions = 1;
    #####:  385:  state->coins = 0;
    #####:  386:  state->numBuys = 1;
    #####:  387:  state->playedCardCount = 0;
    #####:  388:  state->handCount[state->whoseTurn] = 0;
        -:  389:
        -:  390:  //int k; move to top
        -:  391:  //Next player draws hand
    #####:  392:  for (k = 0; k < 5; k++){
    #####:  393:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  394:  }
        -:  395:
        -:  396:  //Update money
    #####:  397:  updateCoins(state->whoseTurn, state , 0);
        -:  398:
    #####:  399:  return 0;
        -:  400:}
        -:  401:
        -:  402:
        -:  403:
        -:  404:
        -:  405:
        -:  406:int isGameOver(struct gameState *state) {
        -:  407:  int i;
        -:  408:  int j;
        -:  409:  
        -:  410:  //if stack of Province cards is empty, the game ends
        2:  411:  if (state->supplyCount[province] == 0)
        -:  412:    {
    #####:  413:      return 1;
        -:  414:    }
        -:  415:
        -:  416:  //if three supply pile are at 0, the game ends
        2:  417:  j = 0;
      104:  418:  for (i = 0; i < 25; i++)
        -:  419:    {
       50:  420:      if (state->supplyCount[i] == 0)
        -:  421:  {
        3:  422:    j++;
        3:  423:  }
       50:  424:    }
        2:  425:  if ( j >= 3)
        -:  426:    {
        1:  427:      return 1;
        -:  428:    }
        -:  429:
        1:  430:  return 0;
        2:  431:}
        -:  432:
        -:  433:int scoreFor (int player, struct gameState *state) {
        -:  434:
        -:  435:  int i;
    #####:  436:  int score = 0;
        -:  437:  //score from hand
    #####:  438:  for (i = 0; i < state->handCount[player]; i++)
        -:  439:    {
    #####:  440:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  441:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  442:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  443:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  444:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  445:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  446:    }
        -:  447:
        -:  448:  //score from discard
    #####:  449:  for (i = 0; i < state->discardCount[player]; i++)
        -:  450:    {
    #####:  451:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  452:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  453:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  454:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  455:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  456:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  457:    }
        -:  458:
        -:  459:  //score from deck
    #####:  460:  for (i = 0; i < state->discardCount[player]; i++)
        -:  461:    {
    #####:  462:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  463:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  464:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  465:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  466:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  467:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  468:    }
        -:  469:
    #####:  470:  return score;
        -:  471:}
        -:  472:
        -:  473:
        -:  474:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  475:  int i;  
        -:  476:  int j;
        -:  477:  int highScore;
        -:  478:  int currentPlayer;
        -:  479:
        -:  480:  //get score for each player
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  482:    {
        -:  483:      //set unused player scores to -9999
    #####:  484:      if (i >= state->numPlayers)
        -:  485:  {
    #####:  486:    players[i] = -9999;
    #####:  487:  }
        -:  488:      else
        -:  489:  {
    #####:  490:    players[i] = scoreFor (i, state);
        -:  491:  }
    #####:  492:    }
        -:  493:
        -:  494:  //find highest score
    #####:  495:  j = 0;
    #####:  496:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  497:    {
    #####:  498:      if (players[i] > players[j])
        -:  499:  {
    #####:  500:    j = i;
    #####:  501:  }
    #####:  502:    }
    #####:  503:  highScore = players[j];
        -:  504:
        -:  505:  //add 1 to players who had less turns
    #####:  506:  currentPlayer = whoseTurn(state);
    #####:  507:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  508:    {
    #####:  509:      if ( players[i] == highScore && i > currentPlayer )
        -:  510:  {
    #####:  511:    players[i]++;
    #####:  512:  }
    #####:  513:    }
        -:  514:
        -:  515:  //find new highest score
    #####:  516:  j = 0;
    #####:  517:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  518:    {
    #####:  519:      if ( players[i] > players[j] )
        -:  520:  {
    #####:  521:    j = i;
    #####:  522:  }
    #####:  523:    }
    #####:  524:  highScore = players[j];
        -:  525:
        -:  526:  //set winners in array to 1 and rest to 0
    #####:  527:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  528:    {
    #####:  529:      if ( players[i] == highScore )
        -:  530:  {
    #####:  531:    players[i] = 1;
    #####:  532:  }
        -:  533:      else
        -:  534:  {
    #####:  535:    players[i] = 0;
        -:  536:  }
    #####:  537:    }
        -:  538:
    #####:  539:  return 0;
        -:  540:}
        -:  541:
        -:  542:
        -:  543:int drawCard(int player, struct gameState *state)
        -:  544:{ int count;
        -:  545:  int deckCounter;
      570:  546:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  547:    
        -:  548:    //Step 1 Shuffle the discard pile back into a deck
        -:  549:    int i;
        -:  550:    //Move discard to deck
    #####:  551:    for (i = 0; i < state->discardCount[player];i++){
    #####:  552:      state->deck[player][i] = state->discard[player][i];
    #####:  553:      state->discard[player][i] = -1;
    #####:  554:    }
        -:  555:
    #####:  556:    state->deckCount[player] = state->discardCount[player];
    #####:  557:    state->discardCount[player] = 0;//Reset discard
        -:  558:
        -:  559:    //Shufffle the deck
    #####:  560:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  561:   
        -:  562:    if (DEBUG){//Debug statements
        -:  563:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  564:    }
        -:  565:    
    #####:  566:    state->discardCount[player] = 0;
        -:  567:
        -:  568:    //Step 2 Draw Card
    #####:  569:    count = state->handCount[player];//Get current player's hand count
        -:  570:    
        -:  571:    if (DEBUG){//Debug statements
        -:  572:      printf("Current hand count: %d\n", count);
        -:  573:    }
        -:  574:    
    #####:  575:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  576:
    #####:  577:    if (deckCounter == 0)
    #####:  578:      return -1;
        -:  579:
    #####:  580:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  581:    state->deckCount[player]--;
    #####:  582:    state->handCount[player]++;//Increment hand count
    #####:  583:  }
        -:  584:
        -:  585:  else{
      570:  586:    int count = state->handCount[player];//Get current hand count for player
        -:  587:    int deckCounter;
        -:  588:    if (DEBUG){//Debug statements
        -:  589:      printf("Current hand count: %d\n", count);
        -:  590:    }
        -:  591:
      570:  592:    deckCounter = state->deckCount[player];//Create holder for the deck count
      570:  593:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      570:  594:    state->deckCount[player]--;
      570:  595:    state->handCount[player]++;//Increment hand count
        -:  596:  }
        -:  597:
      570:  598:  return 0;
      570:  599:}
        -:  600:
        -:  601:
        -:  602:
        -:  603:
        -:  604:
        -:  605:
        -:  606:
        -:  607:int getCost(int cardNumber)
        -:  608:{
        1:  609:  switch( cardNumber ) 
        -:  610:    {
        -:  611:    case curse:
        1:  612:      return 0;
        -:  613:    case estate:
    #####:  614:      return 2;
        -:  615:    case duchy:
    #####:  616:      return 5;
        -:  617:    case province:
    #####:  618:      return 8;
        -:  619:    case copper:
    #####:  620:      return 0;
        -:  621:    case silver:
    #####:  622:      return 3;
        -:  623:    case gold:
    #####:  624:      return 6;
        -:  625:
        -:  626:
        -:  627:
        -:  628:
        -:  629:
        -:  630:    case adventurer:
    #####:  631:      return 6;
        -:  632:    
        -:  633:
        -:  634:
        -:  635:
        -:  636:    case council_room:
    #####:  637:      return 5;
        -:  638:    
        -:  639:
        -:  640:
        -:  641:    case feast:
    #####:  642:      return 4;
        -:  643:    
        -:  644:
        -:  645:
        -:  646:
        -:  647:
        -:  648:    case gardens:
    #####:  649:      return 4;
        -:  650:    case mine:
    #####:  651:      return 5;
        -:  652:    case remodel:
    #####:  653:      return 4;
        -:  654:
        -:  655:
        -:  656:
        -:  657:    case smithy:
    #####:  658:      return 4;
        -:  659:    
        -:  660:
        -:  661:
        -:  662:
        -:  663:
        -:  664:
        -:  665:    case village:
    #####:  666:      return 3;
        -:  667:    case baron:
    #####:  668:      return 4;
        -:  669:    case great_hall:
    #####:  670:      return 3;
        -:  671:    case minion:
    #####:  672:      return 5;
        -:  673:    case steward:
    #####:  674:      return 3;
        -:  675:    case tribute:
    #####:  676:      return 5;
        -:  677:    case ambassador:
    #####:  678:      return 3;
        -:  679:    case cutpurse:
    #####:  680:      return 4;
        -:  681:    case embargo: 
    #####:  682:      return 2;
        -:  683:    case outpost:
    #####:  684:      return 5;
        -:  685:    case salvager:
    #####:  686:      return 4;
        -:  687:    case sea_hag:
    #####:  688:      return 4;
        -:  689:    case treasure_map:
    #####:  690:      return 4;
        -:  691:    }
        -:  692:  
    #####:  693:  return -1;
        1:  694:}
        -:  695:
        -:  696:
        -:  697:
        -:  698:
        -:  699:
        -:  700:
        -:  701:// adventurerFunction created (REFACTORING)
        -:  702:// For the function Adventure, we should add a variable, and add a 
        -:  703:// parameter to the function. We should also add a structure, and a 
        -:  704:// pointer to a given variable
        -:  705:
        -:  706:void adventurerFunction(int currentPlayer, int temphand[], int z, struct gameState *state){
        -:  707:
        -:  708:  int cardDrawn;
    #####:  709:  int drawntreasure = 0;
        -:  710:
        -:  711:  // we should have 3 cards revealed from the deck instead of 2 that was originally
        -:  712:  // placed
        -:  713:
        -:  714:    // bug
        -:  715:    
    #####:  716: while(drawntreasure<3){
        -:  717:  
    #####:  718:  if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  719:    shuffle(currentPlayer, state);
    #####:  720:  }
    #####:  721:  drawCard(currentPlayer, state);
        -:  722:  
        -:  723:
        -:  724:
    #####:  725:  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  726:  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  727:    drawntreasure++;
        -:  728:  else{
    #####:  729:    temphand[z]=cardDrawn;
    #####:  730:    state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  731:    z++;
        -:  732:  }
        -:  733:  }
        -:  734:
        -:  735:
        -:  736:    // here we omit the return 0 as it is not required as given previoulsy in the case
    #####:  737:      while(z-1 >=0){
    #####:  738:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  739:      z=z-1;
        -:  740:      }
    #####:  741:    }
        -:  742:
        -:  743:
        -:  744:// FunctionSmithy created (Refactored)
        -:  745:
        -:  746:void smithyFunction(int currentPlayer, int handPos,struct gameState *state){
        -:  747:
        -:  748:   // for loop enforced in function
        -:  749:
        -:  750:    // bug detected
    #####:  751:  for ( int i = 0; i<4;i++)
        -:  752:  {
        -:  753:
    #####:  754:    drawCard(currentPlayer,state);
        -:  755:
    #####:  756:  }
        -:  757:
        -:  758:        //discard card from hand
    #####:  759:        discardCard(handPos, currentPlayer,state,0);
        -:  760:
        -:  761:        // Since void function we dont return 0
    #####:  762:}
        -:  763:
        -:  764:
        -:  765:
        -:  766:// function_council_room created (refactored)
        -:  767:
        -:  768:void council_roomFunction( int currentPlayer, int handPos, struct gameState *state){
        -:  769:
        -:  770:    // bug detected
        -:  771:   
    #####:  772:   for( int i = 0; i<5 ; i++)
        -:  773:    {
        -:  774:
    #####:  775:      drawCard(currentPlayer,state);
    #####:  776:    }
        -:  777:
        -:  778:      //+1 Buy
    #####:  779:    state->numBuys++;
        -:  780:
        -:  781:
        -:  782:      //Each other player draws a card
    #####:  783:      for (int i = 0; i < state->numPlayers; i++)
        -:  784:  {
    #####:  785:    if ( i != currentPlayer )
        -:  786:      {
    #####:  787:        drawCard(i, state);
    #####:  788:      }
    #####:  789:  }
        -:  790:
        -:  791:  // put played card in placed card pile
    #####:  792:  discardCard(handPos,currentPlayer,state, 0);
        -:  793:
    #####:  794:}
        -:  795:
        -:  796:// functionSalvager created(refactored)
        -:  797:
        -:  798:void salvagerFunction(int choice1,int handPos,int currentPlayer,struct gameState *state)
        -:  799:{
        -:  800:  
        -:  801:
        -:  802:  //+1 buy
    #####:  803:      state->numBuys++;
        -:  804:      
    #####:  805:      if (choice1)
        -:  806:  {
        -:  807:    //gain coins equal to trashed card
    #####:  808:    state->coins = state->coins + getCost( handCard(choice1, state) );
        -:  809:   
        -:  810:    //trash card
    #####:  811:    discardCard(choice1, currentPlayer, state, 1);  
    #####:  812:  }
        -:  813:      
        -:  814:      //discard card
    #####:  815:      discardCard(handPos, currentPlayer, state, 0);
        -:  816:    
    #####:  817:}
        -:  818:
        -:  819:
        -:  820:
        -:  821:
        -:  822:// outpostFunction (REFACTORED)
        -:  823:void outpostFunction(int handPos,int currentPlayer, struct gameState *state){
        -:  824:
        -:  825: //bug 
        -:  826:
        -:  827:  //set outpost flag
    #####:  828:      state->outpostPlayed++;
        -:  829:      
        -:  830:      //discard card
    #####:  831:      discardCard(handPos, currentPlayer, state, 0);
        -:  832:  
    #####:  833:}
        -:  834:
        -:  835:
        -:  836:
        -:  837:
        -:  838:
        -:  839:
        -:  840:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  841:{
        -:  842:  int i;
        -:  843:  int j;
        -:  844:  int k;
        -:  845:  int x;
        -:  846:  int index;
        1:  847:  int currentPlayer = whoseTurn(state);
        1:  848:  int nextPlayer = currentPlayer + 1;
        -:  849:
        1:  850:  int tributeRevealedCards[2] = {-1, -1};
        -:  851:  int temphand[MAX_HAND];// moved above the if statement
        1:  852:  int drawntreasure=0;
        -:  853:  int cardDrawn;
        1:  854:  int z = 0;// this is the counter for the temp hand
        1:  855:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  856:    nextPlayer = 0;
    #####:  857:  }
        -:  858:  
        -:  859:  
        -:  860:  //uses switch to select card and perform actions
        -:  861:  
        -:  862:
        -:  863:
        -:  864:
        1:  865:  switch( card ) 
        -:  866:    {
        -:  867:    
        -:  868:
        -:  869:
        -:  870:/*********************************************************************/
        -:  871:
        -:  872:
        -:  873:
        -:  874:
        -:  875:    case adventurer:
        -:  876:    // CALL THE FUNCTION
    #####:  877:        adventurerFunction(currentPlayer,temphand,z,state);
    #####:  878:        return 0; 
        -:  879:
        -:  880:
        -:  881:/*********************************************************************/
        -:  882:
        -:  883:
        -:  884:
        -:  885:// call the council_room function
        -:  886:
        -:  887:    case council_room:
    #####:  888:          council_roomFunction(currentPlayer,handPos,state);
    #####:  889:          return 0; 
        -:  890:
        -:  891:
        -:  892:
        -:  893:      
        -:  894:   
        -:  895:
        -:  896:
        -:  897:
        -:  898:/*********************************************************************/
        -:  899:
        -:  900:    
        -:  901:      
        -:  902:
        -:  903:
        -:  904:
        -:  905:    case feast:
        -:  906:      //gain card with cost up to 5
        -:  907:      //Backup hand
       14:  908:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        6:  909:  temphand[i] = state->hand[currentPlayer][i];//Backup card
        6:  910:  state->hand[currentPlayer][i] = -1;//Set to nothing
        6:  911:      }
        -:  912:      //Backup hand
        -:  913:
        -:  914:      //Update Coins for Buy
        1:  915:      updateCoins(currentPlayer, state, 5);
        1:  916:      x = 1;//Condition to loop on
        4:  917:      while( x == 1) {//Buy one card
        1:  918:  if (supplyCount(choice1, state) <= 0){
        -:  919:    if (DEBUG)
        -:  920:      printf("None of that card left, sorry!\n");
        -:  921:
        -:  922:    if (DEBUG){
        -:  923:      printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  924:    }
    #####:  925:  }
        1:  926:  else if (state->coins < getCost(choice1)){
    #####:  927:    printf("That card is too expensive!\n");
        -:  928:
        -:  929:    if (DEBUG){
        -:  930:      printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  931:    }
    #####:  932:  }
        -:  933:  else{
        -:  934:
        -:  935:    if (DEBUG){
        -:  936:      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  937:    }
        -:  938:
        1:  939:    gainCard(choice1, state, 0, currentPlayer);//Gain the card
        1:  940:    x = 0;//No more buying cards
        -:  941:
        -:  942:    if (DEBUG){
        -:  943:      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  944:    }
        -:  945:
        -:  946:  }
        -:  947:      }     
        -:  948:
        -:  949:      //Reset Hand
       14:  950:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        6:  951:  state->hand[currentPlayer][i] = temphand[i];
        6:  952:  temphand[i] = -1;
        6:  953:      }
        -:  954:      //Reset Hand
        -:  955:            
        1:  956:      return 0;
        -:  957:      
        -:  958:    
        -:  959:/*********************************************************************/
        -:  960:
        -:  961:
        -:  962:
        -:  963:    case gardens:
    #####:  964:      return -1;
        -:  965:      
        -:  966:   
        -:  967:/*********************************************************************/
        -:  968:
        -:  969:
        -:  970:
        -:  971:    case mine:
    #####:  972:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  973:
    #####:  974:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  975:  {
    #####:  976:    return -1;
        -:  977:  }
        -:  978:    
    #####:  979:      if (choice2 > treasure_map || choice2 < curse)
        -:  980:  {
    #####:  981:    return -1;
        -:  982:  }
        -:  983:
    #####:  984:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  985:  {
    #####:  986:    return -1;
        -:  987:  }
        -:  988:
    #####:  989:      gainCard(choice2, state, 2, currentPlayer);
        -:  990:
        -:  991:      //discard card from hand
    #####:  992:      discardCard(handPos, currentPlayer, state, 0);
        -:  993:
        -:  994:      //discard trashed card
    #####:  995:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  996:  {
    #####:  997:    if (state->hand[currentPlayer][i] == j)
        -:  998:      {
    #####:  999:        discardCard(i, currentPlayer, state, 0);      
    #####: 1000:        break;
        -: 1001:      }
    #####: 1002:  }
        -: 1003:      
    #####: 1004:      return 0;
        -: 1005:      
        -: 1006:    /*********************************************************************/
        -: 1007:
        -: 1008:
        -: 1009:
        -: 1010:
        -: 1011:    case remodel:
    #####: 1012:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1013:
    #####: 1014:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -: 1015:  {
    #####: 1016:    return -1;
        -: 1017:  }
        -: 1018:
    #####: 1019:      gainCard(choice2, state, 0, currentPlayer);
        -: 1020:
        -: 1021:      //discard card from hand
    #####: 1022:      discardCard(handPos, currentPlayer, state, 0);
        -: 1023:
        -: 1024:      //discard trashed card
    #####: 1025:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1026:  {
    #####: 1027:    if (state->hand[currentPlayer][i] == j)
        -: 1028:      {
    #####: 1029:        discardCard(i, currentPlayer, state, 0);      
    #####: 1030:        break;
        -: 1031:      }
    #####: 1032:  }
        -: 1033:
        -: 1034:
    #####: 1035:      return 0;
        -: 1036:    
        -: 1037:    
        -: 1038:
        -: 1039:
        -: 1040:
        -: 1041:
        -: 1042:
        -: 1043:/*********************************************************************/
        -: 1044:
        -: 1045:   
        -: 1046:    
        -: 1047:
        -: 1048:
        -: 1049:      case smithy:
    #####: 1050:        smithyFunction(currentPlayer,handPos,state);
    #####: 1051:        return 0 ; 
        -: 1052:
        -: 1053:
        -: 1054:/*********************************************************************/
        -: 1055:
        -: 1056:
        -: 1057:
        -: 1058:
        -: 1059:    case village:
        -: 1060:      //+1 Card
    #####: 1061:      drawCard(currentPlayer, state);
        -: 1062:      
        -: 1063:      //+2 Actions
    #####: 1064:      state->numActions = state->numActions + 2;
        -: 1065:      
        -: 1066:      //discard played card from hand
    #####: 1067:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1068:      return 0;
        -: 1069:    
        -: 1070:
        -: 1071:
        -: 1072:/*********************************************************************/
        -: 1073:
        -: 1074:
        -: 1075:
        -: 1076:
        -: 1077:
        -: 1078:    case baron:
    #####: 1079:      state->numBuys++;//Increase buys by 1!
    #####: 1080:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####: 1081:  int p = 0;//Iterator for hand!
    #####: 1082:  int card_not_discarded = 1;//Flag for discard set!
    #####: 1083:  while(card_not_discarded){
    #####: 1084:    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####: 1085:      state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1086:      state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1087:      state->discardCount[currentPlayer]++;
    #####: 1088:      for (;p < state->handCount[currentPlayer]; p++){
    #####: 1089:        state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####: 1090:      }
    #####: 1091:      state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1092:      state->handCount[currentPlayer]--;
    #####: 1093:      card_not_discarded = 0;//Exit the loop
    #####: 1094:    }
    #####: 1095:    else if (p > state->handCount[currentPlayer]){
        -: 1096:      if(DEBUG) {
        -: 1097:        printf("No estate cards in your hand, invalid choice\n");
        -: 1098:        printf("Must gain an estate if there are any\n");
        -: 1099:      }
    #####: 1100:      if (supplyCount(estate, state) > 0){
    #####: 1101:        gainCard(estate, state, 0, currentPlayer);
    #####: 1102:        state->supplyCount[estate]--;//Decrement estates
    #####: 1103:        if (supplyCount(estate, state) == 0){
    #####: 1104:    isGameOver(state);
    #####: 1105:        }
    #####: 1106:      }
    #####: 1107:      card_not_discarded = 0;//Exit the loop
    #####: 1108:    }
        -: 1109:          
        -: 1110:    else{
    #####: 1111:      p++;//Next card
        -: 1112:    }
        -: 1113:  }
    #####: 1114:      }
        -: 1115:          
        -: 1116:      else{
    #####: 1117:  if (supplyCount(estate, state) > 0){
    #####: 1118:    gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1119:    state->supplyCount[estate]--;//Decrement Estates
    #####: 1120:    if (supplyCount(estate, state) == 0){
    #####: 1121:      isGameOver(state);
    #####: 1122:    }
    #####: 1123:  }
        -: 1124:      }
        -: 1125:      
        -: 1126:      
    #####: 1127:      return 0;
        -: 1128:    
        -: 1129:    
        -: 1130:
        -: 1131:/*********************************************************************/
        -: 1132:
        -: 1133:
        -: 1134:
        -: 1135:
        -: 1136:    case great_hall:
        -: 1137:      //+1 Card
    #####: 1138:      drawCard(currentPlayer, state);
        -: 1139:      
        -: 1140:      //+1 Actions
    #####: 1141:      state->numActions++;
        -: 1142:      
        -: 1143:      //discard card from hand
    #####: 1144:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1145:      return 0;
        -: 1146:    
        -: 1147:    
        -: 1148:
        -: 1149:
        -: 1150:/*********************************************************************/
        -: 1151:
        -: 1152:
        -: 1153:
        -: 1154:
        -: 1155:    case minion:
        -: 1156:      //+1 action
    #####: 1157:      state->numActions++;
        -: 1158:      
        -: 1159:      //discard card from hand
    #####: 1160:      discardCard(handPos, currentPlayer, state, 0);
        -: 1161:      
    #####: 1162:      if (choice1)    //+2 coins
        -: 1163:  {
    #####: 1164:    state->coins = state->coins + 2;
    #####: 1165:  }
        -: 1166:      
    #####: 1167:      else if (choice2)   //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1168:  {
        -: 1169:    //discard hand
    #####: 1170:    while(numHandCards(state) > 0)
        -: 1171:      {
    #####: 1172:        discardCard(handPos, currentPlayer, state, 0);
        -: 1173:      }
        -: 1174:        
        -: 1175:    //draw 4
    #####: 1176:    for (i = 0; i < 4; i++)
        -: 1177:      {
    #####: 1178:        drawCard(currentPlayer, state);
    #####: 1179:      }
        -: 1180:        
        -: 1181:    //other players discard hand and redraw if hand size > 4
    #####: 1182:    for (i = 0; i < state->numPlayers; i++)
        -: 1183:      {
    #####: 1184:        if (i != currentPlayer)
        -: 1185:    {
    #####: 1186:      if ( state->handCount[i] > 4 )
        -: 1187:        {
        -: 1188:          //discard hand
    #####: 1189:          while( state->handCount[i] > 0 )
        -: 1190:      {
    #####: 1191:        discardCard(handPos, i, state, 0);
        -: 1192:      }
        -: 1193:              
        -: 1194:          //draw 4
    #####: 1195:          for (j = 0; j < 4; j++)
        -: 1196:      {
    #####: 1197:        drawCard(i, state);
    #####: 1198:      }
    #####: 1199:        }
    #####: 1200:    }
    #####: 1201:      }
        -: 1202:        
    #####: 1203:  }
    #####: 1204:      return 0;
        -: 1205:    
        -: 1206:   
        -: 1207:
        -: 1208:
        -: 1209:
        -: 1210:
        -: 1211:/*********************************************************************/
        -: 1212:
        -: 1213:
        -: 1214:
        -: 1215:
        -: 1216:    case steward:
    #####: 1217:      if (choice1 == 1)
        -: 1218:  {
        -: 1219:    //+2 cards
    #####: 1220:    drawCard(currentPlayer, state);
    #####: 1221:    drawCard(currentPlayer, state);
    #####: 1222:  }
    #####: 1223:      else if (choice1 == 2)
        -: 1224:  {
        -: 1225:    //+2 coins
    #####: 1226:    state->coins = state->coins + 2;
    #####: 1227:  }
        -: 1228:      else
        -: 1229:  {
        -: 1230:    //trash 2 cards in hand
    #####: 1231:    discardCard(choice2, currentPlayer, state, 1);
    #####: 1232:    discardCard(choice3, currentPlayer, state, 1);
        -: 1233:  }
        -: 1234:      
        -: 1235:      //discard card from hand
    #####: 1236:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1237:      return 0;
        -: 1238:    
        -: 1239:    
        -: 1240:
        -: 1241:
        -: 1242:
        -: 1243:/**********************************************************************/
        -: 1244:
        -: 1245:
        -: 1246:
        -: 1247:
        -: 1248:
        -: 1249:
        -: 1250:
        -: 1251:
        -: 1252:    case tribute:
    #####: 1253:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1254:  if (state->deckCount[nextPlayer] > 0){
    #####: 1255:    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1256:    state->deckCount[nextPlayer]--;
    #####: 1257:  }
    #####: 1258:  else if (state->discardCount[nextPlayer] > 0){
    #####: 1259:    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1260:    state->discardCount[nextPlayer]--;
    #####: 1261:  }
        -: 1262:  else{
        -: 1263:    //No Card to Reveal
        -: 1264:    if (DEBUG){
        -: 1265:      printf("No cards to reveal\n");
        -: 1266:    }
        -: 1267:  }
    #####: 1268:      }
        -: 1269:      
        -: 1270:      else{
    #####: 1271:  if (state->deckCount[nextPlayer] == 0){
    #####: 1272:    for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1273:      state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1274:      state->deckCount[nextPlayer]++;
    #####: 1275:      state->discard[nextPlayer][i] = -1;
    #####: 1276:      state->discardCount[nextPlayer]--;
    #####: 1277:    }
        -: 1278:          
    #####: 1279:    shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1280:  } 
    #####: 1281:  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1282:  state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1283:  state->deckCount[nextPlayer]--;
    #####: 1284:  tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1285:  state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1286:  state->deckCount[nextPlayer]--;
        -: 1287:      }    
        -: 1288:           
    #####: 1289:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1290:  state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1291:  state->playedCardCount++;
    #####: 1292:  tributeRevealedCards[1] = -1;
    #####: 1293:      }
        -: 1294:
    #####: 1295:      for (i = 0; i <= 2; i ++){
    #####: 1296:  if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1297:    state->coins += 2;
    #####: 1298:  }
        -: 1299:        
    #####: 1300:  else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1301:    drawCard(currentPlayer, state);
    #####: 1302:    drawCard(currentPlayer, state);
    #####: 1303:  }
        -: 1304:  else{//Action Card
    #####: 1305:    state->numActions = state->numActions + 2;
        -: 1306:  }
    #####: 1307:      }
        -: 1308:      
    #####: 1309:      return 0;
        -: 1310:    
        -: 1311:   
        -: 1312:
        -: 1313:/*********************************************************************/
        -: 1314:
        -: 1315:
        -: 1316:
        -: 1317:
        -: 1318:
        -: 1319:    case ambassador:
    #####: 1320:      j = 0;    //used to check if player has enough cards to discard
        -: 1321:
    #####: 1322:      if (choice2 > 2 || choice2 < 0)
        -: 1323:  {
    #####: 1324:    return -1;        
        -: 1325:  }
        -: 1326:
    #####: 1327:      if (choice1 == handPos)
        -: 1328:  {
    #####: 1329:    return -1;
        -: 1330:  }
        -: 1331:
    #####: 1332:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1333:  {
    #####: 1334:    if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1335:      {
    #####: 1336:        j++;
    #####: 1337:      }
    #####: 1338:  }
    #####: 1339:      if (j < choice2)
        -: 1340:  {
    #####: 1341:    return -1;        
        -: 1342:  }
        -: 1343:
        -: 1344:      if (DEBUG) 
        -: 1345:  printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1346:
        -: 1347:      //increase supply count for choosen card by amount being discarded
    #####: 1348:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1349:      
        -: 1350:      //each other player gains a copy of revealed card
    #####: 1351:      for (i = 0; i < state->numPlayers; i++)
        -: 1352:  {
    #####: 1353:    if (i != currentPlayer)
        -: 1354:      {
    #####: 1355:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1356:      }
    #####: 1357:  }
        -: 1358:
        -: 1359:      //discard played card from hand
    #####: 1360:      discardCard(handPos, currentPlayer, state, 0);      
        -: 1361:
        -: 1362:      //trash copies of cards returned to supply
    #####: 1363:      for (j = 0; j < choice2; j++)
        -: 1364:  {
    #####: 1365:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1366:      {
    #####: 1367:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1368:    {
    #####: 1369:      discardCard(i, currentPlayer, state, 1);
    #####: 1370:      break;
        -: 1371:    }
    #####: 1372:      }
    #####: 1373:  }     
        -: 1374:
    #####: 1375:      return 0;
        -: 1376:    
        -: 1377:   
        -: 1378:
        -: 1379:/********************************/
        -: 1380:
        -: 1381:
        -: 1382:
        -: 1383:
        -: 1384:
        -: 1385:
        -: 1386:    case cutpurse:
        -: 1387:
    #####: 1388:      updateCoins(currentPlayer, state, 2);
    #####: 1389:      for (i = 0; i < state->numPlayers; i++)
        -: 1390:  {
    #####: 1391:    if (i != currentPlayer)
        -: 1392:      {
    #####: 1393:        for (j = 0; j < state->handCount[i]; j++)
        -: 1394:    {
    #####: 1395:      if (state->hand[i][j] == copper)
        -: 1396:        {
    #####: 1397:          discardCard(j, i, state, 0);
    #####: 1398:          break;
        -: 1399:        }
    #####: 1400:      if (j == state->handCount[i])
        -: 1401:        {
    #####: 1402:          for (k = 0; k < state->handCount[i]; k++)
        -: 1403:      {
        -: 1404:        if (DEBUG)
        -: 1405:          printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1406:      } 
    #####: 1407:          break;
        -: 1408:        }   
    #####: 1409:    }
        -: 1410:          
    #####: 1411:      }
        -: 1412:        
    #####: 1413:  }       
        -: 1414:
        -: 1415:      //discard played card from hand
    #####: 1416:      discardCard(handPos, currentPlayer, state, 0);      
        -: 1417:
    #####: 1418:      return 0;
        -: 1419:
        -: 1420:    
        -: 1421:    
        -: 1422:
        -: 1423:
        -: 1424:/********************************/
        -: 1425:
        -: 1426:
        -: 1427:
        -: 1428:
        -: 1429:
        -: 1430:
        -: 1431:
        -: 1432:
        -: 1433:
        -: 1434:    case embargo: 
        -: 1435:      //+2 Coins
    #####: 1436:      state->coins = state->coins + 2;
        -: 1437:      
        -: 1438:      //see if selected pile is in play
    #####: 1439:      if ( state->supplyCount[choice1] == -1 )
        -: 1440:  {
    #####: 1441:    return -1;
        -: 1442:  }
        -: 1443:      
        -: 1444:
    #####: 1445:       state->embargoTokens[choice1]++;
        -: 1446:      
        -: 1447:      //trash card
    #####: 1448:      discardCard(handPos, currentPlayer, state, 1);    
    #####: 1449:      return 0;
        -: 1450:    
        -: 1451:
        -: 1452:/********************************/
        -: 1453:
        -: 1454:
        -: 1455:   
        -: 1456:
        -: 1457:      
        -: 1458:
        -: 1459:
        -: 1460:
        -: 1461:      // call outpost function 
        -: 1462:      case outpost:
    #####: 1463:      outpostFunction(currentPlayer,handPos,state);
    #####: 1464:      return 0;
        -: 1465:
        -: 1466:
        -: 1467:
        -: 1468:/********************************/
        -: 1469:
        -: 1470:
        -: 1471:
        -: 1472:
        -: 1473:      // call salvegerFunction
        -: 1474:      case salvager:
    #####: 1475:      salvagerFunction(currentPlayer,handPos,choice1,state);
    #####: 1476:      return 0 ;
        -: 1477:
        -: 1478:
        -: 1479:
        -: 1480:
        -: 1481:
        -: 1482:  /********************************/
        -: 1483:
        -: 1484:
        -: 1485:
        -: 1486:
        -: 1487:    
        -: 1488:
        -: 1489:
        -: 1490:
        -: 1491:
        -: 1492:
        -: 1493:    case sea_hag:
    #####: 1494:      for (i = 0; i < state->numPlayers; i++){
    #####: 1495:  if (i != currentPlayer){
    #####: 1496:    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];          state->deckCount[i]--;
    #####: 1497:    state->discardCount[i]++;
    #####: 1498:    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1499:  }
    #####: 1500:      }
    #####: 1501:      return 0;
        -: 1502:    
        -: 1503:   
        -: 1504:
        -: 1505:
        -: 1506:/********************************/
        -: 1507:
        -: 1508:
        -: 1509:
        -: 1510:
        -: 1511:    case treasure_map:
        -: 1512:      //search hand for another treasure_map
    #####: 1513:      index = -1;
    #####: 1514:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1515:  {
    #####: 1516:    if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1517:      {
    #####: 1518:        index = i;
    #####: 1519:        break;
        -: 1520:      }
    #####: 1521:  }
    #####: 1522:      if (index > -1)
        -: 1523:  {
        -: 1524:    //trash both treasure cards
    #####: 1525:    discardCard(handPos, currentPlayer, state, 1);
    #####: 1526:    discardCard(index, currentPlayer, state, 1);
        -: 1527:
        -: 1528:    //gain 4 Gold cards
    #####: 1529:    for (i = 0; i < 4; i++)
        -: 1530:      {
    #####: 1531:        gainCard(gold, state, 1, currentPlayer);
    #####: 1532:      }
        -: 1533:        
        -: 1534:    //return success
    #####: 1535:    return 1;
        -: 1536:  }
        -: 1537:      
        -: 1538:      //no second treasure_map found in hand
    #####: 1539:      return -1;
        -: 1540:    }
        -: 1541:  
    #####: 1542:  return -1;
        1: 1543:}
        -: 1544:
        -: 1545:/********************************/
        -: 1546:
        -: 1547:
        -: 1548:
        -: 1549:
        -: 1550:
        -: 1551:
        -: 1552:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1553:{
        -: 1554:  
        -: 1555:  //if card is not trashed, added to Played pile 
    #####: 1556:  if (trashFlag < 1)
        -: 1557:    {
        -: 1558:      //add card to played pile
    #####: 1559:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1560:      state->playedCardCount++;
    #####: 1561:    }
        -: 1562:  
        -: 1563:  //set played card to -1
    #####: 1564:  state->hand[currentPlayer][handPos] = -1;
        -: 1565:  
        -: 1566:  //remove card from player's hand
    #####: 1567:  if ( handPos == (state->handCount[currentPlayer] - 1) )   //last card in hand array is played
        -: 1568:    {
        -: 1569:      //reduce number of cards in hand
    #####: 1570:      state->handCount[currentPlayer]--;
    #####: 1571:    }
    #####: 1572:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1573:    {
        -: 1574:      //reduce number of cards in hand
    #####: 1575:      state->handCount[currentPlayer]--;
    #####: 1576:    }
        -: 1577:  else  
        -: 1578:    {
        -: 1579:      //replace discarded card with last card in hand
    #####: 1580:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1581:      //set last card to -1
    #####: 1582:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1583:      //reduce number of cards in hand
    #####: 1584:      state->handCount[currentPlayer]--;
        -: 1585:    }
        -: 1586:  
    #####: 1587:  return 0;
        -: 1588:}
        -: 1589:
        -: 1590:
        -: 1591:
        -: 1592:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1593:{
        -: 1594:  //Note: supplyPos is enum of choosen card
        -: 1595:  
        -: 1596:  //check if supply pile is empty (0) or card is not used in game (-1)
        6: 1597:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1598:    {
        1: 1599:      return -1;
        -: 1600:    }
        -: 1601:  
        -: 1602:  //added card for [whoseTurn] current player:
        -: 1603:  // toFlag = 0 : add to discard
        -: 1604:  // toFlag = 1 : add to deck
        -: 1605:  // toFlag = 2 : add to hand
        -: 1606:
        5: 1607:  if (toFlag == 1)
        -: 1608:    {
        1: 1609:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1610:      state->deckCount[player]++;
        1: 1611:    }
        4: 1612:  else if (toFlag == 2)
        -: 1613:    {
        1: 1614:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1615:      state->handCount[player]++;
        1: 1616:    }
        -: 1617:  else
        -: 1618:    {
        3: 1619:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        3: 1620:      state->discardCount[player]++;
        -: 1621:    }
        -: 1622:  
        -: 1623:  //decrease number in supply pile
        5: 1624:  state->supplyCount[supplyPos]--;
        -: 1625:   
        5: 1626:  return 0;
        6: 1627:}
        -: 1628:
        -: 1629:
        -: 1630:
        -: 1631:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1632:{
        -: 1633:  int i;
        -: 1634:  
        -: 1635:  //reset coin count
      445: 1636:  state->coins = 0;
        -: 1637:
        -: 1638:  //add coins for each Treasure card in player's hand
     4020: 1639:  for (i = 0; i < state->handCount[player]; i++)
        -: 1640:    {
     1565: 1641:      if (state->hand[player][i] == copper)
        -: 1642:  {
      786: 1643:    state->coins += 1;
      786: 1644:  }
      779: 1645:      else if (state->hand[player][i] == silver)
        -: 1646:  {
      330: 1647:    state->coins += 2;
      330: 1648:  }
      449: 1649:      else if (state->hand[player][i] == gold)
        -: 1650:  {
      330: 1651:    state->coins += 3;
      330: 1652:  } 
     1565: 1653:    } 
        -: 1654:
        -: 1655:  //add bonus
      445: 1656:  state->coins += bonus;
        -: 1657:
      445: 1658:  return 0;
        -: 1659:}
        -: 1660:
        -: 1661:
        -: 1662://end of dominion.c
        -: 1663:
cardtest2.c:
TESTING  smithyCard()

 The player_0 gains 3 cards
Test: FAILED
victory card piles is the same
Province Pile
Test: PASSED
Duchy Pile
Test: PASSED
Estate Pile
Test: PASSED

 kingdom card pile is the same
testing the cards piles . . . 
Test: PASSED
testing the cards piles . . . 
Test: PASSED
testing the cards piles . . . 
Test: PASSED
testing the cards piles . . . 
Test: PASSED
testing the cards piles . . . 
Test: PASSED
testing the cards piles . . . 
Test: PASSED
testing the cards piles . . . 
Test: PASSED
testing the cards piles . . . 
Test: PASSED
testing the cards piles . . . 
Test: PASSED
testing the cards piles . . . 
Test: PASSED

Player_1 remains the same
Hand Count
Test: PASSED
Deck Count
Test: PASSED

Test: Test Failed
Failed:  1
File 'cardtest2.c'
Lines executed:97.87% of 47
cardtest2.c:creating 'cardtest2.c.gcov'

File 'dominion.c'
Lines executed:28.46% of 650
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:6
        -:    0:Programs:1
        -:    1:
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include "rngs.h"
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:
        -:   10:
        -:   11:int compare(const void* a, const void* b) {
     3248:   12:  if (*(int*)a > *(int*)b)
    #####:   13:    return 1;
     3248:   14:  if (*(int*)a < *(int*)b)
     1160:   15:    return -1;
     2088:   16:  return 0;
     3248:   17:}
        -:   18:
        -:   19:
        -:   20:
        -:   21:struct gameState* newGame() {
    #####:   22:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   23:  return g;
        -:   24:}
        -:   25:
        -:   26:
        -:   27:
        -:   28:
        -:   29:
        -:   30:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   31:      int k8, int k9, int k10) {
    #####:   32:  int* k = malloc(10 * sizeof(int));
    #####:   33:  k[0] = k1;
    #####:   34:  k[1] = k2;
    #####:   35:  k[2] = k3;
    #####:   36:  k[3] = k4;
    #####:   37:  k[4] = k5;
    #####:   38:  k[5] = k6;
    #####:   39:  k[6] = k7;
    #####:   40:  k[7] = k8;
    #####:   41:  k[8] = k9;
    #####:   42:  k[9] = k10;
    #####:   43:  return k;
        -:   44:}
        -:   45:
        -:   46:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   47:       struct gameState *state) {
        -:   48:
        -:   49:  int i;
        -:   50:  int j;
        -:   51:  int it;     
        -:   52:  //set up random number generator
      115:   53:  SelectStream(1);
      115:   54:  PutSeed((long)randomSeed);
        -:   55:  
        -:   56:  //check number of players
      230:   57:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   58:    {
    #####:   59:      return -1;
        -:   60:    }
        -:   61:
        -:   62:  //set number of players
      115:   63:  state->numPlayers = numPlayers;
        -:   64:
        -:   65:  //check selected kingdom cards are different
     2530:   66:  for (i = 0; i < 10; i++)
        -:   67:    {
    25300:   68:      for (j = 0; j < 10; j++)
        -:   69:        {
    21850:   70:    if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   71:      {
    #####:   72:        return -1;
        -:   73:      }
    11500:   74:        }
     1150:   75:    }
        -:   76:
        -:   77:
        -:   78:  //initialize supply
        -:   79:  ///////////////////////////////
        -:   80:
        -:   81:  //set number of Curse cards
      115:   82:  if (numPlayers == 2)
        -:   83:    {
      115:   84:      state->supplyCount[curse] = 10;
      115:   85:    }
    #####:   86:  else if (numPlayers == 3)
        -:   87:    {
    #####:   88:      state->supplyCount[curse] = 20;
    #####:   89:    }
        -:   90:  else
        -:   91:    {
    #####:   92:      state->supplyCount[curse] = 30;
        -:   93:    }
        -:   94:
        -:   95:  //set number of Victory cards
      115:   96:  if (numPlayers == 2)
        -:   97:    {
      115:   98:      state->supplyCount[estate] = 8;
      115:   99:      state->supplyCount[duchy] = 8;
      115:  100:      state->supplyCount[province] = 8;
      115:  101:    }
        -:  102:  else
        -:  103:    {
    #####:  104:      state->supplyCount[estate] = 12;
    #####:  105:      state->supplyCount[duchy] = 12;
    #####:  106:      state->supplyCount[province] = 12;
        -:  107:    }
        -:  108:
        -:  109:  //set number of Treasure cards
      115:  110:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      115:  111:  state->supplyCount[silver] = 40;
      115:  112:  state->supplyCount[gold] = 30;
        -:  113:
        -:  114:  //set number of Kingdom cards
     4830:  115:  for (i = adventurer; i <= treasure_map; i++)        //loop all cards
        -:  116:    {
    37950:  117:      for (j = 0; j < 10; j++)              //loop chosen cards
        -:  118:  {
    17825:  119:    if (kingdomCards[j] == i)
        -:  120:      {
        -:  121:        //check if card is a 'Victory' Kingdom card
     2185:  122:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  123:    {
      230:  124:      if (numPlayers == 2){ 
      230:  125:        state->supplyCount[i] = 8; 
      230:  126:      }
    #####:  127:      else{ state->supplyCount[i] = 12; }
      230:  128:    }
        -:  129:        else
        -:  130:    {
      920:  131:      state->supplyCount[i] = 10;
        -:  132:    }
     1150:  133:        break;
        -:  134:      }
        -:  135:    else    //card is not in the set choosen for the game
        -:  136:      {
    16675:  137:        state->supplyCount[i] = -1;
        -:  138:      }
    16675:  139:  }
        -:  140:
     2300:  141:    }
        -:  142:
        -:  143:  ////////////////////////
        -:  144:  //supply intilization complete
        -:  145:
        -:  146:  //set player decks
      690:  147:  for (i = 0; i < numPlayers; i++)
        -:  148:    {
      230:  149:      state->deckCount[i] = 0;
     1840:  150:      for (j = 0; j < 3; j++)
        -:  151:  {
      690:  152:    state->deck[i][j] = estate;
      690:  153:    state->deckCount[i]++;
      690:  154:  }
     3680:  155:      for (j = 3; j < 10; j++)
        -:  156:  {
     1610:  157:    state->deck[i][j] = copper;
     1610:  158:    state->deckCount[i]++;    
     1610:  159:  }
      230:  160:    }
        -:  161:
        -:  162:  //shuffle player decks
      690:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
      230:  165:      if ( shuffle(i, state) < 0 )
        -:  166:  {
    #####:  167:    return -1;
        -:  168:  }
      230:  169:    }
        -:  170:
        -:  171:  //draw player hands
      690:  172:  for (i = 0; i < numPlayers; i++)
        -:  173:    {  
        -:  174:      //initialize hand size to zero
      230:  175:      state->handCount[i] = 0;
      230:  176:      state->discardCount[i] = 0;
        -:  177:      //draw 5 cards
        -:  178:      // for (j = 0; j < 5; j++)
        -:  179:      //  {
        -:  180:      //    drawCard(i, state);
        -:  181:      //  }
      230:  182:    }
        -:  183:  
        -:  184:  //set embargo tokens to 0 for all supply piles
     6440:  185:  for (i = 0; i <= treasure_map; i++)
        -:  186:    {
     3105:  187:      state->embargoTokens[i] = 0;
     3105:  188:    }
        -:  189:
        -:  190:  //initialize first player's turn
      115:  191:  state->outpostPlayed = 0;
      115:  192:  state->phase = 0;
      115:  193:  state->numActions = 1;
      115:  194:  state->numBuys = 1;
      115:  195:  state->playedCardCount = 0;
      115:  196:  state->whoseTurn = 0;
      115:  197:  state->handCount[state->whoseTurn] = 0;
        -:  198:  //int it; move to top
        -:  199:
        -:  200:  //Moved draw cards to here, only drawing at the start of a turn
     1380:  201:  for (it = 0; it < 5; it++){
      575:  202:    drawCard(state->whoseTurn, state);
      575:  203:  }
        -:  204:
      115:  205:  updateCoins(state->whoseTurn, state, 0);
        -:  206:
      115:  207:  return 0;
      115:  208:}
        -:  209:
        -:  210:int shuffle(int player, struct gameState *state) {
        -:  211: 
        -:  212:
        -:  213:  int newDeck[MAX_DECK];
      233:  214:  int newDeckPos = 0;
        -:  215:  int card;
        -:  216:  int i;
        -:  217:
      233:  218:  if (state->deckCount[player] < 1)
        1:  219:    return -1;
      232:  220:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  221:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  222:
     5104:  223:  while (state->deckCount[player] > 0) {
     2320:  224:    card = floor(Random() * state->deckCount[player]);
     2320:  225:    newDeck[newDeckPos] = state->deck[player][card];
     2320:  226:    newDeckPos++;
    16278:  227:    for (i = card; i < state->deckCount[player]-1; i++) {
     5819:  228:      state->deck[player][i] = state->deck[player][i+1];
     5819:  229:    }
     2320:  230:    state->deckCount[player]--;
        -:  231:  }
     5104:  232:  for (i = 0; i < newDeckPos; i++) {
     2320:  233:    state->deck[player][i] = newDeck[i];
     2320:  234:    state->deckCount[player]++;
     2320:  235:  }
        -:  236:
      232:  237:  return 0;
      233:  238:}
        -:  239:
        -:  240:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  241:{ 
        -:  242:  int card;
    #####:  243:  int coin_bonus = 0;     //tracks coins gain from actions
        -:  244:
        -:  245:  //check if it is the right phase
    #####:  246:  if (state->phase != 0)
        -:  247:    {
    #####:  248:      return -1;
        -:  249:    }
        -:  250:  
        -:  251:  //check if player has enough actions
    #####:  252:  if ( state->numActions < 1 )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:  
        -:  257:  //get card played
    #####:  258:  card = handCard(handPos, state);
        -:  259:  
        -:  260:  //check if selected card is an action
    #####:  261:  if ( card < adventurer || card > treasure_map )
        -:  262:    {
    #####:  263:      return -1;
        -:  264:    }
        -:  265:  
        -:  266:  //play card
    #####:  267:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  268:    {
    #####:  269:      return -1;
        -:  270:    }
        -:  271:  
        -:  272:  //reduce number of actions
    #####:  273:  state->numActions--;
        -:  274:
        -:  275:  //update coins (Treasure cards may be added with card draws)
    #####:  276:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  277:  
    #####:  278:  return 0;
    #####:  279:}
        -:  280:
        -:  281:int buyCard(int supplyPos, struct gameState *state) {
        -:  282:  int who;
        -:  283:  if (DEBUG){
        -:  284:    printf("Entering buyCard...\n");
        -:  285:  }
        -:  286:
        -:  287:  // I don't know what to do about the phase thing.
        -:  288:
    #####:  289:  who = state->whoseTurn;
        -:  290:
    #####:  291:  if (state->numBuys < 1){
        -:  292:    if (DEBUG)
        -:  293:      printf("You do not have any buys left\n");
    #####:  294:    return -1;
    #####:  295:  } else if (supplyCount(supplyPos, state) <1){
        -:  296:    if (DEBUG)
        -:  297:      printf("There are not any of that type of card left\n");
    #####:  298:    return -1;
    #####:  299:  } else if (state->coins < getCost(supplyPos)){
        -:  300:    if (DEBUG) 
        -:  301:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  302:    return -1;
        -:  303:  } else {
    #####:  304:    state->phase=1;
        -:  305:    //state->supplyCount[supplyPos]--;
    #####:  306:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  307:  
    #####:  308:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  309:    state->numBuys--;
        -:  310:    if (DEBUG)
        -:  311:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  312:  }
        -:  313:
        -:  314:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  315:  //state->discardCount[who]++;
        -:  316:    
    #####:  317:  return 0;
    #####:  318:}
        -:  319:
        -:  320:
        -:  321:
        -:  322:int numHandCards(struct gameState *state) {
    #####:  323:  return state->handCount[ whoseTurn(state) ];
        -:  324:}
        -:  325:
        -:  326:int handCard(int handPos, struct gameState *state) {
    #####:  327:  int currentPlayer = whoseTurn(state);
    #####:  328:  return state->hand[currentPlayer][handPos];
        -:  329:}
        -:  330:
        -:  331:int supplyCount(int card, struct gameState *state) {
        7:  332:  return state->supplyCount[card];
        -:  333:}
        -:  334:
        -:  335:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  336:  int i;
    #####:  337:  int count = 0;
        -:  338:
    #####:  339:  for (i = 0; i < state->deckCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->deck[player][i] == card) count++;
    #####:  342:    }
        -:  343:
    #####:  344:  for (i = 0; i < state->handCount[player]; i++)
        -:  345:    {
    #####:  346:      if (state->hand[player][i] == card) count++;
    #####:  347:    }
        -:  348:
    #####:  349:  for (i = 0; i < state->discardCount[player]; i++)
        -:  350:    {
    #####:  351:      if (state->discard[player][i] == card) count++;
    #####:  352:    }
        -:  353:
    #####:  354:  return count;
        -:  355:}
        -:  356:
        -:  357:int whoseTurn(struct gameState *state) {
        2:  358:  return state->whoseTurn;
        -:  359:}
        -:  360:
        -:  361:
        -:  362:int endTurn(struct gameState *state) {
        -:  363:  int k;
        -:  364:  int i;
    #####:  365:  int currentPlayer = whoseTurn(state);
        -:  366:  
        -:  367:  //Discard hand
    #####:  368:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  369:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  370:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  371:  }
    #####:  372:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  373:    
        -:  374:  //Code for determining the player
    #####:  375:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  376:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  377:  }
        -:  378:  else{
    #####:  379:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  380:  }
        -:  381:
    #####:  382:  state->outpostPlayed = 0;
    #####:  383:  state->phase = 0;
    #####:  384:  state->numActions = 1;
    #####:  385:  state->coins = 0;
    #####:  386:  state->numBuys = 1;
    #####:  387:  state->playedCardCount = 0;
    #####:  388:  state->handCount[state->whoseTurn] = 0;
        -:  389:
        -:  390:  //int k; move to top
        -:  391:  //Next player draws hand
    #####:  392:  for (k = 0; k < 5; k++){
    #####:  393:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  394:  }
        -:  395:
        -:  396:  //Update money
    #####:  397:  updateCoins(state->whoseTurn, state , 0);
        -:  398:
    #####:  399:  return 0;
        -:  400:}
        -:  401:
        -:  402:
        -:  403:
        -:  404:
        -:  405:
        -:  406:int isGameOver(struct gameState *state) {
        -:  407:  int i;
        -:  408:  int j;
        -:  409:  
        -:  410:  //if stack of Province cards is empty, the game ends
        2:  411:  if (state->supplyCount[province] == 0)
        -:  412:    {
    #####:  413:      return 1;
        -:  414:    }
        -:  415:
        -:  416:  //if three supply pile are at 0, the game ends
        2:  417:  j = 0;
      104:  418:  for (i = 0; i < 25; i++)
        -:  419:    {
       50:  420:      if (state->supplyCount[i] == 0)
        -:  421:  {
        3:  422:    j++;
        3:  423:  }
       50:  424:    }
        2:  425:  if ( j >= 3)
        -:  426:    {
        1:  427:      return 1;
        -:  428:    }
        -:  429:
        1:  430:  return 0;
        2:  431:}
        -:  432:
        -:  433:int scoreFor (int player, struct gameState *state) {
        -:  434:
        -:  435:  int i;
    #####:  436:  int score = 0;
        -:  437:  //score from hand
    #####:  438:  for (i = 0; i < state->handCount[player]; i++)
        -:  439:    {
    #####:  440:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  441:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  442:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  443:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  444:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  445:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  446:    }
        -:  447:
        -:  448:  //score from discard
    #####:  449:  for (i = 0; i < state->discardCount[player]; i++)
        -:  450:    {
    #####:  451:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  452:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  453:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  454:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  455:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  456:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  457:    }
        -:  458:
        -:  459:  //score from deck
    #####:  460:  for (i = 0; i < state->discardCount[player]; i++)
        -:  461:    {
    #####:  462:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  463:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  464:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  465:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  466:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  467:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  468:    }
        -:  469:
    #####:  470:  return score;
        -:  471:}
        -:  472:
        -:  473:
        -:  474:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  475:  int i;  
        -:  476:  int j;
        -:  477:  int highScore;
        -:  478:  int currentPlayer;
        -:  479:
        -:  480:  //get score for each player
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  482:    {
        -:  483:      //set unused player scores to -9999
    #####:  484:      if (i >= state->numPlayers)
        -:  485:  {
    #####:  486:    players[i] = -9999;
    #####:  487:  }
        -:  488:      else
        -:  489:  {
    #####:  490:    players[i] = scoreFor (i, state);
        -:  491:  }
    #####:  492:    }
        -:  493:
        -:  494:  //find highest score
    #####:  495:  j = 0;
    #####:  496:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  497:    {
    #####:  498:      if (players[i] > players[j])
        -:  499:  {
    #####:  500:    j = i;
    #####:  501:  }
    #####:  502:    }
    #####:  503:  highScore = players[j];
        -:  504:
        -:  505:  //add 1 to players who had less turns
    #####:  506:  currentPlayer = whoseTurn(state);
    #####:  507:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  508:    {
    #####:  509:      if ( players[i] == highScore && i > currentPlayer )
        -:  510:  {
    #####:  511:    players[i]++;
    #####:  512:  }
    #####:  513:    }
        -:  514:
        -:  515:  //find new highest score
    #####:  516:  j = 0;
    #####:  517:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  518:    {
    #####:  519:      if ( players[i] > players[j] )
        -:  520:  {
    #####:  521:    j = i;
    #####:  522:  }
    #####:  523:    }
    #####:  524:  highScore = players[j];
        -:  525:
        -:  526:  //set winners in array to 1 and rest to 0
    #####:  527:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  528:    {
    #####:  529:      if ( players[i] == highScore )
        -:  530:  {
    #####:  531:    players[i] = 1;
    #####:  532:  }
        -:  533:      else
        -:  534:  {
    #####:  535:    players[i] = 0;
        -:  536:  }
    #####:  537:    }
        -:  538:
    #####:  539:  return 0;
        -:  540:}
        -:  541:
        -:  542:
        -:  543:int drawCard(int player, struct gameState *state)
        -:  544:{ int count;
        -:  545:  int deckCounter;
      579:  546:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  547:    
        -:  548:    //Step 1 Shuffle the discard pile back into a deck
        -:  549:    int i;
        -:  550:    //Move discard to deck
    #####:  551:    for (i = 0; i < state->discardCount[player];i++){
    #####:  552:      state->deck[player][i] = state->discard[player][i];
    #####:  553:      state->discard[player][i] = -1;
    #####:  554:    }
        -:  555:
    #####:  556:    state->deckCount[player] = state->discardCount[player];
    #####:  557:    state->discardCount[player] = 0;//Reset discard
        -:  558:
        -:  559:    //Shufffle the deck
    #####:  560:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  561:   
        -:  562:    if (DEBUG){//Debug statements
        -:  563:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  564:    }
        -:  565:    
    #####:  566:    state->discardCount[player] = 0;
        -:  567:
        -:  568:    //Step 2 Draw Card
    #####:  569:    count = state->handCount[player];//Get current player's hand count
        -:  570:    
        -:  571:    if (DEBUG){//Debug statements
        -:  572:      printf("Current hand count: %d\n", count);
        -:  573:    }
        -:  574:    
    #####:  575:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  576:
    #####:  577:    if (deckCounter == 0)
    #####:  578:      return -1;
        -:  579:
    #####:  580:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  581:    state->deckCount[player]--;
    #####:  582:    state->handCount[player]++;//Increment hand count
    #####:  583:  }
        -:  584:
        -:  585:  else{
      579:  586:    int count = state->handCount[player];//Get current hand count for player
        -:  587:    int deckCounter;
        -:  588:    if (DEBUG){//Debug statements
        -:  589:      printf("Current hand count: %d\n", count);
        -:  590:    }
        -:  591:
      579:  592:    deckCounter = state->deckCount[player];//Create holder for the deck count
      579:  593:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      579:  594:    state->deckCount[player]--;
      579:  595:    state->handCount[player]++;//Increment hand count
        -:  596:  }
        -:  597:
      579:  598:  return 0;
      579:  599:}
        -:  600:
        -:  601:
        -:  602:
        -:  603:
        -:  604:
        -:  605:
        -:  606:
        -:  607:int getCost(int cardNumber)
        -:  608:{
        1:  609:  switch( cardNumber ) 
        -:  610:    {
        -:  611:    case curse:
        1:  612:      return 0;
        -:  613:    case estate:
    #####:  614:      return 2;
        -:  615:    case duchy:
    #####:  616:      return 5;
        -:  617:    case province:
    #####:  618:      return 8;
        -:  619:    case copper:
    #####:  620:      return 0;
        -:  621:    case silver:
    #####:  622:      return 3;
        -:  623:    case gold:
    #####:  624:      return 6;
        -:  625:
        -:  626:
        -:  627:
        -:  628:
        -:  629:
        -:  630:    case adventurer:
    #####:  631:      return 6;
        -:  632:    
        -:  633:
        -:  634:
        -:  635:
        -:  636:    case council_room:
    #####:  637:      return 5;
        -:  638:    
        -:  639:
        -:  640:
        -:  641:    case feast:
    #####:  642:      return 4;
        -:  643:    
        -:  644:
        -:  645:
        -:  646:
        -:  647:
        -:  648:    case gardens:
    #####:  649:      return 4;
        -:  650:    case mine:
    #####:  651:      return 5;
        -:  652:    case remodel:
    #####:  653:      return 4;
        -:  654:
        -:  655:
        -:  656:
        -:  657:    case smithy:
    #####:  658:      return 4;
        -:  659:    
        -:  660:
        -:  661:
        -:  662:
        -:  663:
        -:  664:
        -:  665:    case village:
    #####:  666:      return 3;
        -:  667:    case baron:
    #####:  668:      return 4;
        -:  669:    case great_hall:
    #####:  670:      return 3;
        -:  671:    case minion:
    #####:  672:      return 5;
        -:  673:    case steward:
    #####:  674:      return 3;
        -:  675:    case tribute:
    #####:  676:      return 5;
        -:  677:    case ambassador:
    #####:  678:      return 3;
        -:  679:    case cutpurse:
    #####:  680:      return 4;
        -:  681:    case embargo: 
    #####:  682:      return 2;
        -:  683:    case outpost:
    #####:  684:      return 5;
        -:  685:    case salvager:
    #####:  686:      return 4;
        -:  687:    case sea_hag:
    #####:  688:      return 4;
        -:  689:    case treasure_map:
    #####:  690:      return 4;
        -:  691:    }
        -:  692:  
    #####:  693:  return -1;
        1:  694:}
        -:  695:
        -:  696:
        -:  697:
        -:  698:
        -:  699:
        -:  700:
        -:  701:// adventurerFunction created (REFACTORING)
        -:  702:// For the function Adventure, we should add a variable, and add a 
        -:  703:// parameter to the function. We should also add a structure, and a 
        -:  704:// pointer to a given variable
        -:  705:
        -:  706:void adventurerFunction(int currentPlayer, int temphand[], int z, struct gameState *state){
        -:  707:
        -:  708:  int cardDrawn;
    #####:  709:  int drawntreasure = 0;
        -:  710:
        -:  711:  // we should have 3 cards revealed from the deck instead of 2 that was originally
        -:  712:  // placed
        -:  713:
        -:  714:    // bug
        -:  715:    
    #####:  716: while(drawntreasure<3){
        -:  717:  
    #####:  718:  if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  719:    shuffle(currentPlayer, state);
    #####:  720:  }
    #####:  721:  drawCard(currentPlayer, state);
        -:  722:  
        -:  723:
        -:  724:
    #####:  725:  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  726:  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  727:    drawntreasure++;
        -:  728:  else{
    #####:  729:    temphand[z]=cardDrawn;
    #####:  730:    state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  731:    z++;
        -:  732:  }
        -:  733:  }
        -:  734:
        -:  735:
        -:  736:    // here we omit the return 0 as it is not required as given previoulsy in the case
    #####:  737:      while(z-1 >=0){
    #####:  738:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  739:      z=z-1;
        -:  740:      }
    #####:  741:    }
        -:  742:
        -:  743:
        -:  744:// FunctionSmithy created (Refactored)
        -:  745:
        -:  746:void smithyFunction(int currentPlayer, int handPos,struct gameState *state){
        -:  747:
        -:  748:   // for loop enforced in function
        -:  749:
        -:  750:    // bug detected
       10:  751:  for ( int i = 0; i<4;i++)
        -:  752:  {
        -:  753:
        4:  754:    drawCard(currentPlayer,state);
        -:  755:
        4:  756:  }
        -:  757:
        -:  758:        //discard card from hand
        1:  759:        discardCard(handPos, currentPlayer,state,0);
        -:  760:
        -:  761:        // Since void function we dont return 0
        1:  762:}
        -:  763:
        -:  764:
        -:  765:
        -:  766:// function_council_room created (refactored)
        -:  767:
        -:  768:void council_roomFunction( int currentPlayer, int handPos, struct gameState *state){
        -:  769:
        -:  770:    // bug detected
        -:  771:   
    #####:  772:   for( int i = 0; i<5 ; i++)
        -:  773:    {
        -:  774:
    #####:  775:      drawCard(currentPlayer,state);
    #####:  776:    }
        -:  777:
        -:  778:      //+1 Buy
    #####:  779:    state->numBuys++;
        -:  780:
        -:  781:
        -:  782:      //Each other player draws a card
    #####:  783:      for (int i = 0; i < state->numPlayers; i++)
        -:  784:  {
    #####:  785:    if ( i != currentPlayer )
        -:  786:      {
    #####:  787:        drawCard(i, state);
    #####:  788:      }
    #####:  789:  }
        -:  790:
        -:  791:  // put played card in placed card pile
    #####:  792:  discardCard(handPos,currentPlayer,state, 0);
        -:  793:
    #####:  794:}
        -:  795:
        -:  796:// functionSalvager created(refactored)
        -:  797:
        -:  798:void salvagerFunction(int choice1,int handPos,int currentPlayer,struct gameState *state)
        -:  799:{
        -:  800:  
        -:  801:
        -:  802:  //+1 buy
    #####:  803:      state->numBuys++;
        -:  804:      
    #####:  805:      if (choice1)
        -:  806:  {
        -:  807:    //gain coins equal to trashed card
    #####:  808:    state->coins = state->coins + getCost( handCard(choice1, state) );
        -:  809:   
        -:  810:    //trash card
    #####:  811:    discardCard(choice1, currentPlayer, state, 1);  
    #####:  812:  }
        -:  813:      
        -:  814:      //discard card
    #####:  815:      discardCard(handPos, currentPlayer, state, 0);
        -:  816:    
    #####:  817:}
        -:  818:
        -:  819:
        -:  820:
        -:  821:
        -:  822:// outpostFunction (REFACTORED)
        -:  823:void outpostFunction(int handPos,int currentPlayer, struct gameState *state){
        -:  824:
        -:  825: //bug 
        -:  826:
        -:  827:  //set outpost flag
    #####:  828:      state->outpostPlayed++;
        -:  829:      
        -:  830:      //discard card
    #####:  831:      discardCard(handPos, currentPlayer, state, 0);
        -:  832:  
    #####:  833:}
        -:  834:
        -:  835:
        -:  836:
        -:  837:
        -:  838:
        -:  839:
        -:  840:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  841:{
        -:  842:  int i;
        -:  843:  int j;
        -:  844:  int k;
        -:  845:  int x;
        -:  846:  int index;
        2:  847:  int currentPlayer = whoseTurn(state);
        2:  848:  int nextPlayer = currentPlayer + 1;
        -:  849:
        2:  850:  int tributeRevealedCards[2] = {-1, -1};
        -:  851:  int temphand[MAX_HAND];// moved above the if statement
        2:  852:  int drawntreasure=0;
        -:  853:  int cardDrawn;
        2:  854:  int z = 0;// this is the counter for the temp hand
        2:  855:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  856:    nextPlayer = 0;
    #####:  857:  }
        -:  858:  
        -:  859:  
        -:  860:  //uses switch to select card and perform actions
        -:  861:  
        -:  862:
        -:  863:
        -:  864:
        2:  865:  switch( card ) 
        -:  866:    {
        -:  867:    
        -:  868:
        -:  869:
        -:  870:/*********************************************************************/
        -:  871:
        -:  872:
        -:  873:
        -:  874:
        -:  875:    case adventurer:
        -:  876:    // CALL THE FUNCTION
    #####:  877:        adventurerFunction(currentPlayer,temphand,z,state);
    #####:  878:        return 0; 
        -:  879:
        -:  880:
        -:  881:/*********************************************************************/
        -:  882:
        -:  883:
        -:  884:
        -:  885:// call the council_room function
        -:  886:
        -:  887:    case council_room:
    #####:  888:          council_roomFunction(currentPlayer,handPos,state);
    #####:  889:          return 0; 
        -:  890:
        -:  891:
        -:  892:
        -:  893:      
        -:  894:   
        -:  895:
        -:  896:
        -:  897:
        -:  898:/*********************************************************************/
        -:  899:
        -:  900:    
        -:  901:      
        -:  902:
        -:  903:
        -:  904:
        -:  905:    case feast:
        -:  906:      //gain card with cost up to 5
        -:  907:      //Backup hand
       14:  908:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        6:  909:  temphand[i] = state->hand[currentPlayer][i];//Backup card
        6:  910:  state->hand[currentPlayer][i] = -1;//Set to nothing
        6:  911:      }
        -:  912:      //Backup hand
        -:  913:
        -:  914:      //Update Coins for Buy
        1:  915:      updateCoins(currentPlayer, state, 5);
        1:  916:      x = 1;//Condition to loop on
        4:  917:      while( x == 1) {//Buy one card
        1:  918:  if (supplyCount(choice1, state) <= 0){
        -:  919:    if (DEBUG)
        -:  920:      printf("None of that card left, sorry!\n");
        -:  921:
        -:  922:    if (DEBUG){
        -:  923:      printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  924:    }
    #####:  925:  }
        1:  926:  else if (state->coins < getCost(choice1)){
    #####:  927:    printf("That card is too expensive!\n");
        -:  928:
        -:  929:    if (DEBUG){
        -:  930:      printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  931:    }
    #####:  932:  }
        -:  933:  else{
        -:  934:
        -:  935:    if (DEBUG){
        -:  936:      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  937:    }
        -:  938:
        1:  939:    gainCard(choice1, state, 0, currentPlayer);//Gain the card
        1:  940:    x = 0;//No more buying cards
        -:  941:
        -:  942:    if (DEBUG){
        -:  943:      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  944:    }
        -:  945:
        -:  946:  }
        -:  947:      }     
        -:  948:
        -:  949:      //Reset Hand
       14:  950:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        6:  951:  state->hand[currentPlayer][i] = temphand[i];
        6:  952:  temphand[i] = -1;
        6:  953:      }
        -:  954:      //Reset Hand
        -:  955:            
        1:  956:      return 0;
        -:  957:      
        -:  958:    
        -:  959:/*********************************************************************/
        -:  960:
        -:  961:
        -:  962:
        -:  963:    case gardens:
    #####:  964:      return -1;
        -:  965:      
        -:  966:   
        -:  967:/*********************************************************************/
        -:  968:
        -:  969:
        -:  970:
        -:  971:    case mine:
    #####:  972:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  973:
    #####:  974:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  975:  {
    #####:  976:    return -1;
        -:  977:  }
        -:  978:    
    #####:  979:      if (choice2 > treasure_map || choice2 < curse)
        -:  980:  {
    #####:  981:    return -1;
        -:  982:  }
        -:  983:
    #####:  984:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  985:  {
    #####:  986:    return -1;
        -:  987:  }
        -:  988:
    #####:  989:      gainCard(choice2, state, 2, currentPlayer);
        -:  990:
        -:  991:      //discard card from hand
    #####:  992:      discardCard(handPos, currentPlayer, state, 0);
        -:  993:
        -:  994:      //discard trashed card
    #####:  995:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  996:  {
    #####:  997:    if (state->hand[currentPlayer][i] == j)
        -:  998:      {
    #####:  999:        discardCard(i, currentPlayer, state, 0);      
    #####: 1000:        break;
        -: 1001:      }
    #####: 1002:  }
        -: 1003:      
    #####: 1004:      return 0;
        -: 1005:      
        -: 1006:    /*********************************************************************/
        -: 1007:
        -: 1008:
        -: 1009:
        -: 1010:
        -: 1011:    case remodel:
    #####: 1012:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1013:
    #####: 1014:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -: 1015:  {
    #####: 1016:    return -1;
        -: 1017:  }
        -: 1018:
    #####: 1019:      gainCard(choice2, state, 0, currentPlayer);
        -: 1020:
        -: 1021:      //discard card from hand
    #####: 1022:      discardCard(handPos, currentPlayer, state, 0);
        -: 1023:
        -: 1024:      //discard trashed card
    #####: 1025:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1026:  {
    #####: 1027:    if (state->hand[currentPlayer][i] == j)
        -: 1028:      {
    #####: 1029:        discardCard(i, currentPlayer, state, 0);      
    #####: 1030:        break;
        -: 1031:      }
    #####: 1032:  }
        -: 1033:
        -: 1034:
    #####: 1035:      return 0;
        -: 1036:    
        -: 1037:    
        -: 1038:
        -: 1039:
        -: 1040:
        -: 1041:
        -: 1042:
        -: 1043:/*********************************************************************/
        -: 1044:
        -: 1045:   
        -: 1046:    
        -: 1047:
        -: 1048:
        -: 1049:      case smithy:
        1: 1050:        smithyFunction(currentPlayer,handPos,state);
        1: 1051:        return 0 ; 
        -: 1052:
        -: 1053:
        -: 1054:/*********************************************************************/
        -: 1055:
        -: 1056:
        -: 1057:
        -: 1058:
        -: 1059:    case village:
        -: 1060:      //+1 Card
    #####: 1061:      drawCard(currentPlayer, state);
        -: 1062:      
        -: 1063:      //+2 Actions
    #####: 1064:      state->numActions = state->numActions + 2;
        -: 1065:      
        -: 1066:      //discard played card from hand
    #####: 1067:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1068:      return 0;
        -: 1069:    
        -: 1070:
        -: 1071:
        -: 1072:/*********************************************************************/
        -: 1073:
        -: 1074:
        -: 1075:
        -: 1076:
        -: 1077:
        -: 1078:    case baron:
    #####: 1079:      state->numBuys++;//Increase buys by 1!
    #####: 1080:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####: 1081:  int p = 0;//Iterator for hand!
    #####: 1082:  int card_not_discarded = 1;//Flag for discard set!
    #####: 1083:  while(card_not_discarded){
    #####: 1084:    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####: 1085:      state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1086:      state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1087:      state->discardCount[currentPlayer]++;
    #####: 1088:      for (;p < state->handCount[currentPlayer]; p++){
    #####: 1089:        state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####: 1090:      }
    #####: 1091:      state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1092:      state->handCount[currentPlayer]--;
    #####: 1093:      card_not_discarded = 0;//Exit the loop
    #####: 1094:    }
    #####: 1095:    else if (p > state->handCount[currentPlayer]){
        -: 1096:      if(DEBUG) {
        -: 1097:        printf("No estate cards in your hand, invalid choice\n");
        -: 1098:        printf("Must gain an estate if there are any\n");
        -: 1099:      }
    #####: 1100:      if (supplyCount(estate, state) > 0){
    #####: 1101:        gainCard(estate, state, 0, currentPlayer);
    #####: 1102:        state->supplyCount[estate]--;//Decrement estates
    #####: 1103:        if (supplyCount(estate, state) == 0){
    #####: 1104:    isGameOver(state);
    #####: 1105:        }
    #####: 1106:      }
    #####: 1107:      card_not_discarded = 0;//Exit the loop
    #####: 1108:    }
        -: 1109:          
        -: 1110:    else{
    #####: 1111:      p++;//Next card
        -: 1112:    }
        -: 1113:  }
    #####: 1114:      }
        -: 1115:          
        -: 1116:      else{
    #####: 1117:  if (supplyCount(estate, state) > 0){
    #####: 1118:    gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1119:    state->supplyCount[estate]--;//Decrement Estates
    #####: 1120:    if (supplyCount(estate, state) == 0){
    #####: 1121:      isGameOver(state);
    #####: 1122:    }
    #####: 1123:  }
        -: 1124:      }
        -: 1125:      
        -: 1126:      
    #####: 1127:      return 0;
        -: 1128:    
        -: 1129:    
        -: 1130:
        -: 1131:/*********************************************************************/
        -: 1132:
        -: 1133:
        -: 1134:
        -: 1135:
        -: 1136:    case great_hall:
        -: 1137:      //+1 Card
    #####: 1138:      drawCard(currentPlayer, state);
        -: 1139:      
        -: 1140:      //+1 Actions
    #####: 1141:      state->numActions++;
        -: 1142:      
        -: 1143:      //discard card from hand
    #####: 1144:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1145:      return 0;
        -: 1146:    
        -: 1147:    
        -: 1148:
        -: 1149:
        -: 1150:/*********************************************************************/
        -: 1151:
        -: 1152:
        -: 1153:
        -: 1154:
        -: 1155:    case minion:
        -: 1156:      //+1 action
    #####: 1157:      state->numActions++;
        -: 1158:      
        -: 1159:      //discard card from hand
    #####: 1160:      discardCard(handPos, currentPlayer, state, 0);
        -: 1161:      
    #####: 1162:      if (choice1)    //+2 coins
        -: 1163:  {
    #####: 1164:    state->coins = state->coins + 2;
    #####: 1165:  }
        -: 1166:      
    #####: 1167:      else if (choice2)   //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1168:  {
        -: 1169:    //discard hand
    #####: 1170:    while(numHandCards(state) > 0)
        -: 1171:      {
    #####: 1172:        discardCard(handPos, currentPlayer, state, 0);
        -: 1173:      }
        -: 1174:        
        -: 1175:    //draw 4
    #####: 1176:    for (i = 0; i < 4; i++)
        -: 1177:      {
    #####: 1178:        drawCard(currentPlayer, state);
    #####: 1179:      }
        -: 1180:        
        -: 1181:    //other players discard hand and redraw if hand size > 4
    #####: 1182:    for (i = 0; i < state->numPlayers; i++)
        -: 1183:      {
    #####: 1184:        if (i != currentPlayer)
        -: 1185:    {
    #####: 1186:      if ( state->handCount[i] > 4 )
        -: 1187:        {
        -: 1188:          //discard hand
    #####: 1189:          while( state->handCount[i] > 0 )
        -: 1190:      {
    #####: 1191:        discardCard(handPos, i, state, 0);
        -: 1192:      }
        -: 1193:              
        -: 1194:          //draw 4
    #####: 1195:          for (j = 0; j < 4; j++)
        -: 1196:      {
    #####: 1197:        drawCard(i, state);
    #####: 1198:      }
    #####: 1199:        }
    #####: 1200:    }
    #####: 1201:      }
        -: 1202:        
    #####: 1203:  }
    #####: 1204:      return 0;
        -: 1205:    
        -: 1206:   
        -: 1207:
        -: 1208:
        -: 1209:
        -: 1210:
        -: 1211:/*********************************************************************/
        -: 1212:
        -: 1213:
        -: 1214:
        -: 1215:
        -: 1216:    case steward:
    #####: 1217:      if (choice1 == 1)
        -: 1218:  {
        -: 1219:    //+2 cards
    #####: 1220:    drawCard(currentPlayer, state);
    #####: 1221:    drawCard(currentPlayer, state);
    #####: 1222:  }
    #####: 1223:      else if (choice1 == 2)
        -: 1224:  {
        -: 1225:    //+2 coins
    #####: 1226:    state->coins = state->coins + 2;
    #####: 1227:  }
        -: 1228:      else
        -: 1229:  {
        -: 1230:    //trash 2 cards in hand
    #####: 1231:    discardCard(choice2, currentPlayer, state, 1);
    #####: 1232:    discardCard(choice3, currentPlayer, state, 1);
        -: 1233:  }
        -: 1234:      
        -: 1235:      //discard card from hand
    #####: 1236:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1237:      return 0;
        -: 1238:    
        -: 1239:    
        -: 1240:
        -: 1241:
        -: 1242:
        -: 1243:/**********************************************************************/
        -: 1244:
        -: 1245:
        -: 1246:
        -: 1247:
        -: 1248:
        -: 1249:
        -: 1250:
        -: 1251:
        -: 1252:    case tribute:
    #####: 1253:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1254:  if (state->deckCount[nextPlayer] > 0){
    #####: 1255:    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1256:    state->deckCount[nextPlayer]--;
    #####: 1257:  }
    #####: 1258:  else if (state->discardCount[nextPlayer] > 0){
    #####: 1259:    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1260:    state->discardCount[nextPlayer]--;
    #####: 1261:  }
        -: 1262:  else{
        -: 1263:    //No Card to Reveal
        -: 1264:    if (DEBUG){
        -: 1265:      printf("No cards to reveal\n");
        -: 1266:    }
        -: 1267:  }
    #####: 1268:      }
        -: 1269:      
        -: 1270:      else{
    #####: 1271:  if (state->deckCount[nextPlayer] == 0){
    #####: 1272:    for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1273:      state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1274:      state->deckCount[nextPlayer]++;
    #####: 1275:      state->discard[nextPlayer][i] = -1;
    #####: 1276:      state->discardCount[nextPlayer]--;
    #####: 1277:    }
        -: 1278:          
    #####: 1279:    shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1280:  } 
    #####: 1281:  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1282:  state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1283:  state->deckCount[nextPlayer]--;
    #####: 1284:  tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1285:  state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1286:  state->deckCount[nextPlayer]--;
        -: 1287:      }    
        -: 1288:           
    #####: 1289:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1290:  state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1291:  state->playedCardCount++;
    #####: 1292:  tributeRevealedCards[1] = -1;
    #####: 1293:      }
        -: 1294:
    #####: 1295:      for (i = 0; i <= 2; i ++){
    #####: 1296:  if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1297:    state->coins += 2;
    #####: 1298:  }
        -: 1299:        
    #####: 1300:  else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1301:    drawCard(currentPlayer, state);
    #####: 1302:    drawCard(currentPlayer, state);
    #####: 1303:  }
        -: 1304:  else{//Action Card
    #####: 1305:    state->numActions = state->numActions + 2;
        -: 1306:  }
    #####: 1307:      }
        -: 1308:      
    #####: 1309:      return 0;
        -: 1310:    
        -: 1311:   
        -: 1312:
        -: 1313:/*********************************************************************/
        -: 1314:
        -: 1315:
        -: 1316:
        -: 1317:
        -: 1318:
        -: 1319:    case ambassador:
    #####: 1320:      j = 0;    //used to check if player has enough cards to discard
        -: 1321:
    #####: 1322:      if (choice2 > 2 || choice2 < 0)
        -: 1323:  {
    #####: 1324:    return -1;        
        -: 1325:  }
        -: 1326:
    #####: 1327:      if (choice1 == handPos)
        -: 1328:  {
    #####: 1329:    return -1;
        -: 1330:  }
        -: 1331:
    #####: 1332:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1333:  {
    #####: 1334:    if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1335:      {
    #####: 1336:        j++;
    #####: 1337:      }
    #####: 1338:  }
    #####: 1339:      if (j < choice2)
        -: 1340:  {
    #####: 1341:    return -1;        
        -: 1342:  }
        -: 1343:
        -: 1344:      if (DEBUG) 
        -: 1345:  printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1346:
        -: 1347:      //increase supply count for choosen card by amount being discarded
    #####: 1348:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1349:      
        -: 1350:      //each other player gains a copy of revealed card
    #####: 1351:      for (i = 0; i < state->numPlayers; i++)
        -: 1352:  {
    #####: 1353:    if (i != currentPlayer)
        -: 1354:      {
    #####: 1355:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1356:      }
    #####: 1357:  }
        -: 1358:
        -: 1359:      //discard played card from hand
    #####: 1360:      discardCard(handPos, currentPlayer, state, 0);      
        -: 1361:
        -: 1362:      //trash copies of cards returned to supply
    #####: 1363:      for (j = 0; j < choice2; j++)
        -: 1364:  {
    #####: 1365:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1366:      {
    #####: 1367:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1368:    {
    #####: 1369:      discardCard(i, currentPlayer, state, 1);
    #####: 1370:      break;
        -: 1371:    }
    #####: 1372:      }
    #####: 1373:  }     
        -: 1374:
    #####: 1375:      return 0;
        -: 1376:    
        -: 1377:   
        -: 1378:
        -: 1379:/********************************/
        -: 1380:
        -: 1381:
        -: 1382:
        -: 1383:
        -: 1384:
        -: 1385:
        -: 1386:    case cutpurse:
        -: 1387:
    #####: 1388:      updateCoins(currentPlayer, state, 2);
    #####: 1389:      for (i = 0; i < state->numPlayers; i++)
        -: 1390:  {
    #####: 1391:    if (i != currentPlayer)
        -: 1392:      {
    #####: 1393:        for (j = 0; j < state->handCount[i]; j++)
        -: 1394:    {
    #####: 1395:      if (state->hand[i][j] == copper)
        -: 1396:        {
    #####: 1397:          discardCard(j, i, state, 0);
    #####: 1398:          break;
        -: 1399:        }
    #####: 1400:      if (j == state->handCount[i])
        -: 1401:        {
    #####: 1402:          for (k = 0; k < state->handCount[i]; k++)
        -: 1403:      {
        -: 1404:        if (DEBUG)
        -: 1405:          printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1406:      } 
    #####: 1407:          break;
        -: 1408:        }   
    #####: 1409:    }
        -: 1410:          
    #####: 1411:      }
        -: 1412:        
    #####: 1413:  }       
        -: 1414:
        -: 1415:      //discard played card from hand
    #####: 1416:      discardCard(handPos, currentPlayer, state, 0);      
        -: 1417:
    #####: 1418:      return 0;
        -: 1419:
        -: 1420:    
        -: 1421:    
        -: 1422:
        -: 1423:
        -: 1424:/********************************/
        -: 1425:
        -: 1426:
        -: 1427:
        -: 1428:
        -: 1429:
        -: 1430:
        -: 1431:
        -: 1432:
        -: 1433:
        -: 1434:    case embargo: 
        -: 1435:      //+2 Coins
    #####: 1436:      state->coins = state->coins + 2;
        -: 1437:      
        -: 1438:      //see if selected pile is in play
    #####: 1439:      if ( state->supplyCount[choice1] == -1 )
        -: 1440:  {
    #####: 1441:    return -1;
        -: 1442:  }
        -: 1443:      
        -: 1444:
    #####: 1445:       state->embargoTokens[choice1]++;
        -: 1446:      
        -: 1447:      //trash card
    #####: 1448:      discardCard(handPos, currentPlayer, state, 1);    
    #####: 1449:      return 0;
        -: 1450:    
        -: 1451:
        -: 1452:/********************************/
        -: 1453:
        -: 1454:
        -: 1455:   
        -: 1456:
        -: 1457:      
        -: 1458:
        -: 1459:
        -: 1460:
        -: 1461:      // call outpost function 
        -: 1462:      case outpost:
    #####: 1463:      outpostFunction(currentPlayer,handPos,state);
    #####: 1464:      return 0;
        -: 1465:
        -: 1466:
        -: 1467:
        -: 1468:/********************************/
        -: 1469:
        -: 1470:
        -: 1471:
        -: 1472:
        -: 1473:      // call salvegerFunction
        -: 1474:      case salvager:
    #####: 1475:      salvagerFunction(currentPlayer,handPos,choice1,state);
    #####: 1476:      return 0 ;
        -: 1477:
        -: 1478:
        -: 1479:
        -: 1480:
        -: 1481:
        -: 1482:  /********************************/
        -: 1483:
        -: 1484:
        -: 1485:
        -: 1486:
        -: 1487:    
        -: 1488:
        -: 1489:
        -: 1490:
        -: 1491:
        -: 1492:
        -: 1493:    case sea_hag:
    #####: 1494:      for (i = 0; i < state->numPlayers; i++){
    #####: 1495:  if (i != currentPlayer){
    #####: 1496:    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];          state->deckCount[i]--;
    #####: 1497:    state->discardCount[i]++;
    #####: 1498:    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1499:  }
    #####: 1500:      }
    #####: 1501:      return 0;
        -: 1502:    
        -: 1503:   
        -: 1504:
        -: 1505:
        -: 1506:/********************************/
        -: 1507:
        -: 1508:
        -: 1509:
        -: 1510:
        -: 1511:    case treasure_map:
        -: 1512:      //search hand for another treasure_map
    #####: 1513:      index = -1;
    #####: 1514:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1515:  {
    #####: 1516:    if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1517:      {
    #####: 1518:        index = i;
    #####: 1519:        break;
        -: 1520:      }
    #####: 1521:  }
    #####: 1522:      if (index > -1)
        -: 1523:  {
        -: 1524:    //trash both treasure cards
    #####: 1525:    discardCard(handPos, currentPlayer, state, 1);
    #####: 1526:    discardCard(index, currentPlayer, state, 1);
        -: 1527:
        -: 1528:    //gain 4 Gold cards
    #####: 1529:    for (i = 0; i < 4; i++)
        -: 1530:      {
    #####: 1531:        gainCard(gold, state, 1, currentPlayer);
    #####: 1532:      }
        -: 1533:        
        -: 1534:    //return success
    #####: 1535:    return 1;
        -: 1536:  }
        -: 1537:      
        -: 1538:      //no second treasure_map found in hand
    #####: 1539:      return -1;
        -: 1540:    }
        -: 1541:  
    #####: 1542:  return -1;
        2: 1543:}
        -: 1544:
        -: 1545:/********************************/
        -: 1546:
        -: 1547:
        -: 1548:
        -: 1549:
        -: 1550:
        -: 1551:
        -: 1552:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1553:{
        -: 1554:  
        -: 1555:  //if card is not trashed, added to Played pile 
        1: 1556:  if (trashFlag < 1)
        -: 1557:    {
        -: 1558:      //add card to played pile
        1: 1559:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        1: 1560:      state->playedCardCount++;
        1: 1561:    }
        -: 1562:  
        -: 1563:  //set played card to -1
        1: 1564:  state->hand[currentPlayer][handPos] = -1;
        -: 1565:  
        -: 1566:  //remove card from player's hand
        1: 1567:  if ( handPos == (state->handCount[currentPlayer] - 1) )   //last card in hand array is played
        -: 1568:    {
        -: 1569:      //reduce number of cards in hand
    #####: 1570:      state->handCount[currentPlayer]--;
    #####: 1571:    }
        1: 1572:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1573:    {
        -: 1574:      //reduce number of cards in hand
    #####: 1575:      state->handCount[currentPlayer]--;
    #####: 1576:    }
        -: 1577:  else  
        -: 1578:    {
        -: 1579:      //replace discarded card with last card in hand
        1: 1580:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1581:      //set last card to -1
        1: 1582:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1583:      //reduce number of cards in hand
        1: 1584:      state->handCount[currentPlayer]--;
        -: 1585:    }
        -: 1586:  
        1: 1587:  return 0;
        -: 1588:}
        -: 1589:
        -: 1590:
        -: 1591:
        -: 1592:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1593:{
        -: 1594:  //Note: supplyPos is enum of choosen card
        -: 1595:  
        -: 1596:  //check if supply pile is empty (0) or card is not used in game (-1)
        6: 1597:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1598:    {
        1: 1599:      return -1;
        -: 1600:    }
        -: 1601:  
        -: 1602:  //added card for [whoseTurn] current player:
        -: 1603:  // toFlag = 0 : add to discard
        -: 1604:  // toFlag = 1 : add to deck
        -: 1605:  // toFlag = 2 : add to hand
        -: 1606:
        5: 1607:  if (toFlag == 1)
        -: 1608:    {
        1: 1609:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1610:      state->deckCount[player]++;
        1: 1611:    }
        4: 1612:  else if (toFlag == 2)
        -: 1613:    {
        1: 1614:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1615:      state->handCount[player]++;
        1: 1616:    }
        -: 1617:  else
        -: 1618:    {
        3: 1619:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        3: 1620:      state->discardCount[player]++;
        -: 1621:    }
        -: 1622:  
        -: 1623:  //decrease number in supply pile
        5: 1624:  state->supplyCount[supplyPos]--;
        -: 1625:   
        5: 1626:  return 0;
        6: 1627:}
        -: 1628:
        -: 1629:
        -: 1630:
        -: 1631:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1632:{
        -: 1633:  int i;
        -: 1634:  
        -: 1635:  //reset coin count
      446: 1636:  state->coins = 0;
        -: 1637:
        -: 1638:  //add coins for each Treasure card in player's hand
     4032: 1639:  for (i = 0; i < state->handCount[player]; i++)
        -: 1640:    {
     1570: 1641:      if (state->hand[player][i] == copper)
        -: 1642:  {
      790: 1643:    state->coins += 1;
      790: 1644:  }
      780: 1645:      else if (state->hand[player][i] == silver)
        -: 1646:  {
      330: 1647:    state->coins += 2;
      330: 1648:  }
      450: 1649:      else if (state->hand[player][i] == gold)
        -: 1650:  {
      330: 1651:    state->coins += 3;
      330: 1652:  } 
     1570: 1653:    } 
        -: 1654:
        -: 1655:  //add bonus
      446: 1656:  state->coins += bonus;
        -: 1657:
      446: 1658:  return 0;
        -: 1659:}
        -: 1660:
        -: 1661:
        -: 1662://end of dominion.c
        -: 1663:
cardtest3.c:
TESTING  council_room()

 The player_0 gains 4 cards
Test: FAILED
 The player_0 gains 4 cards in piles
Test: FAILED
 The player_0 buys 4 cards 
Test: FAILED
victory card piles is the same
Province Pile
Test: PASSED
Duchy Pile
Test: PASSED
Estate Pile
Test: PASSED

 kingdom card pile is the same
testing the cards piles . . . 
Test: PASSED
testing the cards piles . . . 
Test: PASSED
testing the cards piles . . . 
Test: PASSED
testing the cards piles . . . 
Test: PASSED
testing the cards piles . . . 
Test: PASSED
testing the cards piles . . . 
Test: PASSED
testing the cards piles . . . 
Test: PASSED
testing the cards piles . . . 
Test: PASSED
testing the cards piles . . . 
Test: PASSED
testing the cards piles . . . 
Test: PASSED

Player_1 gets a card
Test: PASSED

Player_1 gets a card from deck
Test: FAILED
Test: Test Failed
Failed:  4
File 'cardtest3.c'
Lines executed:98.00% of 50
cardtest3.c:creating 'cardtest3.c.gcov'

File 'dominion.c'
Lines executed:30.46% of 650
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:7
        -:    0:Programs:1
        -:    1:
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include "rngs.h"
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:
        -:   10:
        -:   11:int compare(const void* a, const void* b) {
     3276:   12:  if (*(int*)a > *(int*)b)
    #####:   13:    return 1;
     3276:   14:  if (*(int*)a < *(int*)b)
     1170:   15:    return -1;
     2106:   16:  return 0;
     3276:   17:}
        -:   18:
        -:   19:
        -:   20:
        -:   21:struct gameState* newGame() {
    #####:   22:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   23:  return g;
        -:   24:}
        -:   25:
        -:   26:
        -:   27:
        -:   28:
        -:   29:
        -:   30:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   31:      int k8, int k9, int k10) {
    #####:   32:  int* k = malloc(10 * sizeof(int));
    #####:   33:  k[0] = k1;
    #####:   34:  k[1] = k2;
    #####:   35:  k[2] = k3;
    #####:   36:  k[3] = k4;
    #####:   37:  k[4] = k5;
    #####:   38:  k[5] = k6;
    #####:   39:  k[6] = k7;
    #####:   40:  k[7] = k8;
    #####:   41:  k[8] = k9;
    #####:   42:  k[9] = k10;
    #####:   43:  return k;
        -:   44:}
        -:   45:
        -:   46:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   47:       struct gameState *state) {
        -:   48:
        -:   49:  int i;
        -:   50:  int j;
        -:   51:  int it;     
        -:   52:  //set up random number generator
      116:   53:  SelectStream(1);
      116:   54:  PutSeed((long)randomSeed);
        -:   55:  
        -:   56:  //check number of players
      232:   57:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   58:    {
    #####:   59:      return -1;
        -:   60:    }
        -:   61:
        -:   62:  //set number of players
      116:   63:  state->numPlayers = numPlayers;
        -:   64:
        -:   65:  //check selected kingdom cards are different
     2552:   66:  for (i = 0; i < 10; i++)
        -:   67:    {
    25520:   68:      for (j = 0; j < 10; j++)
        -:   69:        {
    22040:   70:    if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   71:      {
    #####:   72:        return -1;
        -:   73:      }
    11600:   74:        }
     1160:   75:    }
        -:   76:
        -:   77:
        -:   78:  //initialize supply
        -:   79:  ///////////////////////////////
        -:   80:
        -:   81:  //set number of Curse cards
      116:   82:  if (numPlayers == 2)
        -:   83:    {
      116:   84:      state->supplyCount[curse] = 10;
      116:   85:    }
    #####:   86:  else if (numPlayers == 3)
        -:   87:    {
    #####:   88:      state->supplyCount[curse] = 20;
    #####:   89:    }
        -:   90:  else
        -:   91:    {
    #####:   92:      state->supplyCount[curse] = 30;
        -:   93:    }
        -:   94:
        -:   95:  //set number of Victory cards
      116:   96:  if (numPlayers == 2)
        -:   97:    {
      116:   98:      state->supplyCount[estate] = 8;
      116:   99:      state->supplyCount[duchy] = 8;
      116:  100:      state->supplyCount[province] = 8;
      116:  101:    }
        -:  102:  else
        -:  103:    {
    #####:  104:      state->supplyCount[estate] = 12;
    #####:  105:      state->supplyCount[duchy] = 12;
    #####:  106:      state->supplyCount[province] = 12;
        -:  107:    }
        -:  108:
        -:  109:  //set number of Treasure cards
      116:  110:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      116:  111:  state->supplyCount[silver] = 40;
      116:  112:  state->supplyCount[gold] = 30;
        -:  113:
        -:  114:  //set number of Kingdom cards
     4872:  115:  for (i = adventurer; i <= treasure_map; i++)        //loop all cards
        -:  116:    {
    38280:  117:      for (j = 0; j < 10; j++)              //loop chosen cards
        -:  118:  {
    17980:  119:    if (kingdomCards[j] == i)
        -:  120:      {
        -:  121:        //check if card is a 'Victory' Kingdom card
     2204:  122:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  123:    {
      232:  124:      if (numPlayers == 2){ 
      232:  125:        state->supplyCount[i] = 8; 
      232:  126:      }
    #####:  127:      else{ state->supplyCount[i] = 12; }
      232:  128:    }
        -:  129:        else
        -:  130:    {
      928:  131:      state->supplyCount[i] = 10;
        -:  132:    }
     1160:  133:        break;
        -:  134:      }
        -:  135:    else    //card is not in the set choosen for the game
        -:  136:      {
    16820:  137:        state->supplyCount[i] = -1;
        -:  138:      }
    16820:  139:  }
        -:  140:
     2320:  141:    }
        -:  142:
        -:  143:  ////////////////////////
        -:  144:  //supply intilization complete
        -:  145:
        -:  146:  //set player decks
      696:  147:  for (i = 0; i < numPlayers; i++)
        -:  148:    {
      232:  149:      state->deckCount[i] = 0;
     1856:  150:      for (j = 0; j < 3; j++)
        -:  151:  {
      696:  152:    state->deck[i][j] = estate;
      696:  153:    state->deckCount[i]++;
      696:  154:  }
     3712:  155:      for (j = 3; j < 10; j++)
        -:  156:  {
     1624:  157:    state->deck[i][j] = copper;
     1624:  158:    state->deckCount[i]++;    
     1624:  159:  }
      232:  160:    }
        -:  161:
        -:  162:  //shuffle player decks
      696:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
      232:  165:      if ( shuffle(i, state) < 0 )
        -:  166:  {
    #####:  167:    return -1;
        -:  168:  }
      232:  169:    }
        -:  170:
        -:  171:  //draw player hands
      696:  172:  for (i = 0; i < numPlayers; i++)
        -:  173:    {  
        -:  174:      //initialize hand size to zero
      232:  175:      state->handCount[i] = 0;
      232:  176:      state->discardCount[i] = 0;
        -:  177:      //draw 5 cards
        -:  178:      // for (j = 0; j < 5; j++)
        -:  179:      //  {
        -:  180:      //    drawCard(i, state);
        -:  181:      //  }
      232:  182:    }
        -:  183:  
        -:  184:  //set embargo tokens to 0 for all supply piles
     6496:  185:  for (i = 0; i <= treasure_map; i++)
        -:  186:    {
     3132:  187:      state->embargoTokens[i] = 0;
     3132:  188:    }
        -:  189:
        -:  190:  //initialize first player's turn
      116:  191:  state->outpostPlayed = 0;
      116:  192:  state->phase = 0;
      116:  193:  state->numActions = 1;
      116:  194:  state->numBuys = 1;
      116:  195:  state->playedCardCount = 0;
      116:  196:  state->whoseTurn = 0;
      116:  197:  state->handCount[state->whoseTurn] = 0;
        -:  198:  //int it; move to top
        -:  199:
        -:  200:  //Moved draw cards to here, only drawing at the start of a turn
     1392:  201:  for (it = 0; it < 5; it++){
      580:  202:    drawCard(state->whoseTurn, state);
      580:  203:  }
        -:  204:
      116:  205:  updateCoins(state->whoseTurn, state, 0);
        -:  206:
      116:  207:  return 0;
      116:  208:}
        -:  209:
        -:  210:int shuffle(int player, struct gameState *state) {
        -:  211: 
        -:  212:
        -:  213:  int newDeck[MAX_DECK];
      235:  214:  int newDeckPos = 0;
        -:  215:  int card;
        -:  216:  int i;
        -:  217:
      235:  218:  if (state->deckCount[player] < 1)
        1:  219:    return -1;
      234:  220:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  221:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  222:
     5148:  223:  while (state->deckCount[player] > 0) {
     2340:  224:    card = floor(Random() * state->deckCount[player]);
     2340:  225:    newDeck[newDeckPos] = state->deck[player][card];
     2340:  226:    newDeckPos++;
    16422:  227:    for (i = card; i < state->deckCount[player]-1; i++) {
     5871:  228:      state->deck[player][i] = state->deck[player][i+1];
     5871:  229:    }
     2340:  230:    state->deckCount[player]--;
        -:  231:  }
     5148:  232:  for (i = 0; i < newDeckPos; i++) {
     2340:  233:    state->deck[player][i] = newDeck[i];
     2340:  234:    state->deckCount[player]++;
     2340:  235:  }
        -:  236:
      234:  237:  return 0;
      235:  238:}
        -:  239:
        -:  240:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  241:{ 
        -:  242:  int card;
    #####:  243:  int coin_bonus = 0;     //tracks coins gain from actions
        -:  244:
        -:  245:  //check if it is the right phase
    #####:  246:  if (state->phase != 0)
        -:  247:    {
    #####:  248:      return -1;
        -:  249:    }
        -:  250:  
        -:  251:  //check if player has enough actions
    #####:  252:  if ( state->numActions < 1 )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:  
        -:  257:  //get card played
    #####:  258:  card = handCard(handPos, state);
        -:  259:  
        -:  260:  //check if selected card is an action
    #####:  261:  if ( card < adventurer || card > treasure_map )
        -:  262:    {
    #####:  263:      return -1;
        -:  264:    }
        -:  265:  
        -:  266:  //play card
    #####:  267:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  268:    {
    #####:  269:      return -1;
        -:  270:    }
        -:  271:  
        -:  272:  //reduce number of actions
    #####:  273:  state->numActions--;
        -:  274:
        -:  275:  //update coins (Treasure cards may be added with card draws)
    #####:  276:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  277:  
    #####:  278:  return 0;
    #####:  279:}
        -:  280:
        -:  281:int buyCard(int supplyPos, struct gameState *state) {
        -:  282:  int who;
        -:  283:  if (DEBUG){
        -:  284:    printf("Entering buyCard...\n");
        -:  285:  }
        -:  286:
        -:  287:  // I don't know what to do about the phase thing.
        -:  288:
    #####:  289:  who = state->whoseTurn;
        -:  290:
    #####:  291:  if (state->numBuys < 1){
        -:  292:    if (DEBUG)
        -:  293:      printf("You do not have any buys left\n");
    #####:  294:    return -1;
    #####:  295:  } else if (supplyCount(supplyPos, state) <1){
        -:  296:    if (DEBUG)
        -:  297:      printf("There are not any of that type of card left\n");
    #####:  298:    return -1;
    #####:  299:  } else if (state->coins < getCost(supplyPos)){
        -:  300:    if (DEBUG) 
        -:  301:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  302:    return -1;
        -:  303:  } else {
    #####:  304:    state->phase=1;
        -:  305:    //state->supplyCount[supplyPos]--;
    #####:  306:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  307:  
    #####:  308:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  309:    state->numBuys--;
        -:  310:    if (DEBUG)
        -:  311:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  312:  }
        -:  313:
        -:  314:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  315:  //state->discardCount[who]++;
        -:  316:    
    #####:  317:  return 0;
    #####:  318:}
        -:  319:
        -:  320:
        -:  321:
        -:  322:int numHandCards(struct gameState *state) {
    #####:  323:  return state->handCount[ whoseTurn(state) ];
        -:  324:}
        -:  325:
        -:  326:int handCard(int handPos, struct gameState *state) {
    #####:  327:  int currentPlayer = whoseTurn(state);
    #####:  328:  return state->hand[currentPlayer][handPos];
        -:  329:}
        -:  330:
        -:  331:int supplyCount(int card, struct gameState *state) {
        7:  332:  return state->supplyCount[card];
        -:  333:}
        -:  334:
        -:  335:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  336:  int i;
    #####:  337:  int count = 0;
        -:  338:
    #####:  339:  for (i = 0; i < state->deckCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->deck[player][i] == card) count++;
    #####:  342:    }
        -:  343:
    #####:  344:  for (i = 0; i < state->handCount[player]; i++)
        -:  345:    {
    #####:  346:      if (state->hand[player][i] == card) count++;
    #####:  347:    }
        -:  348:
    #####:  349:  for (i = 0; i < state->discardCount[player]; i++)
        -:  350:    {
    #####:  351:      if (state->discard[player][i] == card) count++;
    #####:  352:    }
        -:  353:
    #####:  354:  return count;
        -:  355:}
        -:  356:
        -:  357:int whoseTurn(struct gameState *state) {
        3:  358:  return state->whoseTurn;
        -:  359:}
        -:  360:
        -:  361:
        -:  362:int endTurn(struct gameState *state) {
        -:  363:  int k;
        -:  364:  int i;
    #####:  365:  int currentPlayer = whoseTurn(state);
        -:  366:  
        -:  367:  //Discard hand
    #####:  368:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  369:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  370:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  371:  }
    #####:  372:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  373:    
        -:  374:  //Code for determining the player
    #####:  375:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  376:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  377:  }
        -:  378:  else{
    #####:  379:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  380:  }
        -:  381:
    #####:  382:  state->outpostPlayed = 0;
    #####:  383:  state->phase = 0;
    #####:  384:  state->numActions = 1;
    #####:  385:  state->coins = 0;
    #####:  386:  state->numBuys = 1;
    #####:  387:  state->playedCardCount = 0;
    #####:  388:  state->handCount[state->whoseTurn] = 0;
        -:  389:
        -:  390:  //int k; move to top
        -:  391:  //Next player draws hand
    #####:  392:  for (k = 0; k < 5; k++){
    #####:  393:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  394:  }
        -:  395:
        -:  396:  //Update money
    #####:  397:  updateCoins(state->whoseTurn, state , 0);
        -:  398:
    #####:  399:  return 0;
        -:  400:}
        -:  401:
        -:  402:
        -:  403:
        -:  404:
        -:  405:
        -:  406:int isGameOver(struct gameState *state) {
        -:  407:  int i;
        -:  408:  int j;
        -:  409:  
        -:  410:  //if stack of Province cards is empty, the game ends
        2:  411:  if (state->supplyCount[province] == 0)
        -:  412:    {
    #####:  413:      return 1;
        -:  414:    }
        -:  415:
        -:  416:  //if three supply pile are at 0, the game ends
        2:  417:  j = 0;
      104:  418:  for (i = 0; i < 25; i++)
        -:  419:    {
       50:  420:      if (state->supplyCount[i] == 0)
        -:  421:  {
        3:  422:    j++;
        3:  423:  }
       50:  424:    }
        2:  425:  if ( j >= 3)
        -:  426:    {
        1:  427:      return 1;
        -:  428:    }
        -:  429:
        1:  430:  return 0;
        2:  431:}
        -:  432:
        -:  433:int scoreFor (int player, struct gameState *state) {
        -:  434:
        -:  435:  int i;
    #####:  436:  int score = 0;
        -:  437:  //score from hand
    #####:  438:  for (i = 0; i < state->handCount[player]; i++)
        -:  439:    {
    #####:  440:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  441:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  442:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  443:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  444:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  445:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  446:    }
        -:  447:
        -:  448:  //score from discard
    #####:  449:  for (i = 0; i < state->discardCount[player]; i++)
        -:  450:    {
    #####:  451:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  452:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  453:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  454:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  455:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  456:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  457:    }
        -:  458:
        -:  459:  //score from deck
    #####:  460:  for (i = 0; i < state->discardCount[player]; i++)
        -:  461:    {
    #####:  462:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  463:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  464:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  465:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  466:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  467:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  468:    }
        -:  469:
    #####:  470:  return score;
        -:  471:}
        -:  472:
        -:  473:
        -:  474:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  475:  int i;  
        -:  476:  int j;
        -:  477:  int highScore;
        -:  478:  int currentPlayer;
        -:  479:
        -:  480:  //get score for each player
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  482:    {
        -:  483:      //set unused player scores to -9999
    #####:  484:      if (i >= state->numPlayers)
        -:  485:  {
    #####:  486:    players[i] = -9999;
    #####:  487:  }
        -:  488:      else
        -:  489:  {
    #####:  490:    players[i] = scoreFor (i, state);
        -:  491:  }
    #####:  492:    }
        -:  493:
        -:  494:  //find highest score
    #####:  495:  j = 0;
    #####:  496:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  497:    {
    #####:  498:      if (players[i] > players[j])
        -:  499:  {
    #####:  500:    j = i;
    #####:  501:  }
    #####:  502:    }
    #####:  503:  highScore = players[j];
        -:  504:
        -:  505:  //add 1 to players who had less turns
    #####:  506:  currentPlayer = whoseTurn(state);
    #####:  507:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  508:    {
    #####:  509:      if ( players[i] == highScore && i > currentPlayer )
        -:  510:  {
    #####:  511:    players[i]++;
    #####:  512:  }
    #####:  513:    }
        -:  514:
        -:  515:  //find new highest score
    #####:  516:  j = 0;
    #####:  517:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  518:    {
    #####:  519:      if ( players[i] > players[j] )
        -:  520:  {
    #####:  521:    j = i;
    #####:  522:  }
    #####:  523:    }
    #####:  524:  highScore = players[j];
        -:  525:
        -:  526:  //set winners in array to 1 and rest to 0
    #####:  527:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  528:    {
    #####:  529:      if ( players[i] == highScore )
        -:  530:  {
    #####:  531:    players[i] = 1;
    #####:  532:  }
        -:  533:      else
        -:  534:  {
    #####:  535:    players[i] = 0;
        -:  536:  }
    #####:  537:    }
        -:  538:
    #####:  539:  return 0;
        -:  540:}
        -:  541:
        -:  542:
        -:  543:int drawCard(int player, struct gameState *state)
        -:  544:{ int count;
        -:  545:  int deckCounter;
      590:  546:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  547:    
        -:  548:    //Step 1 Shuffle the discard pile back into a deck
        -:  549:    int i;
        -:  550:    //Move discard to deck
    #####:  551:    for (i = 0; i < state->discardCount[player];i++){
    #####:  552:      state->deck[player][i] = state->discard[player][i];
    #####:  553:      state->discard[player][i] = -1;
    #####:  554:    }
        -:  555:
    #####:  556:    state->deckCount[player] = state->discardCount[player];
    #####:  557:    state->discardCount[player] = 0;//Reset discard
        -:  558:
        -:  559:    //Shufffle the deck
    #####:  560:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  561:   
        -:  562:    if (DEBUG){//Debug statements
        -:  563:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  564:    }
        -:  565:    
    #####:  566:    state->discardCount[player] = 0;
        -:  567:
        -:  568:    //Step 2 Draw Card
    #####:  569:    count = state->handCount[player];//Get current player's hand count
        -:  570:    
        -:  571:    if (DEBUG){//Debug statements
        -:  572:      printf("Current hand count: %d\n", count);
        -:  573:    }
        -:  574:    
    #####:  575:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  576:
    #####:  577:    if (deckCounter == 0)
    #####:  578:      return -1;
        -:  579:
    #####:  580:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  581:    state->deckCount[player]--;
    #####:  582:    state->handCount[player]++;//Increment hand count
    #####:  583:  }
        -:  584:
        -:  585:  else{
      590:  586:    int count = state->handCount[player];//Get current hand count for player
        -:  587:    int deckCounter;
        -:  588:    if (DEBUG){//Debug statements
        -:  589:      printf("Current hand count: %d\n", count);
        -:  590:    }
        -:  591:
      590:  592:    deckCounter = state->deckCount[player];//Create holder for the deck count
      590:  593:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      590:  594:    state->deckCount[player]--;
      590:  595:    state->handCount[player]++;//Increment hand count
        -:  596:  }
        -:  597:
      590:  598:  return 0;
      590:  599:}
        -:  600:
        -:  601:
        -:  602:
        -:  603:
        -:  604:
        -:  605:
        -:  606:
        -:  607:int getCost(int cardNumber)
        -:  608:{
        1:  609:  switch( cardNumber ) 
        -:  610:    {
        -:  611:    case curse:
        1:  612:      return 0;
        -:  613:    case estate:
    #####:  614:      return 2;
        -:  615:    case duchy:
    #####:  616:      return 5;
        -:  617:    case province:
    #####:  618:      return 8;
        -:  619:    case copper:
    #####:  620:      return 0;
        -:  621:    case silver:
    #####:  622:      return 3;
        -:  623:    case gold:
    #####:  624:      return 6;
        -:  625:
        -:  626:
        -:  627:
        -:  628:
        -:  629:
        -:  630:    case adventurer:
    #####:  631:      return 6;
        -:  632:    
        -:  633:
        -:  634:
        -:  635:
        -:  636:    case council_room:
    #####:  637:      return 5;
        -:  638:    
        -:  639:
        -:  640:
        -:  641:    case feast:
    #####:  642:      return 4;
        -:  643:    
        -:  644:
        -:  645:
        -:  646:
        -:  647:
        -:  648:    case gardens:
    #####:  649:      return 4;
        -:  650:    case mine:
    #####:  651:      return 5;
        -:  652:    case remodel:
    #####:  653:      return 4;
        -:  654:
        -:  655:
        -:  656:
        -:  657:    case smithy:
    #####:  658:      return 4;
        -:  659:    
        -:  660:
        -:  661:
        -:  662:
        -:  663:
        -:  664:
        -:  665:    case village:
    #####:  666:      return 3;
        -:  667:    case baron:
    #####:  668:      return 4;
        -:  669:    case great_hall:
    #####:  670:      return 3;
        -:  671:    case minion:
    #####:  672:      return 5;
        -:  673:    case steward:
    #####:  674:      return 3;
        -:  675:    case tribute:
    #####:  676:      return 5;
        -:  677:    case ambassador:
    #####:  678:      return 3;
        -:  679:    case cutpurse:
    #####:  680:      return 4;
        -:  681:    case embargo: 
    #####:  682:      return 2;
        -:  683:    case outpost:
    #####:  684:      return 5;
        -:  685:    case salvager:
    #####:  686:      return 4;
        -:  687:    case sea_hag:
    #####:  688:      return 4;
        -:  689:    case treasure_map:
    #####:  690:      return 4;
        -:  691:    }
        -:  692:  
    #####:  693:  return -1;
        1:  694:}
        -:  695:
        -:  696:
        -:  697:
        -:  698:
        -:  699:
        -:  700:
        -:  701:// adventurerFunction created (REFACTORING)
        -:  702:// For the function Adventure, we should add a variable, and add a 
        -:  703:// parameter to the function. We should also add a structure, and a 
        -:  704:// pointer to a given variable
        -:  705:
        -:  706:void adventurerFunction(int currentPlayer, int temphand[], int z, struct gameState *state){
        -:  707:
        -:  708:  int cardDrawn;
    #####:  709:  int drawntreasure = 0;
        -:  710:
        -:  711:  // we should have 3 cards revealed from the deck instead of 2 that was originally
        -:  712:  // placed
        -:  713:
        -:  714:    // bug
        -:  715:    
    #####:  716: while(drawntreasure<3){
        -:  717:  
    #####:  718:  if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  719:    shuffle(currentPlayer, state);
    #####:  720:  }
    #####:  721:  drawCard(currentPlayer, state);
        -:  722:  
        -:  723:
        -:  724:
    #####:  725:  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  726:  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  727:    drawntreasure++;
        -:  728:  else{
    #####:  729:    temphand[z]=cardDrawn;
    #####:  730:    state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  731:    z++;
        -:  732:  }
        -:  733:  }
        -:  734:
        -:  735:
        -:  736:    // here we omit the return 0 as it is not required as given previoulsy in the case
    #####:  737:      while(z-1 >=0){
    #####:  738:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  739:      z=z-1;
        -:  740:      }
    #####:  741:    }
        -:  742:
        -:  743:
        -:  744:// FunctionSmithy created (Refactored)
        -:  745:
        -:  746:void smithyFunction(int currentPlayer, int handPos,struct gameState *state){
        -:  747:
        -:  748:   // for loop enforced in function
        -:  749:
        -:  750:    // bug detected
       10:  751:  for ( int i = 0; i<4;i++)
        -:  752:  {
        -:  753:
        4:  754:    drawCard(currentPlayer,state);
        -:  755:
        4:  756:  }
        -:  757:
        -:  758:        //discard card from hand
        1:  759:        discardCard(handPos, currentPlayer,state,0);
        -:  760:
        -:  761:        // Since void function we dont return 0
        1:  762:}
        -:  763:
        -:  764:
        -:  765:
        -:  766:// function_council_room created (refactored)
        -:  767:
        -:  768:void council_roomFunction( int currentPlayer, int handPos, struct gameState *state){
        -:  769:
        -:  770:    // bug detected
        -:  771:   
       12:  772:   for( int i = 0; i<5 ; i++)
        -:  773:    {
        -:  774:
        5:  775:      drawCard(currentPlayer,state);
        5:  776:    }
        -:  777:
        -:  778:      //+1 Buy
        1:  779:    state->numBuys++;
        -:  780:
        -:  781:
        -:  782:      //Each other player draws a card
        6:  783:      for (int i = 0; i < state->numPlayers; i++)
        -:  784:  {
        2:  785:    if ( i != currentPlayer )
        -:  786:      {
        1:  787:        drawCard(i, state);
        1:  788:      }
        2:  789:  }
        -:  790:
        -:  791:  // put played card in placed card pile
        1:  792:  discardCard(handPos,currentPlayer,state, 0);
        -:  793:
        1:  794:}
        -:  795:
        -:  796:// functionSalvager created(refactored)
        -:  797:
        -:  798:void salvagerFunction(int choice1,int handPos,int currentPlayer,struct gameState *state)
        -:  799:{
        -:  800:  
        -:  801:
        -:  802:  //+1 buy
    #####:  803:      state->numBuys++;
        -:  804:      
    #####:  805:      if (choice1)
        -:  806:  {
        -:  807:    //gain coins equal to trashed card
    #####:  808:    state->coins = state->coins + getCost( handCard(choice1, state) );
        -:  809:   
        -:  810:    //trash card
    #####:  811:    discardCard(choice1, currentPlayer, state, 1);  
    #####:  812:  }
        -:  813:      
        -:  814:      //discard card
    #####:  815:      discardCard(handPos, currentPlayer, state, 0);
        -:  816:    
    #####:  817:}
        -:  818:
        -:  819:
        -:  820:
        -:  821:
        -:  822:// outpostFunction (REFACTORED)
        -:  823:void outpostFunction(int handPos,int currentPlayer, struct gameState *state){
        -:  824:
        -:  825: //bug 
        -:  826:
        -:  827:  //set outpost flag
    #####:  828:      state->outpostPlayed++;
        -:  829:      
        -:  830:      //discard card
    #####:  831:      discardCard(handPos, currentPlayer, state, 0);
        -:  832:  
    #####:  833:}
        -:  834:
        -:  835:
        -:  836:
        -:  837:
        -:  838:
        -:  839:
        -:  840:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  841:{
        -:  842:  int i;
        -:  843:  int j;
        -:  844:  int k;
        -:  845:  int x;
        -:  846:  int index;
        3:  847:  int currentPlayer = whoseTurn(state);
        3:  848:  int nextPlayer = currentPlayer + 1;
        -:  849:
        3:  850:  int tributeRevealedCards[2] = {-1, -1};
        -:  851:  int temphand[MAX_HAND];// moved above the if statement
        3:  852:  int drawntreasure=0;
        -:  853:  int cardDrawn;
        3:  854:  int z = 0;// this is the counter for the temp hand
        3:  855:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  856:    nextPlayer = 0;
    #####:  857:  }
        -:  858:  
        -:  859:  
        -:  860:  //uses switch to select card and perform actions
        -:  861:  
        -:  862:
        -:  863:
        -:  864:
        3:  865:  switch( card ) 
        -:  866:    {
        -:  867:    
        -:  868:
        -:  869:
        -:  870:/*********************************************************************/
        -:  871:
        -:  872:
        -:  873:
        -:  874:
        -:  875:    case adventurer:
        -:  876:    // CALL THE FUNCTION
    #####:  877:        adventurerFunction(currentPlayer,temphand,z,state);
    #####:  878:        return 0; 
        -:  879:
        -:  880:
        -:  881:/*********************************************************************/
        -:  882:
        -:  883:
        -:  884:
        -:  885:// call the council_room function
        -:  886:
        -:  887:    case council_room:
        1:  888:          council_roomFunction(currentPlayer,handPos,state);
        1:  889:          return 0; 
        -:  890:
        -:  891:
        -:  892:
        -:  893:      
        -:  894:   
        -:  895:
        -:  896:
        -:  897:
        -:  898:/*********************************************************************/
        -:  899:
        -:  900:    
        -:  901:      
        -:  902:
        -:  903:
        -:  904:
        -:  905:    case feast:
        -:  906:      //gain card with cost up to 5
        -:  907:      //Backup hand
       14:  908:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        6:  909:  temphand[i] = state->hand[currentPlayer][i];//Backup card
        6:  910:  state->hand[currentPlayer][i] = -1;//Set to nothing
        6:  911:      }
        -:  912:      //Backup hand
        -:  913:
        -:  914:      //Update Coins for Buy
        1:  915:      updateCoins(currentPlayer, state, 5);
        1:  916:      x = 1;//Condition to loop on
        4:  917:      while( x == 1) {//Buy one card
        1:  918:  if (supplyCount(choice1, state) <= 0){
        -:  919:    if (DEBUG)
        -:  920:      printf("None of that card left, sorry!\n");
        -:  921:
        -:  922:    if (DEBUG){
        -:  923:      printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  924:    }
    #####:  925:  }
        1:  926:  else if (state->coins < getCost(choice1)){
    #####:  927:    printf("That card is too expensive!\n");
        -:  928:
        -:  929:    if (DEBUG){
        -:  930:      printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  931:    }
    #####:  932:  }
        -:  933:  else{
        -:  934:
        -:  935:    if (DEBUG){
        -:  936:      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  937:    }
        -:  938:
        1:  939:    gainCard(choice1, state, 0, currentPlayer);//Gain the card
        1:  940:    x = 0;//No more buying cards
        -:  941:
        -:  942:    if (DEBUG){
        -:  943:      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  944:    }
        -:  945:
        -:  946:  }
        -:  947:      }     
        -:  948:
        -:  949:      //Reset Hand
       14:  950:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        6:  951:  state->hand[currentPlayer][i] = temphand[i];
        6:  952:  temphand[i] = -1;
        6:  953:      }
        -:  954:      //Reset Hand
        -:  955:            
        1:  956:      return 0;
        -:  957:      
        -:  958:    
        -:  959:/*********************************************************************/
        -:  960:
        -:  961:
        -:  962:
        -:  963:    case gardens:
    #####:  964:      return -1;
        -:  965:      
        -:  966:   
        -:  967:/*********************************************************************/
        -:  968:
        -:  969:
        -:  970:
        -:  971:    case mine:
    #####:  972:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  973:
    #####:  974:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  975:  {
    #####:  976:    return -1;
        -:  977:  }
        -:  978:    
    #####:  979:      if (choice2 > treasure_map || choice2 < curse)
        -:  980:  {
    #####:  981:    return -1;
        -:  982:  }
        -:  983:
    #####:  984:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  985:  {
    #####:  986:    return -1;
        -:  987:  }
        -:  988:
    #####:  989:      gainCard(choice2, state, 2, currentPlayer);
        -:  990:
        -:  991:      //discard card from hand
    #####:  992:      discardCard(handPos, currentPlayer, state, 0);
        -:  993:
        -:  994:      //discard trashed card
    #####:  995:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  996:  {
    #####:  997:    if (state->hand[currentPlayer][i] == j)
        -:  998:      {
    #####:  999:        discardCard(i, currentPlayer, state, 0);      
    #####: 1000:        break;
        -: 1001:      }
    #####: 1002:  }
        -: 1003:      
    #####: 1004:      return 0;
        -: 1005:      
        -: 1006:    /*********************************************************************/
        -: 1007:
        -: 1008:
        -: 1009:
        -: 1010:
        -: 1011:    case remodel:
    #####: 1012:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1013:
    #####: 1014:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -: 1015:  {
    #####: 1016:    return -1;
        -: 1017:  }
        -: 1018:
    #####: 1019:      gainCard(choice2, state, 0, currentPlayer);
        -: 1020:
        -: 1021:      //discard card from hand
    #####: 1022:      discardCard(handPos, currentPlayer, state, 0);
        -: 1023:
        -: 1024:      //discard trashed card
    #####: 1025:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1026:  {
    #####: 1027:    if (state->hand[currentPlayer][i] == j)
        -: 1028:      {
    #####: 1029:        discardCard(i, currentPlayer, state, 0);      
    #####: 1030:        break;
        -: 1031:      }
    #####: 1032:  }
        -: 1033:
        -: 1034:
    #####: 1035:      return 0;
        -: 1036:    
        -: 1037:    
        -: 1038:
        -: 1039:
        -: 1040:
        -: 1041:
        -: 1042:
        -: 1043:/*********************************************************************/
        -: 1044:
        -: 1045:   
        -: 1046:    
        -: 1047:
        -: 1048:
        -: 1049:      case smithy:
        1: 1050:        smithyFunction(currentPlayer,handPos,state);
        1: 1051:        return 0 ; 
        -: 1052:
        -: 1053:
        -: 1054:/*********************************************************************/
        -: 1055:
        -: 1056:
        -: 1057:
        -: 1058:
        -: 1059:    case village:
        -: 1060:      //+1 Card
    #####: 1061:      drawCard(currentPlayer, state);
        -: 1062:      
        -: 1063:      //+2 Actions
    #####: 1064:      state->numActions = state->numActions + 2;
        -: 1065:      
        -: 1066:      //discard played card from hand
    #####: 1067:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1068:      return 0;
        -: 1069:    
        -: 1070:
        -: 1071:
        -: 1072:/*********************************************************************/
        -: 1073:
        -: 1074:
        -: 1075:
        -: 1076:
        -: 1077:
        -: 1078:    case baron:
    #####: 1079:      state->numBuys++;//Increase buys by 1!
    #####: 1080:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####: 1081:  int p = 0;//Iterator for hand!
    #####: 1082:  int card_not_discarded = 1;//Flag for discard set!
    #####: 1083:  while(card_not_discarded){
    #####: 1084:    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####: 1085:      state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1086:      state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1087:      state->discardCount[currentPlayer]++;
    #####: 1088:      for (;p < state->handCount[currentPlayer]; p++){
    #####: 1089:        state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####: 1090:      }
    #####: 1091:      state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1092:      state->handCount[currentPlayer]--;
    #####: 1093:      card_not_discarded = 0;//Exit the loop
    #####: 1094:    }
    #####: 1095:    else if (p > state->handCount[currentPlayer]){
        -: 1096:      if(DEBUG) {
        -: 1097:        printf("No estate cards in your hand, invalid choice\n");
        -: 1098:        printf("Must gain an estate if there are any\n");
        -: 1099:      }
    #####: 1100:      if (supplyCount(estate, state) > 0){
    #####: 1101:        gainCard(estate, state, 0, currentPlayer);
    #####: 1102:        state->supplyCount[estate]--;//Decrement estates
    #####: 1103:        if (supplyCount(estate, state) == 0){
    #####: 1104:    isGameOver(state);
    #####: 1105:        }
    #####: 1106:      }
    #####: 1107:      card_not_discarded = 0;//Exit the loop
    #####: 1108:    }
        -: 1109:          
        -: 1110:    else{
    #####: 1111:      p++;//Next card
        -: 1112:    }
        -: 1113:  }
    #####: 1114:      }
        -: 1115:          
        -: 1116:      else{
    #####: 1117:  if (supplyCount(estate, state) > 0){
    #####: 1118:    gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1119:    state->supplyCount[estate]--;//Decrement Estates
    #####: 1120:    if (supplyCount(estate, state) == 0){
    #####: 1121:      isGameOver(state);
    #####: 1122:    }
    #####: 1123:  }
        -: 1124:      }
        -: 1125:      
        -: 1126:      
    #####: 1127:      return 0;
        -: 1128:    
        -: 1129:    
        -: 1130:
        -: 1131:/*********************************************************************/
        -: 1132:
        -: 1133:
        -: 1134:
        -: 1135:
        -: 1136:    case great_hall:
        -: 1137:      //+1 Card
    #####: 1138:      drawCard(currentPlayer, state);
        -: 1139:      
        -: 1140:      //+1 Actions
    #####: 1141:      state->numActions++;
        -: 1142:      
        -: 1143:      //discard card from hand
    #####: 1144:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1145:      return 0;
        -: 1146:    
        -: 1147:    
        -: 1148:
        -: 1149:
        -: 1150:/*********************************************************************/
        -: 1151:
        -: 1152:
        -: 1153:
        -: 1154:
        -: 1155:    case minion:
        -: 1156:      //+1 action
    #####: 1157:      state->numActions++;
        -: 1158:      
        -: 1159:      //discard card from hand
    #####: 1160:      discardCard(handPos, currentPlayer, state, 0);
        -: 1161:      
    #####: 1162:      if (choice1)    //+2 coins
        -: 1163:  {
    #####: 1164:    state->coins = state->coins + 2;
    #####: 1165:  }
        -: 1166:      
    #####: 1167:      else if (choice2)   //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1168:  {
        -: 1169:    //discard hand
    #####: 1170:    while(numHandCards(state) > 0)
        -: 1171:      {
    #####: 1172:        discardCard(handPos, currentPlayer, state, 0);
        -: 1173:      }
        -: 1174:        
        -: 1175:    //draw 4
    #####: 1176:    for (i = 0; i < 4; i++)
        -: 1177:      {
    #####: 1178:        drawCard(currentPlayer, state);
    #####: 1179:      }
        -: 1180:        
        -: 1181:    //other players discard hand and redraw if hand size > 4
    #####: 1182:    for (i = 0; i < state->numPlayers; i++)
        -: 1183:      {
    #####: 1184:        if (i != currentPlayer)
        -: 1185:    {
    #####: 1186:      if ( state->handCount[i] > 4 )
        -: 1187:        {
        -: 1188:          //discard hand
    #####: 1189:          while( state->handCount[i] > 0 )
        -: 1190:      {
    #####: 1191:        discardCard(handPos, i, state, 0);
        -: 1192:      }
        -: 1193:              
        -: 1194:          //draw 4
    #####: 1195:          for (j = 0; j < 4; j++)
        -: 1196:      {
    #####: 1197:        drawCard(i, state);
    #####: 1198:      }
    #####: 1199:        }
    #####: 1200:    }
    #####: 1201:      }
        -: 1202:        
    #####: 1203:  }
    #####: 1204:      return 0;
        -: 1205:    
        -: 1206:   
        -: 1207:
        -: 1208:
        -: 1209:
        -: 1210:
        -: 1211:/*********************************************************************/
        -: 1212:
        -: 1213:
        -: 1214:
        -: 1215:
        -: 1216:    case steward:
    #####: 1217:      if (choice1 == 1)
        -: 1218:  {
        -: 1219:    //+2 cards
    #####: 1220:    drawCard(currentPlayer, state);
    #####: 1221:    drawCard(currentPlayer, state);
    #####: 1222:  }
    #####: 1223:      else if (choice1 == 2)
        -: 1224:  {
        -: 1225:    //+2 coins
    #####: 1226:    state->coins = state->coins + 2;
    #####: 1227:  }
        -: 1228:      else
        -: 1229:  {
        -: 1230:    //trash 2 cards in hand
    #####: 1231:    discardCard(choice2, currentPlayer, state, 1);
    #####: 1232:    discardCard(choice3, currentPlayer, state, 1);
        -: 1233:  }
        -: 1234:      
        -: 1235:      //discard card from hand
    #####: 1236:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1237:      return 0;
        -: 1238:    
        -: 1239:    
        -: 1240:
        -: 1241:
        -: 1242:
        -: 1243:/**********************************************************************/
        -: 1244:
        -: 1245:
        -: 1246:
        -: 1247:
        -: 1248:
        -: 1249:
        -: 1250:
        -: 1251:
        -: 1252:    case tribute:
    #####: 1253:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1254:  if (state->deckCount[nextPlayer] > 0){
    #####: 1255:    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1256:    state->deckCount[nextPlayer]--;
    #####: 1257:  }
    #####: 1258:  else if (state->discardCount[nextPlayer] > 0){
    #####: 1259:    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1260:    state->discardCount[nextPlayer]--;
    #####: 1261:  }
        -: 1262:  else{
        -: 1263:    //No Card to Reveal
        -: 1264:    if (DEBUG){
        -: 1265:      printf("No cards to reveal\n");
        -: 1266:    }
        -: 1267:  }
    #####: 1268:      }
        -: 1269:      
        -: 1270:      else{
    #####: 1271:  if (state->deckCount[nextPlayer] == 0){
    #####: 1272:    for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1273:      state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1274:      state->deckCount[nextPlayer]++;
    #####: 1275:      state->discard[nextPlayer][i] = -1;
    #####: 1276:      state->discardCount[nextPlayer]--;
    #####: 1277:    }
        -: 1278:          
    #####: 1279:    shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1280:  } 
    #####: 1281:  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1282:  state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1283:  state->deckCount[nextPlayer]--;
    #####: 1284:  tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1285:  state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1286:  state->deckCount[nextPlayer]--;
        -: 1287:      }    
        -: 1288:           
    #####: 1289:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1290:  state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1291:  state->playedCardCount++;
    #####: 1292:  tributeRevealedCards[1] = -1;
    #####: 1293:      }
        -: 1294:
    #####: 1295:      for (i = 0; i <= 2; i ++){
    #####: 1296:  if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1297:    state->coins += 2;
    #####: 1298:  }
        -: 1299:        
    #####: 1300:  else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1301:    drawCard(currentPlayer, state);
    #####: 1302:    drawCard(currentPlayer, state);
    #####: 1303:  }
        -: 1304:  else{//Action Card
    #####: 1305:    state->numActions = state->numActions + 2;
        -: 1306:  }
    #####: 1307:      }
        -: 1308:      
    #####: 1309:      return 0;
        -: 1310:    
        -: 1311:   
        -: 1312:
        -: 1313:/*********************************************************************/
        -: 1314:
        -: 1315:
        -: 1316:
        -: 1317:
        -: 1318:
        -: 1319:    case ambassador:
    #####: 1320:      j = 0;    //used to check if player has enough cards to discard
        -: 1321:
    #####: 1322:      if (choice2 > 2 || choice2 < 0)
        -: 1323:  {
    #####: 1324:    return -1;        
        -: 1325:  }
        -: 1326:
    #####: 1327:      if (choice1 == handPos)
        -: 1328:  {
    #####: 1329:    return -1;
        -: 1330:  }
        -: 1331:
    #####: 1332:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1333:  {
    #####: 1334:    if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1335:      {
    #####: 1336:        j++;
    #####: 1337:      }
    #####: 1338:  }
    #####: 1339:      if (j < choice2)
        -: 1340:  {
    #####: 1341:    return -1;        
        -: 1342:  }
        -: 1343:
        -: 1344:      if (DEBUG) 
        -: 1345:  printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1346:
        -: 1347:      //increase supply count for choosen card by amount being discarded
    #####: 1348:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1349:      
        -: 1350:      //each other player gains a copy of revealed card
    #####: 1351:      for (i = 0; i < state->numPlayers; i++)
        -: 1352:  {
    #####: 1353:    if (i != currentPlayer)
        -: 1354:      {
    #####: 1355:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1356:      }
    #####: 1357:  }
        -: 1358:
        -: 1359:      //discard played card from hand
    #####: 1360:      discardCard(handPos, currentPlayer, state, 0);      
        -: 1361:
        -: 1362:      //trash copies of cards returned to supply
    #####: 1363:      for (j = 0; j < choice2; j++)
        -: 1364:  {
    #####: 1365:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1366:      {
    #####: 1367:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1368:    {
    #####: 1369:      discardCard(i, currentPlayer, state, 1);
    #####: 1370:      break;
        -: 1371:    }
    #####: 1372:      }
    #####: 1373:  }     
        -: 1374:
    #####: 1375:      return 0;
        -: 1376:    
        -: 1377:   
        -: 1378:
        -: 1379:/********************************/
        -: 1380:
        -: 1381:
        -: 1382:
        -: 1383:
        -: 1384:
        -: 1385:
        -: 1386:    case cutpurse:
        -: 1387:
    #####: 1388:      updateCoins(currentPlayer, state, 2);
    #####: 1389:      for (i = 0; i < state->numPlayers; i++)
        -: 1390:  {
    #####: 1391:    if (i != currentPlayer)
        -: 1392:      {
    #####: 1393:        for (j = 0; j < state->handCount[i]; j++)
        -: 1394:    {
    #####: 1395:      if (state->hand[i][j] == copper)
        -: 1396:        {
    #####: 1397:          discardCard(j, i, state, 0);
    #####: 1398:          break;
        -: 1399:        }
    #####: 1400:      if (j == state->handCount[i])
        -: 1401:        {
    #####: 1402:          for (k = 0; k < state->handCount[i]; k++)
        -: 1403:      {
        -: 1404:        if (DEBUG)
        -: 1405:          printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1406:      } 
    #####: 1407:          break;
        -: 1408:        }   
    #####: 1409:    }
        -: 1410:          
    #####: 1411:      }
        -: 1412:        
    #####: 1413:  }       
        -: 1414:
        -: 1415:      //discard played card from hand
    #####: 1416:      discardCard(handPos, currentPlayer, state, 0);      
        -: 1417:
    #####: 1418:      return 0;
        -: 1419:
        -: 1420:    
        -: 1421:    
        -: 1422:
        -: 1423:
        -: 1424:/********************************/
        -: 1425:
        -: 1426:
        -: 1427:
        -: 1428:
        -: 1429:
        -: 1430:
        -: 1431:
        -: 1432:
        -: 1433:
        -: 1434:    case embargo: 
        -: 1435:      //+2 Coins
    #####: 1436:      state->coins = state->coins + 2;
        -: 1437:      
        -: 1438:      //see if selected pile is in play
    #####: 1439:      if ( state->supplyCount[choice1] == -1 )
        -: 1440:  {
    #####: 1441:    return -1;
        -: 1442:  }
        -: 1443:      
        -: 1444:
    #####: 1445:       state->embargoTokens[choice1]++;
        -: 1446:      
        -: 1447:      //trash card
    #####: 1448:      discardCard(handPos, currentPlayer, state, 1);    
    #####: 1449:      return 0;
        -: 1450:    
        -: 1451:
        -: 1452:/********************************/
        -: 1453:
        -: 1454:
        -: 1455:   
        -: 1456:
        -: 1457:      
        -: 1458:
        -: 1459:
        -: 1460:
        -: 1461:      // call outpost function 
        -: 1462:      case outpost:
    #####: 1463:      outpostFunction(currentPlayer,handPos,state);
    #####: 1464:      return 0;
        -: 1465:
        -: 1466:
        -: 1467:
        -: 1468:/********************************/
        -: 1469:
        -: 1470:
        -: 1471:
        -: 1472:
        -: 1473:      // call salvegerFunction
        -: 1474:      case salvager:
    #####: 1475:      salvagerFunction(currentPlayer,handPos,choice1,state);
    #####: 1476:      return 0 ;
        -: 1477:
        -: 1478:
        -: 1479:
        -: 1480:
        -: 1481:
        -: 1482:  /********************************/
        -: 1483:
        -: 1484:
        -: 1485:
        -: 1486:
        -: 1487:    
        -: 1488:
        -: 1489:
        -: 1490:
        -: 1491:
        -: 1492:
        -: 1493:    case sea_hag:
    #####: 1494:      for (i = 0; i < state->numPlayers; i++){
    #####: 1495:  if (i != currentPlayer){
    #####: 1496:    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];          state->deckCount[i]--;
    #####: 1497:    state->discardCount[i]++;
    #####: 1498:    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1499:  }
    #####: 1500:      }
    #####: 1501:      return 0;
        -: 1502:    
        -: 1503:   
        -: 1504:
        -: 1505:
        -: 1506:/********************************/
        -: 1507:
        -: 1508:
        -: 1509:
        -: 1510:
        -: 1511:    case treasure_map:
        -: 1512:      //search hand for another treasure_map
    #####: 1513:      index = -1;
    #####: 1514:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1515:  {
    #####: 1516:    if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1517:      {
    #####: 1518:        index = i;
    #####: 1519:        break;
        -: 1520:      }
    #####: 1521:  }
    #####: 1522:      if (index > -1)
        -: 1523:  {
        -: 1524:    //trash both treasure cards
    #####: 1525:    discardCard(handPos, currentPlayer, state, 1);
    #####: 1526:    discardCard(index, currentPlayer, state, 1);
        -: 1527:
        -: 1528:    //gain 4 Gold cards
    #####: 1529:    for (i = 0; i < 4; i++)
        -: 1530:      {
    #####: 1531:        gainCard(gold, state, 1, currentPlayer);
    #####: 1532:      }
        -: 1533:        
        -: 1534:    //return success
    #####: 1535:    return 1;
        -: 1536:  }
        -: 1537:      
        -: 1538:      //no second treasure_map found in hand
    #####: 1539:      return -1;
        -: 1540:    }
        -: 1541:  
    #####: 1542:  return -1;
        3: 1543:}
        -: 1544:
        -: 1545:/********************************/
        -: 1546:
        -: 1547:
        -: 1548:
        -: 1549:
        -: 1550:
        -: 1551:
        -: 1552:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1553:{
        -: 1554:  
        -: 1555:  //if card is not trashed, added to Played pile 
        2: 1556:  if (trashFlag < 1)
        -: 1557:    {
        -: 1558:      //add card to played pile
        2: 1559:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        2: 1560:      state->playedCardCount++;
        2: 1561:    }
        -: 1562:  
        -: 1563:  //set played card to -1
        2: 1564:  state->hand[currentPlayer][handPos] = -1;
        -: 1565:  
        -: 1566:  //remove card from player's hand
        2: 1567:  if ( handPos == (state->handCount[currentPlayer] - 1) )   //last card in hand array is played
        -: 1568:    {
        -: 1569:      //reduce number of cards in hand
    #####: 1570:      state->handCount[currentPlayer]--;
    #####: 1571:    }
        2: 1572:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1573:    {
        -: 1574:      //reduce number of cards in hand
    #####: 1575:      state->handCount[currentPlayer]--;
    #####: 1576:    }
        -: 1577:  else  
        -: 1578:    {
        -: 1579:      //replace discarded card with last card in hand
        2: 1580:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1581:      //set last card to -1
        2: 1582:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1583:      //reduce number of cards in hand
        2: 1584:      state->handCount[currentPlayer]--;
        -: 1585:    }
        -: 1586:  
        2: 1587:  return 0;
        -: 1588:}
        -: 1589:
        -: 1590:
        -: 1591:
        -: 1592:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1593:{
        -: 1594:  //Note: supplyPos is enum of choosen card
        -: 1595:  
        -: 1596:  //check if supply pile is empty (0) or card is not used in game (-1)
        6: 1597:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1598:    {
        1: 1599:      return -1;
        -: 1600:    }
        -: 1601:  
        -: 1602:  //added card for [whoseTurn] current player:
        -: 1603:  // toFlag = 0 : add to discard
        -: 1604:  // toFlag = 1 : add to deck
        -: 1605:  // toFlag = 2 : add to hand
        -: 1606:
        5: 1607:  if (toFlag == 1)
        -: 1608:    {
        1: 1609:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1610:      state->deckCount[player]++;
        1: 1611:    }
        4: 1612:  else if (toFlag == 2)
        -: 1613:    {
        1: 1614:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1615:      state->handCount[player]++;
        1: 1616:    }
        -: 1617:  else
        -: 1618:    {
        3: 1619:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        3: 1620:      state->discardCount[player]++;
        -: 1621:    }
        -: 1622:  
        -: 1623:  //decrease number in supply pile
        5: 1624:  state->supplyCount[supplyPos]--;
        -: 1625:   
        5: 1626:  return 0;
        6: 1627:}
        -: 1628:
        -: 1629:
        -: 1630:
        -: 1631:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1632:{
        -: 1633:  int i;
        -: 1634:  
        -: 1635:  //reset coin count
      447: 1636:  state->coins = 0;
        -: 1637:
        -: 1638:  //add coins for each Treasure card in player's hand
     4044: 1639:  for (i = 0; i < state->handCount[player]; i++)
        -: 1640:    {
     1575: 1641:      if (state->hand[player][i] == copper)
        -: 1642:  {
      794: 1643:    state->coins += 1;
      794: 1644:  }
      781: 1645:      else if (state->hand[player][i] == silver)
        -: 1646:  {
      330: 1647:    state->coins += 2;
      330: 1648:  }
      451: 1649:      else if (state->hand[player][i] == gold)
        -: 1650:  {
      330: 1651:    state->coins += 3;
      330: 1652:  } 
     1575: 1653:    } 
        -: 1654:
        -: 1655:  //add bonus
      447: 1656:  state->coins += bonus;
        -: 1657:
      447: 1658:  return 0;
        -: 1659:}
        -: 1660:
        -: 1661:
        -: 1662://end of dominion.c
        -: 1663:
cardtest4.c:
TESTING  adventurerCard()

 The player_0 gains 2 cards
Test: FAILED
Player_0 has gained 2 treasure cards
Test: FAILED
victory card piles is the same
Province Pile
Test: PASSED
Duchy Pile
Test: PASSED
Estate Pile
Test: PASSED

 kingdom card pile is the same
testing the cards piles . . . 
Test: PASSED
testing the cards piles . . . 
Test: PASSED
testing the cards piles . . . 
Test: PASSED
testing the cards piles . . . 
Test: PASSED
testing the cards piles . . . 
Test: PASSED
testing the cards piles . . . 
Test: PASSED
testing the cards piles . . . 
Test: PASSED
testing the cards piles . . . 
Test: PASSED
testing the cards piles . . . 
Test: PASSED
testing the cards piles . . . 
Test: PASSED

Player_1 remains the same
Hand Count
Test: PASSED
Deck Count
Test: PASSED

Test: Test Failed
Failed  2
File 'cardtest4.c'
Lines executed:98.36% of 61
cardtest4.c:creating 'cardtest4.c.gcov'

File 'dominion.c'
Lines executed:32.15% of 650
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:1
        -:    1:
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include "rngs.h"
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:
        -:   10:
        -:   11:int compare(const void* a, const void* b) {
     3304:   12:  if (*(int*)a > *(int*)b)
    #####:   13:    return 1;
     3304:   14:  if (*(int*)a < *(int*)b)
     1180:   15:    return -1;
     2124:   16:  return 0;
     3304:   17:}
        -:   18:
        -:   19:
        -:   20:
        -:   21:struct gameState* newGame() {
    #####:   22:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   23:  return g;
        -:   24:}
        -:   25:
        -:   26:
        -:   27:
        -:   28:
        -:   29:
        -:   30:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   31:      int k8, int k9, int k10) {
    #####:   32:  int* k = malloc(10 * sizeof(int));
    #####:   33:  k[0] = k1;
    #####:   34:  k[1] = k2;
    #####:   35:  k[2] = k3;
    #####:   36:  k[3] = k4;
    #####:   37:  k[4] = k5;
    #####:   38:  k[5] = k6;
    #####:   39:  k[6] = k7;
    #####:   40:  k[7] = k8;
    #####:   41:  k[8] = k9;
    #####:   42:  k[9] = k10;
    #####:   43:  return k;
        -:   44:}
        -:   45:
        -:   46:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   47:       struct gameState *state) {
        -:   48:
        -:   49:  int i;
        -:   50:  int j;
        -:   51:  int it;     
        -:   52:  //set up random number generator
      117:   53:  SelectStream(1);
      117:   54:  PutSeed((long)randomSeed);
        -:   55:  
        -:   56:  //check number of players
      234:   57:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   58:    {
    #####:   59:      return -1;
        -:   60:    }
        -:   61:
        -:   62:  //set number of players
      117:   63:  state->numPlayers = numPlayers;
        -:   64:
        -:   65:  //check selected kingdom cards are different
     2574:   66:  for (i = 0; i < 10; i++)
        -:   67:    {
    25740:   68:      for (j = 0; j < 10; j++)
        -:   69:        {
    22230:   70:    if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   71:      {
    #####:   72:        return -1;
        -:   73:      }
    11700:   74:        }
     1170:   75:    }
        -:   76:
        -:   77:
        -:   78:  //initialize supply
        -:   79:  ///////////////////////////////
        -:   80:
        -:   81:  //set number of Curse cards
      117:   82:  if (numPlayers == 2)
        -:   83:    {
      117:   84:      state->supplyCount[curse] = 10;
      117:   85:    }
    #####:   86:  else if (numPlayers == 3)
        -:   87:    {
    #####:   88:      state->supplyCount[curse] = 20;
    #####:   89:    }
        -:   90:  else
        -:   91:    {
    #####:   92:      state->supplyCount[curse] = 30;
        -:   93:    }
        -:   94:
        -:   95:  //set number of Victory cards
      117:   96:  if (numPlayers == 2)
        -:   97:    {
      117:   98:      state->supplyCount[estate] = 8;
      117:   99:      state->supplyCount[duchy] = 8;
      117:  100:      state->supplyCount[province] = 8;
      117:  101:    }
        -:  102:  else
        -:  103:    {
    #####:  104:      state->supplyCount[estate] = 12;
    #####:  105:      state->supplyCount[duchy] = 12;
    #####:  106:      state->supplyCount[province] = 12;
        -:  107:    }
        -:  108:
        -:  109:  //set number of Treasure cards
      117:  110:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      117:  111:  state->supplyCount[silver] = 40;
      117:  112:  state->supplyCount[gold] = 30;
        -:  113:
        -:  114:  //set number of Kingdom cards
     4914:  115:  for (i = adventurer; i <= treasure_map; i++)        //loop all cards
        -:  116:    {
    38610:  117:      for (j = 0; j < 10; j++)              //loop chosen cards
        -:  118:  {
    18135:  119:    if (kingdomCards[j] == i)
        -:  120:      {
        -:  121:        //check if card is a 'Victory' Kingdom card
     2223:  122:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  123:    {
      234:  124:      if (numPlayers == 2){ 
      234:  125:        state->supplyCount[i] = 8; 
      234:  126:      }
    #####:  127:      else{ state->supplyCount[i] = 12; }
      234:  128:    }
        -:  129:        else
        -:  130:    {
      936:  131:      state->supplyCount[i] = 10;
        -:  132:    }
     1170:  133:        break;
        -:  134:      }
        -:  135:    else    //card is not in the set choosen for the game
        -:  136:      {
    16965:  137:        state->supplyCount[i] = -1;
        -:  138:      }
    16965:  139:  }
        -:  140:
     2340:  141:    }
        -:  142:
        -:  143:  ////////////////////////
        -:  144:  //supply intilization complete
        -:  145:
        -:  146:  //set player decks
      702:  147:  for (i = 0; i < numPlayers; i++)
        -:  148:    {
      234:  149:      state->deckCount[i] = 0;
     1872:  150:      for (j = 0; j < 3; j++)
        -:  151:  {
      702:  152:    state->deck[i][j] = estate;
      702:  153:    state->deckCount[i]++;
      702:  154:  }
     3744:  155:      for (j = 3; j < 10; j++)
        -:  156:  {
     1638:  157:    state->deck[i][j] = copper;
     1638:  158:    state->deckCount[i]++;    
     1638:  159:  }
      234:  160:    }
        -:  161:
        -:  162:  //shuffle player decks
      702:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
      234:  165:      if ( shuffle(i, state) < 0 )
        -:  166:  {
    #####:  167:    return -1;
        -:  168:  }
      234:  169:    }
        -:  170:
        -:  171:  //draw player hands
      702:  172:  for (i = 0; i < numPlayers; i++)
        -:  173:    {  
        -:  174:      //initialize hand size to zero
      234:  175:      state->handCount[i] = 0;
      234:  176:      state->discardCount[i] = 0;
        -:  177:      //draw 5 cards
        -:  178:      // for (j = 0; j < 5; j++)
        -:  179:      //  {
        -:  180:      //    drawCard(i, state);
        -:  181:      //  }
      234:  182:    }
        -:  183:  
        -:  184:  //set embargo tokens to 0 for all supply piles
     6552:  185:  for (i = 0; i <= treasure_map; i++)
        -:  186:    {
     3159:  187:      state->embargoTokens[i] = 0;
     3159:  188:    }
        -:  189:
        -:  190:  //initialize first player's turn
      117:  191:  state->outpostPlayed = 0;
      117:  192:  state->phase = 0;
      117:  193:  state->numActions = 1;
      117:  194:  state->numBuys = 1;
      117:  195:  state->playedCardCount = 0;
      117:  196:  state->whoseTurn = 0;
      117:  197:  state->handCount[state->whoseTurn] = 0;
        -:  198:  //int it; move to top
        -:  199:
        -:  200:  //Moved draw cards to here, only drawing at the start of a turn
     1404:  201:  for (it = 0; it < 5; it++){
      585:  202:    drawCard(state->whoseTurn, state);
      585:  203:  }
        -:  204:
      117:  205:  updateCoins(state->whoseTurn, state, 0);
        -:  206:
      117:  207:  return 0;
      117:  208:}
        -:  209:
        -:  210:int shuffle(int player, struct gameState *state) {
        -:  211: 
        -:  212:
        -:  213:  int newDeck[MAX_DECK];
      237:  214:  int newDeckPos = 0;
        -:  215:  int card;
        -:  216:  int i;
        -:  217:
      237:  218:  if (state->deckCount[player] < 1)
        1:  219:    return -1;
      236:  220:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  221:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  222:
     5192:  223:  while (state->deckCount[player] > 0) {
     2360:  224:    card = floor(Random() * state->deckCount[player]);
     2360:  225:    newDeck[newDeckPos] = state->deck[player][card];
     2360:  226:    newDeckPos++;
    16574:  227:    for (i = card; i < state->deckCount[player]-1; i++) {
     5927:  228:      state->deck[player][i] = state->deck[player][i+1];
     5927:  229:    }
     2360:  230:    state->deckCount[player]--;
        -:  231:  }
     5192:  232:  for (i = 0; i < newDeckPos; i++) {
     2360:  233:    state->deck[player][i] = newDeck[i];
     2360:  234:    state->deckCount[player]++;
     2360:  235:  }
        -:  236:
      236:  237:  return 0;
      237:  238:}
        -:  239:
        -:  240:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  241:{ 
        -:  242:  int card;
    #####:  243:  int coin_bonus = 0;     //tracks coins gain from actions
        -:  244:
        -:  245:  //check if it is the right phase
    #####:  246:  if (state->phase != 0)
        -:  247:    {
    #####:  248:      return -1;
        -:  249:    }
        -:  250:  
        -:  251:  //check if player has enough actions
    #####:  252:  if ( state->numActions < 1 )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:  
        -:  257:  //get card played
    #####:  258:  card = handCard(handPos, state);
        -:  259:  
        -:  260:  //check if selected card is an action
    #####:  261:  if ( card < adventurer || card > treasure_map )
        -:  262:    {
    #####:  263:      return -1;
        -:  264:    }
        -:  265:  
        -:  266:  //play card
    #####:  267:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  268:    {
    #####:  269:      return -1;
        -:  270:    }
        -:  271:  
        -:  272:  //reduce number of actions
    #####:  273:  state->numActions--;
        -:  274:
        -:  275:  //update coins (Treasure cards may be added with card draws)
    #####:  276:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  277:  
    #####:  278:  return 0;
    #####:  279:}
        -:  280:
        -:  281:int buyCard(int supplyPos, struct gameState *state) {
        -:  282:  int who;
        -:  283:  if (DEBUG){
        -:  284:    printf("Entering buyCard...\n");
        -:  285:  }
        -:  286:
        -:  287:  // I don't know what to do about the phase thing.
        -:  288:
    #####:  289:  who = state->whoseTurn;
        -:  290:
    #####:  291:  if (state->numBuys < 1){
        -:  292:    if (DEBUG)
        -:  293:      printf("You do not have any buys left\n");
    #####:  294:    return -1;
    #####:  295:  } else if (supplyCount(supplyPos, state) <1){
        -:  296:    if (DEBUG)
        -:  297:      printf("There are not any of that type of card left\n");
    #####:  298:    return -1;
    #####:  299:  } else if (state->coins < getCost(supplyPos)){
        -:  300:    if (DEBUG) 
        -:  301:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  302:    return -1;
        -:  303:  } else {
    #####:  304:    state->phase=1;
        -:  305:    //state->supplyCount[supplyPos]--;
    #####:  306:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  307:  
    #####:  308:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  309:    state->numBuys--;
        -:  310:    if (DEBUG)
        -:  311:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  312:  }
        -:  313:
        -:  314:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  315:  //state->discardCount[who]++;
        -:  316:    
    #####:  317:  return 0;
    #####:  318:}
        -:  319:
        -:  320:
        -:  321:
        -:  322:int numHandCards(struct gameState *state) {
    #####:  323:  return state->handCount[ whoseTurn(state) ];
        -:  324:}
        -:  325:
        -:  326:int handCard(int handPos, struct gameState *state) {
    #####:  327:  int currentPlayer = whoseTurn(state);
    #####:  328:  return state->hand[currentPlayer][handPos];
        -:  329:}
        -:  330:
        -:  331:int supplyCount(int card, struct gameState *state) {
        7:  332:  return state->supplyCount[card];
        -:  333:}
        -:  334:
        -:  335:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  336:  int i;
    #####:  337:  int count = 0;
        -:  338:
    #####:  339:  for (i = 0; i < state->deckCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->deck[player][i] == card) count++;
    #####:  342:    }
        -:  343:
    #####:  344:  for (i = 0; i < state->handCount[player]; i++)
        -:  345:    {
    #####:  346:      if (state->hand[player][i] == card) count++;
    #####:  347:    }
        -:  348:
    #####:  349:  for (i = 0; i < state->discardCount[player]; i++)
        -:  350:    {
    #####:  351:      if (state->discard[player][i] == card) count++;
    #####:  352:    }
        -:  353:
    #####:  354:  return count;
        -:  355:}
        -:  356:
        -:  357:int whoseTurn(struct gameState *state) {
        4:  358:  return state->whoseTurn;
        -:  359:}
        -:  360:
        -:  361:
        -:  362:int endTurn(struct gameState *state) {
        -:  363:  int k;
        -:  364:  int i;
    #####:  365:  int currentPlayer = whoseTurn(state);
        -:  366:  
        -:  367:  //Discard hand
    #####:  368:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  369:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  370:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  371:  }
    #####:  372:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  373:    
        -:  374:  //Code for determining the player
    #####:  375:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  376:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  377:  }
        -:  378:  else{
    #####:  379:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  380:  }
        -:  381:
    #####:  382:  state->outpostPlayed = 0;
    #####:  383:  state->phase = 0;
    #####:  384:  state->numActions = 1;
    #####:  385:  state->coins = 0;
    #####:  386:  state->numBuys = 1;
    #####:  387:  state->playedCardCount = 0;
    #####:  388:  state->handCount[state->whoseTurn] = 0;
        -:  389:
        -:  390:  //int k; move to top
        -:  391:  //Next player draws hand
    #####:  392:  for (k = 0; k < 5; k++){
    #####:  393:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  394:  }
        -:  395:
        -:  396:  //Update money
    #####:  397:  updateCoins(state->whoseTurn, state , 0);
        -:  398:
    #####:  399:  return 0;
        -:  400:}
        -:  401:
        -:  402:
        -:  403:
        -:  404:
        -:  405:
        -:  406:int isGameOver(struct gameState *state) {
        -:  407:  int i;
        -:  408:  int j;
        -:  409:  
        -:  410:  //if stack of Province cards is empty, the game ends
        2:  411:  if (state->supplyCount[province] == 0)
        -:  412:    {
    #####:  413:      return 1;
        -:  414:    }
        -:  415:
        -:  416:  //if three supply pile are at 0, the game ends
        2:  417:  j = 0;
      104:  418:  for (i = 0; i < 25; i++)
        -:  419:    {
       50:  420:      if (state->supplyCount[i] == 0)
        -:  421:  {
        3:  422:    j++;
        3:  423:  }
       50:  424:    }
        2:  425:  if ( j >= 3)
        -:  426:    {
        1:  427:      return 1;
        -:  428:    }
        -:  429:
        1:  430:  return 0;
        2:  431:}
        -:  432:
        -:  433:int scoreFor (int player, struct gameState *state) {
        -:  434:
        -:  435:  int i;
    #####:  436:  int score = 0;
        -:  437:  //score from hand
    #####:  438:  for (i = 0; i < state->handCount[player]; i++)
        -:  439:    {
    #####:  440:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  441:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  442:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  443:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  444:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  445:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  446:    }
        -:  447:
        -:  448:  //score from discard
    #####:  449:  for (i = 0; i < state->discardCount[player]; i++)
        -:  450:    {
    #####:  451:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  452:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  453:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  454:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  455:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  456:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  457:    }
        -:  458:
        -:  459:  //score from deck
    #####:  460:  for (i = 0; i < state->discardCount[player]; i++)
        -:  461:    {
    #####:  462:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  463:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  464:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  465:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  466:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  467:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  468:    }
        -:  469:
    #####:  470:  return score;
        -:  471:}
        -:  472:
        -:  473:
        -:  474:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  475:  int i;  
        -:  476:  int j;
        -:  477:  int highScore;
        -:  478:  int currentPlayer;
        -:  479:
        -:  480:  //get score for each player
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  482:    {
        -:  483:      //set unused player scores to -9999
    #####:  484:      if (i >= state->numPlayers)
        -:  485:  {
    #####:  486:    players[i] = -9999;
    #####:  487:  }
        -:  488:      else
        -:  489:  {
    #####:  490:    players[i] = scoreFor (i, state);
        -:  491:  }
    #####:  492:    }
        -:  493:
        -:  494:  //find highest score
    #####:  495:  j = 0;
    #####:  496:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  497:    {
    #####:  498:      if (players[i] > players[j])
        -:  499:  {
    #####:  500:    j = i;
    #####:  501:  }
    #####:  502:    }
    #####:  503:  highScore = players[j];
        -:  504:
        -:  505:  //add 1 to players who had less turns
    #####:  506:  currentPlayer = whoseTurn(state);
    #####:  507:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  508:    {
    #####:  509:      if ( players[i] == highScore && i > currentPlayer )
        -:  510:  {
    #####:  511:    players[i]++;
    #####:  512:  }
    #####:  513:    }
        -:  514:
        -:  515:  //find new highest score
    #####:  516:  j = 0;
    #####:  517:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  518:    {
    #####:  519:      if ( players[i] > players[j] )
        -:  520:  {
    #####:  521:    j = i;
    #####:  522:  }
    #####:  523:    }
    #####:  524:  highScore = players[j];
        -:  525:
        -:  526:  //set winners in array to 1 and rest to 0
    #####:  527:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  528:    {
    #####:  529:      if ( players[i] == highScore )
        -:  530:  {
    #####:  531:    players[i] = 1;
    #####:  532:  }
        -:  533:      else
        -:  534:  {
    #####:  535:    players[i] = 0;
        -:  536:  }
    #####:  537:    }
        -:  538:
    #####:  539:  return 0;
        -:  540:}
        -:  541:
        -:  542:
        -:  543:int drawCard(int player, struct gameState *state)
        -:  544:{ int count;
        -:  545:  int deckCounter;
      598:  546:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  547:    
        -:  548:    //Step 1 Shuffle the discard pile back into a deck
        -:  549:    int i;
        -:  550:    //Move discard to deck
    #####:  551:    for (i = 0; i < state->discardCount[player];i++){
    #####:  552:      state->deck[player][i] = state->discard[player][i];
    #####:  553:      state->discard[player][i] = -1;
    #####:  554:    }
        -:  555:
    #####:  556:    state->deckCount[player] = state->discardCount[player];
    #####:  557:    state->discardCount[player] = 0;//Reset discard
        -:  558:
        -:  559:    //Shufffle the deck
    #####:  560:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  561:   
        -:  562:    if (DEBUG){//Debug statements
        -:  563:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  564:    }
        -:  565:    
    #####:  566:    state->discardCount[player] = 0;
        -:  567:
        -:  568:    //Step 2 Draw Card
    #####:  569:    count = state->handCount[player];//Get current player's hand count
        -:  570:    
        -:  571:    if (DEBUG){//Debug statements
        -:  572:      printf("Current hand count: %d\n", count);
        -:  573:    }
        -:  574:    
    #####:  575:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  576:
    #####:  577:    if (deckCounter == 0)
    #####:  578:      return -1;
        -:  579:
    #####:  580:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  581:    state->deckCount[player]--;
    #####:  582:    state->handCount[player]++;//Increment hand count
    #####:  583:  }
        -:  584:
        -:  585:  else{
      598:  586:    int count = state->handCount[player];//Get current hand count for player
        -:  587:    int deckCounter;
        -:  588:    if (DEBUG){//Debug statements
        -:  589:      printf("Current hand count: %d\n", count);
        -:  590:    }
        -:  591:
      598:  592:    deckCounter = state->deckCount[player];//Create holder for the deck count
      598:  593:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      598:  594:    state->deckCount[player]--;
      598:  595:    state->handCount[player]++;//Increment hand count
        -:  596:  }
        -:  597:
      598:  598:  return 0;
      598:  599:}
        -:  600:
        -:  601:
        -:  602:
        -:  603:
        -:  604:
        -:  605:
        -:  606:
        -:  607:int getCost(int cardNumber)
        -:  608:{
        1:  609:  switch( cardNumber ) 
        -:  610:    {
        -:  611:    case curse:
        1:  612:      return 0;
        -:  613:    case estate:
    #####:  614:      return 2;
        -:  615:    case duchy:
    #####:  616:      return 5;
        -:  617:    case province:
    #####:  618:      return 8;
        -:  619:    case copper:
    #####:  620:      return 0;
        -:  621:    case silver:
    #####:  622:      return 3;
        -:  623:    case gold:
    #####:  624:      return 6;
        -:  625:
        -:  626:
        -:  627:
        -:  628:
        -:  629:
        -:  630:    case adventurer:
    #####:  631:      return 6;
        -:  632:    
        -:  633:
        -:  634:
        -:  635:
        -:  636:    case council_room:
    #####:  637:      return 5;
        -:  638:    
        -:  639:
        -:  640:
        -:  641:    case feast:
    #####:  642:      return 4;
        -:  643:    
        -:  644:
        -:  645:
        -:  646:
        -:  647:
        -:  648:    case gardens:
    #####:  649:      return 4;
        -:  650:    case mine:
    #####:  651:      return 5;
        -:  652:    case remodel:
    #####:  653:      return 4;
        -:  654:
        -:  655:
        -:  656:
        -:  657:    case smithy:
    #####:  658:      return 4;
        -:  659:    
        -:  660:
        -:  661:
        -:  662:
        -:  663:
        -:  664:
        -:  665:    case village:
    #####:  666:      return 3;
        -:  667:    case baron:
    #####:  668:      return 4;
        -:  669:    case great_hall:
    #####:  670:      return 3;
        -:  671:    case minion:
    #####:  672:      return 5;
        -:  673:    case steward:
    #####:  674:      return 3;
        -:  675:    case tribute:
    #####:  676:      return 5;
        -:  677:    case ambassador:
    #####:  678:      return 3;
        -:  679:    case cutpurse:
    #####:  680:      return 4;
        -:  681:    case embargo: 
    #####:  682:      return 2;
        -:  683:    case outpost:
    #####:  684:      return 5;
        -:  685:    case salvager:
    #####:  686:      return 4;
        -:  687:    case sea_hag:
    #####:  688:      return 4;
        -:  689:    case treasure_map:
    #####:  690:      return 4;
        -:  691:    }
        -:  692:  
    #####:  693:  return -1;
        1:  694:}
        -:  695:
        -:  696:
        -:  697:
        -:  698:
        -:  699:
        -:  700:
        -:  701:// adventurerFunction created (REFACTORING)
        -:  702:// For the function Adventure, we should add a variable, and add a 
        -:  703:// parameter to the function. We should also add a structure, and a 
        -:  704:// pointer to a given variable
        -:  705:
        -:  706:void adventurerFunction(int currentPlayer, int temphand[], int z, struct gameState *state){
        -:  707:
        -:  708:  int cardDrawn;
        1:  709:  int drawntreasure = 0;
        -:  710:
        -:  711:  // we should have 3 cards revealed from the deck instead of 2 that was originally
        -:  712:  // placed
        -:  713:
        -:  714:    // bug
        -:  715:    
        8:  716: while(drawntreasure<3){
        -:  717:  
        3:  718:  if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  719:    shuffle(currentPlayer, state);
    #####:  720:  }
        3:  721:  drawCard(currentPlayer, state);
        -:  722:  
        -:  723:
        -:  724:
        3:  725:  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        3:  726:  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        3:  727:    drawntreasure++;
        -:  728:  else{
    #####:  729:    temphand[z]=cardDrawn;
    #####:  730:    state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  731:    z++;
        -:  732:  }
        -:  733:  }
        -:  734:
        -:  735:
        -:  736:    // here we omit the return 0 as it is not required as given previoulsy in the case
        2:  737:      while(z-1 >=0){
    #####:  738:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  739:      z=z-1;
        -:  740:      }
        1:  741:    }
        -:  742:
        -:  743:
        -:  744:// FunctionSmithy created (Refactored)
        -:  745:
        -:  746:void smithyFunction(int currentPlayer, int handPos,struct gameState *state){
        -:  747:
        -:  748:   // for loop enforced in function
        -:  749:
        -:  750:    // bug detected
       10:  751:  for ( int i = 0; i<4;i++)
        -:  752:  {
        -:  753:
        4:  754:    drawCard(currentPlayer,state);
        -:  755:
        4:  756:  }
        -:  757:
        -:  758:        //discard card from hand
        1:  759:        discardCard(handPos, currentPlayer,state,0);
        -:  760:
        -:  761:        // Since void function we dont return 0
        1:  762:}
        -:  763:
        -:  764:
        -:  765:
        -:  766:// function_council_room created (refactored)
        -:  767:
        -:  768:void council_roomFunction( int currentPlayer, int handPos, struct gameState *state){
        -:  769:
        -:  770:    // bug detected
        -:  771:   
       12:  772:   for( int i = 0; i<5 ; i++)
        -:  773:    {
        -:  774:
        5:  775:      drawCard(currentPlayer,state);
        5:  776:    }
        -:  777:
        -:  778:      //+1 Buy
        1:  779:    state->numBuys++;
        -:  780:
        -:  781:
        -:  782:      //Each other player draws a card
        6:  783:      for (int i = 0; i < state->numPlayers; i++)
        -:  784:  {
        2:  785:    if ( i != currentPlayer )
        -:  786:      {
        1:  787:        drawCard(i, state);
        1:  788:      }
        2:  789:  }
        -:  790:
        -:  791:  // put played card in placed card pile
        1:  792:  discardCard(handPos,currentPlayer,state, 0);
        -:  793:
        1:  794:}
        -:  795:
        -:  796:// functionSalvager created(refactored)
        -:  797:
        -:  798:void salvagerFunction(int choice1,int handPos,int currentPlayer,struct gameState *state)
        -:  799:{
        -:  800:  
        -:  801:
        -:  802:  //+1 buy
    #####:  803:      state->numBuys++;
        -:  804:      
    #####:  805:      if (choice1)
        -:  806:  {
        -:  807:    //gain coins equal to trashed card
    #####:  808:    state->coins = state->coins + getCost( handCard(choice1, state) );
        -:  809:   
        -:  810:    //trash card
    #####:  811:    discardCard(choice1, currentPlayer, state, 1);  
    #####:  812:  }
        -:  813:      
        -:  814:      //discard card
    #####:  815:      discardCard(handPos, currentPlayer, state, 0);
        -:  816:    
    #####:  817:}
        -:  818:
        -:  819:
        -:  820:
        -:  821:
        -:  822:// outpostFunction (REFACTORED)
        -:  823:void outpostFunction(int handPos,int currentPlayer, struct gameState *state){
        -:  824:
        -:  825: //bug 
        -:  826:
        -:  827:  //set outpost flag
    #####:  828:      state->outpostPlayed++;
        -:  829:      
        -:  830:      //discard card
    #####:  831:      discardCard(handPos, currentPlayer, state, 0);
        -:  832:  
    #####:  833:}
        -:  834:
        -:  835:
        -:  836:
        -:  837:
        -:  838:
        -:  839:
        -:  840:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  841:{
        -:  842:  int i;
        -:  843:  int j;
        -:  844:  int k;
        -:  845:  int x;
        -:  846:  int index;
        4:  847:  int currentPlayer = whoseTurn(state);
        4:  848:  int nextPlayer = currentPlayer + 1;
        -:  849:
        4:  850:  int tributeRevealedCards[2] = {-1, -1};
        -:  851:  int temphand[MAX_HAND];// moved above the if statement
        4:  852:  int drawntreasure=0;
        -:  853:  int cardDrawn;
        4:  854:  int z = 0;// this is the counter for the temp hand
        4:  855:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  856:    nextPlayer = 0;
    #####:  857:  }
        -:  858:  
        -:  859:  
        -:  860:  //uses switch to select card and perform actions
        -:  861:  
        -:  862:
        -:  863:
        -:  864:
        4:  865:  switch( card ) 
        -:  866:    {
        -:  867:    
        -:  868:
        -:  869:
        -:  870:/*********************************************************************/
        -:  871:
        -:  872:
        -:  873:
        -:  874:
        -:  875:    case adventurer:
        -:  876:    // CALL THE FUNCTION
        1:  877:        adventurerFunction(currentPlayer,temphand,z,state);
        1:  878:        return 0; 
        -:  879:
        -:  880:
        -:  881:/*********************************************************************/
        -:  882:
        -:  883:
        -:  884:
        -:  885:// call the council_room function
        -:  886:
        -:  887:    case council_room:
        1:  888:          council_roomFunction(currentPlayer,handPos,state);
        1:  889:          return 0; 
        -:  890:
        -:  891:
        -:  892:
        -:  893:      
        -:  894:   
        -:  895:
        -:  896:
        -:  897:
        -:  898:/*********************************************************************/
        -:  899:
        -:  900:    
        -:  901:      
        -:  902:
        -:  903:
        -:  904:
        -:  905:    case feast:
        -:  906:      //gain card with cost up to 5
        -:  907:      //Backup hand
       14:  908:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        6:  909:  temphand[i] = state->hand[currentPlayer][i];//Backup card
        6:  910:  state->hand[currentPlayer][i] = -1;//Set to nothing
        6:  911:      }
        -:  912:      //Backup hand
        -:  913:
        -:  914:      //Update Coins for Buy
        1:  915:      updateCoins(currentPlayer, state, 5);
        1:  916:      x = 1;//Condition to loop on
        4:  917:      while( x == 1) {//Buy one card
        1:  918:  if (supplyCount(choice1, state) <= 0){
        -:  919:    if (DEBUG)
        -:  920:      printf("None of that card left, sorry!\n");
        -:  921:
        -:  922:    if (DEBUG){
        -:  923:      printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  924:    }
    #####:  925:  }
        1:  926:  else if (state->coins < getCost(choice1)){
    #####:  927:    printf("That card is too expensive!\n");
        -:  928:
        -:  929:    if (DEBUG){
        -:  930:      printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  931:    }
    #####:  932:  }
        -:  933:  else{
        -:  934:
        -:  935:    if (DEBUG){
        -:  936:      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  937:    }
        -:  938:
        1:  939:    gainCard(choice1, state, 0, currentPlayer);//Gain the card
        1:  940:    x = 0;//No more buying cards
        -:  941:
        -:  942:    if (DEBUG){
        -:  943:      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  944:    }
        -:  945:
        -:  946:  }
        -:  947:      }     
        -:  948:
        -:  949:      //Reset Hand
       14:  950:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        6:  951:  state->hand[currentPlayer][i] = temphand[i];
        6:  952:  temphand[i] = -1;
        6:  953:      }
        -:  954:      //Reset Hand
        -:  955:            
        1:  956:      return 0;
        -:  957:      
        -:  958:    
        -:  959:/*********************************************************************/
        -:  960:
        -:  961:
        -:  962:
        -:  963:    case gardens:
    #####:  964:      return -1;
        -:  965:      
        -:  966:   
        -:  967:/*********************************************************************/
        -:  968:
        -:  969:
        -:  970:
        -:  971:    case mine:
    #####:  972:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  973:
    #####:  974:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  975:  {
    #####:  976:    return -1;
        -:  977:  }
        -:  978:    
    #####:  979:      if (choice2 > treasure_map || choice2 < curse)
        -:  980:  {
    #####:  981:    return -1;
        -:  982:  }
        -:  983:
    #####:  984:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  985:  {
    #####:  986:    return -1;
        -:  987:  }
        -:  988:
    #####:  989:      gainCard(choice2, state, 2, currentPlayer);
        -:  990:
        -:  991:      //discard card from hand
    #####:  992:      discardCard(handPos, currentPlayer, state, 0);
        -:  993:
        -:  994:      //discard trashed card
    #####:  995:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  996:  {
    #####:  997:    if (state->hand[currentPlayer][i] == j)
        -:  998:      {
    #####:  999:        discardCard(i, currentPlayer, state, 0);      
    #####: 1000:        break;
        -: 1001:      }
    #####: 1002:  }
        -: 1003:      
    #####: 1004:      return 0;
        -: 1005:      
        -: 1006:    /*********************************************************************/
        -: 1007:
        -: 1008:
        -: 1009:
        -: 1010:
        -: 1011:    case remodel:
    #####: 1012:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1013:
    #####: 1014:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -: 1015:  {
    #####: 1016:    return -1;
        -: 1017:  }
        -: 1018:
    #####: 1019:      gainCard(choice2, state, 0, currentPlayer);
        -: 1020:
        -: 1021:      //discard card from hand
    #####: 1022:      discardCard(handPos, currentPlayer, state, 0);
        -: 1023:
        -: 1024:      //discard trashed card
    #####: 1025:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1026:  {
    #####: 1027:    if (state->hand[currentPlayer][i] == j)
        -: 1028:      {
    #####: 1029:        discardCard(i, currentPlayer, state, 0);      
    #####: 1030:        break;
        -: 1031:      }
    #####: 1032:  }
        -: 1033:
        -: 1034:
    #####: 1035:      return 0;
        -: 1036:    
        -: 1037:    
        -: 1038:
        -: 1039:
        -: 1040:
        -: 1041:
        -: 1042:
        -: 1043:/*********************************************************************/
        -: 1044:
        -: 1045:   
        -: 1046:    
        -: 1047:
        -: 1048:
        -: 1049:      case smithy:
        1: 1050:        smithyFunction(currentPlayer,handPos,state);
        1: 1051:        return 0 ; 
        -: 1052:
        -: 1053:
        -: 1054:/*********************************************************************/
        -: 1055:
        -: 1056:
        -: 1057:
        -: 1058:
        -: 1059:    case village:
        -: 1060:      //+1 Card
    #####: 1061:      drawCard(currentPlayer, state);
        -: 1062:      
        -: 1063:      //+2 Actions
    #####: 1064:      state->numActions = state->numActions + 2;
        -: 1065:      
        -: 1066:      //discard played card from hand
    #####: 1067:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1068:      return 0;
        -: 1069:    
        -: 1070:
        -: 1071:
        -: 1072:/*********************************************************************/
        -: 1073:
        -: 1074:
        -: 1075:
        -: 1076:
        -: 1077:
        -: 1078:    case baron:
    #####: 1079:      state->numBuys++;//Increase buys by 1!
    #####: 1080:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####: 1081:  int p = 0;//Iterator for hand!
    #####: 1082:  int card_not_discarded = 1;//Flag for discard set!
    #####: 1083:  while(card_not_discarded){
    #####: 1084:    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####: 1085:      state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1086:      state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1087:      state->discardCount[currentPlayer]++;
    #####: 1088:      for (;p < state->handCount[currentPlayer]; p++){
    #####: 1089:        state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####: 1090:      }
    #####: 1091:      state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1092:      state->handCount[currentPlayer]--;
    #####: 1093:      card_not_discarded = 0;//Exit the loop
    #####: 1094:    }
    #####: 1095:    else if (p > state->handCount[currentPlayer]){
        -: 1096:      if(DEBUG) {
        -: 1097:        printf("No estate cards in your hand, invalid choice\n");
        -: 1098:        printf("Must gain an estate if there are any\n");
        -: 1099:      }
    #####: 1100:      if (supplyCount(estate, state) > 0){
    #####: 1101:        gainCard(estate, state, 0, currentPlayer);
    #####: 1102:        state->supplyCount[estate]--;//Decrement estates
    #####: 1103:        if (supplyCount(estate, state) == 0){
    #####: 1104:    isGameOver(state);
    #####: 1105:        }
    #####: 1106:      }
    #####: 1107:      card_not_discarded = 0;//Exit the loop
    #####: 1108:    }
        -: 1109:          
        -: 1110:    else{
    #####: 1111:      p++;//Next card
        -: 1112:    }
        -: 1113:  }
    #####: 1114:      }
        -: 1115:          
        -: 1116:      else{
    #####: 1117:  if (supplyCount(estate, state) > 0){
    #####: 1118:    gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1119:    state->supplyCount[estate]--;//Decrement Estates
    #####: 1120:    if (supplyCount(estate, state) == 0){
    #####: 1121:      isGameOver(state);
    #####: 1122:    }
    #####: 1123:  }
        -: 1124:      }
        -: 1125:      
        -: 1126:      
    #####: 1127:      return 0;
        -: 1128:    
        -: 1129:    
        -: 1130:
        -: 1131:/*********************************************************************/
        -: 1132:
        -: 1133:
        -: 1134:
        -: 1135:
        -: 1136:    case great_hall:
        -: 1137:      //+1 Card
    #####: 1138:      drawCard(currentPlayer, state);
        -: 1139:      
        -: 1140:      //+1 Actions
    #####: 1141:      state->numActions++;
        -: 1142:      
        -: 1143:      //discard card from hand
    #####: 1144:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1145:      return 0;
        -: 1146:    
        -: 1147:    
        -: 1148:
        -: 1149:
        -: 1150:/*********************************************************************/
        -: 1151:
        -: 1152:
        -: 1153:
        -: 1154:
        -: 1155:    case minion:
        -: 1156:      //+1 action
    #####: 1157:      state->numActions++;
        -: 1158:      
        -: 1159:      //discard card from hand
    #####: 1160:      discardCard(handPos, currentPlayer, state, 0);
        -: 1161:      
    #####: 1162:      if (choice1)    //+2 coins
        -: 1163:  {
    #####: 1164:    state->coins = state->coins + 2;
    #####: 1165:  }
        -: 1166:      
    #####: 1167:      else if (choice2)   //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1168:  {
        -: 1169:    //discard hand
    #####: 1170:    while(numHandCards(state) > 0)
        -: 1171:      {
    #####: 1172:        discardCard(handPos, currentPlayer, state, 0);
        -: 1173:      }
        -: 1174:        
        -: 1175:    //draw 4
    #####: 1176:    for (i = 0; i < 4; i++)
        -: 1177:      {
    #####: 1178:        drawCard(currentPlayer, state);
    #####: 1179:      }
        -: 1180:        
        -: 1181:    //other players discard hand and redraw if hand size > 4
    #####: 1182:    for (i = 0; i < state->numPlayers; i++)
        -: 1183:      {
    #####: 1184:        if (i != currentPlayer)
        -: 1185:    {
    #####: 1186:      if ( state->handCount[i] > 4 )
        -: 1187:        {
        -: 1188:          //discard hand
    #####: 1189:          while( state->handCount[i] > 0 )
        -: 1190:      {
    #####: 1191:        discardCard(handPos, i, state, 0);
        -: 1192:      }
        -: 1193:              
        -: 1194:          //draw 4
    #####: 1195:          for (j = 0; j < 4; j++)
        -: 1196:      {
    #####: 1197:        drawCard(i, state);
    #####: 1198:      }
    #####: 1199:        }
    #####: 1200:    }
    #####: 1201:      }
        -: 1202:        
    #####: 1203:  }
    #####: 1204:      return 0;
        -: 1205:    
        -: 1206:   
        -: 1207:
        -: 1208:
        -: 1209:
        -: 1210:
        -: 1211:/*********************************************************************/
        -: 1212:
        -: 1213:
        -: 1214:
        -: 1215:
        -: 1216:    case steward:
    #####: 1217:      if (choice1 == 1)
        -: 1218:  {
        -: 1219:    //+2 cards
    #####: 1220:    drawCard(currentPlayer, state);
    #####: 1221:    drawCard(currentPlayer, state);
    #####: 1222:  }
    #####: 1223:      else if (choice1 == 2)
        -: 1224:  {
        -: 1225:    //+2 coins
    #####: 1226:    state->coins = state->coins + 2;
    #####: 1227:  }
        -: 1228:      else
        -: 1229:  {
        -: 1230:    //trash 2 cards in hand
    #####: 1231:    discardCard(choice2, currentPlayer, state, 1);
    #####: 1232:    discardCard(choice3, currentPlayer, state, 1);
        -: 1233:  }
        -: 1234:      
        -: 1235:      //discard card from hand
    #####: 1236:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1237:      return 0;
        -: 1238:    
        -: 1239:    
        -: 1240:
        -: 1241:
        -: 1242:
        -: 1243:/**********************************************************************/
        -: 1244:
        -: 1245:
        -: 1246:
        -: 1247:
        -: 1248:
        -: 1249:
        -: 1250:
        -: 1251:
        -: 1252:    case tribute:
    #####: 1253:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1254:  if (state->deckCount[nextPlayer] > 0){
    #####: 1255:    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1256:    state->deckCount[nextPlayer]--;
    #####: 1257:  }
    #####: 1258:  else if (state->discardCount[nextPlayer] > 0){
    #####: 1259:    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1260:    state->discardCount[nextPlayer]--;
    #####: 1261:  }
        -: 1262:  else{
        -: 1263:    //No Card to Reveal
        -: 1264:    if (DEBUG){
        -: 1265:      printf("No cards to reveal\n");
        -: 1266:    }
        -: 1267:  }
    #####: 1268:      }
        -: 1269:      
        -: 1270:      else{
    #####: 1271:  if (state->deckCount[nextPlayer] == 0){
    #####: 1272:    for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1273:      state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1274:      state->deckCount[nextPlayer]++;
    #####: 1275:      state->discard[nextPlayer][i] = -1;
    #####: 1276:      state->discardCount[nextPlayer]--;
    #####: 1277:    }
        -: 1278:          
    #####: 1279:    shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1280:  } 
    #####: 1281:  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1282:  state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1283:  state->deckCount[nextPlayer]--;
    #####: 1284:  tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1285:  state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1286:  state->deckCount[nextPlayer]--;
        -: 1287:      }    
        -: 1288:           
    #####: 1289:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1290:  state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1291:  state->playedCardCount++;
    #####: 1292:  tributeRevealedCards[1] = -1;
    #####: 1293:      }
        -: 1294:
    #####: 1295:      for (i = 0; i <= 2; i ++){
    #####: 1296:  if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1297:    state->coins += 2;
    #####: 1298:  }
        -: 1299:        
    #####: 1300:  else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1301:    drawCard(currentPlayer, state);
    #####: 1302:    drawCard(currentPlayer, state);
    #####: 1303:  }
        -: 1304:  else{//Action Card
    #####: 1305:    state->numActions = state->numActions + 2;
        -: 1306:  }
    #####: 1307:      }
        -: 1308:      
    #####: 1309:      return 0;
        -: 1310:    
        -: 1311:   
        -: 1312:
        -: 1313:/*********************************************************************/
        -: 1314:
        -: 1315:
        -: 1316:
        -: 1317:
        -: 1318:
        -: 1319:    case ambassador:
    #####: 1320:      j = 0;    //used to check if player has enough cards to discard
        -: 1321:
    #####: 1322:      if (choice2 > 2 || choice2 < 0)
        -: 1323:  {
    #####: 1324:    return -1;        
        -: 1325:  }
        -: 1326:
    #####: 1327:      if (choice1 == handPos)
        -: 1328:  {
    #####: 1329:    return -1;
        -: 1330:  }
        -: 1331:
    #####: 1332:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1333:  {
    #####: 1334:    if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1335:      {
    #####: 1336:        j++;
    #####: 1337:      }
    #####: 1338:  }
    #####: 1339:      if (j < choice2)
        -: 1340:  {
    #####: 1341:    return -1;        
        -: 1342:  }
        -: 1343:
        -: 1344:      if (DEBUG) 
        -: 1345:  printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1346:
        -: 1347:      //increase supply count for choosen card by amount being discarded
    #####: 1348:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1349:      
        -: 1350:      //each other player gains a copy of revealed card
    #####: 1351:      for (i = 0; i < state->numPlayers; i++)
        -: 1352:  {
    #####: 1353:    if (i != currentPlayer)
        -: 1354:      {
    #####: 1355:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1356:      }
    #####: 1357:  }
        -: 1358:
        -: 1359:      //discard played card from hand
    #####: 1360:      discardCard(handPos, currentPlayer, state, 0);      
        -: 1361:
        -: 1362:      //trash copies of cards returned to supply
    #####: 1363:      for (j = 0; j < choice2; j++)
        -: 1364:  {
    #####: 1365:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1366:      {
    #####: 1367:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1368:    {
    #####: 1369:      discardCard(i, currentPlayer, state, 1);
    #####: 1370:      break;
        -: 1371:    }
    #####: 1372:      }
    #####: 1373:  }     
        -: 1374:
    #####: 1375:      return 0;
        -: 1376:    
        -: 1377:   
        -: 1378:
        -: 1379:/********************************/
        -: 1380:
        -: 1381:
        -: 1382:
        -: 1383:
        -: 1384:
        -: 1385:
        -: 1386:    case cutpurse:
        -: 1387:
    #####: 1388:      updateCoins(currentPlayer, state, 2);
    #####: 1389:      for (i = 0; i < state->numPlayers; i++)
        -: 1390:  {
    #####: 1391:    if (i != currentPlayer)
        -: 1392:      {
    #####: 1393:        for (j = 0; j < state->handCount[i]; j++)
        -: 1394:    {
    #####: 1395:      if (state->hand[i][j] == copper)
        -: 1396:        {
    #####: 1397:          discardCard(j, i, state, 0);
    #####: 1398:          break;
        -: 1399:        }
    #####: 1400:      if (j == state->handCount[i])
        -: 1401:        {
    #####: 1402:          for (k = 0; k < state->handCount[i]; k++)
        -: 1403:      {
        -: 1404:        if (DEBUG)
        -: 1405:          printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1406:      } 
    #####: 1407:          break;
        -: 1408:        }   
    #####: 1409:    }
        -: 1410:          
    #####: 1411:      }
        -: 1412:        
    #####: 1413:  }       
        -: 1414:
        -: 1415:      //discard played card from hand
    #####: 1416:      discardCard(handPos, currentPlayer, state, 0);      
        -: 1417:
    #####: 1418:      return 0;
        -: 1419:
        -: 1420:    
        -: 1421:    
        -: 1422:
        -: 1423:
        -: 1424:/********************************/
        -: 1425:
        -: 1426:
        -: 1427:
        -: 1428:
        -: 1429:
        -: 1430:
        -: 1431:
        -: 1432:
        -: 1433:
        -: 1434:    case embargo: 
        -: 1435:      //+2 Coins
    #####: 1436:      state->coins = state->coins + 2;
        -: 1437:      
        -: 1438:      //see if selected pile is in play
    #####: 1439:      if ( state->supplyCount[choice1] == -1 )
        -: 1440:  {
    #####: 1441:    return -1;
        -: 1442:  }
        -: 1443:      
        -: 1444:
    #####: 1445:       state->embargoTokens[choice1]++;
        -: 1446:      
        -: 1447:      //trash card
    #####: 1448:      discardCard(handPos, currentPlayer, state, 1);    
    #####: 1449:      return 0;
        -: 1450:    
        -: 1451:
        -: 1452:/********************************/
        -: 1453:
        -: 1454:
        -: 1455:   
        -: 1456:
        -: 1457:      
        -: 1458:
        -: 1459:
        -: 1460:
        -: 1461:      // call outpost function 
        -: 1462:      case outpost:
    #####: 1463:      outpostFunction(currentPlayer,handPos,state);
    #####: 1464:      return 0;
        -: 1465:
        -: 1466:
        -: 1467:
        -: 1468:/********************************/
        -: 1469:
        -: 1470:
        -: 1471:
        -: 1472:
        -: 1473:      // call salvegerFunction
        -: 1474:      case salvager:
    #####: 1475:      salvagerFunction(currentPlayer,handPos,choice1,state);
    #####: 1476:      return 0 ;
        -: 1477:
        -: 1478:
        -: 1479:
        -: 1480:
        -: 1481:
        -: 1482:  /********************************/
        -: 1483:
        -: 1484:
        -: 1485:
        -: 1486:
        -: 1487:    
        -: 1488:
        -: 1489:
        -: 1490:
        -: 1491:
        -: 1492:
        -: 1493:    case sea_hag:
    #####: 1494:      for (i = 0; i < state->numPlayers; i++){
    #####: 1495:  if (i != currentPlayer){
    #####: 1496:    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];          state->deckCount[i]--;
    #####: 1497:    state->discardCount[i]++;
    #####: 1498:    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1499:  }
    #####: 1500:      }
    #####: 1501:      return 0;
        -: 1502:    
        -: 1503:   
        -: 1504:
        -: 1505:
        -: 1506:/********************************/
        -: 1507:
        -: 1508:
        -: 1509:
        -: 1510:
        -: 1511:    case treasure_map:
        -: 1512:      //search hand for another treasure_map
    #####: 1513:      index = -1;
    #####: 1514:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1515:  {
    #####: 1516:    if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1517:      {
    #####: 1518:        index = i;
    #####: 1519:        break;
        -: 1520:      }
    #####: 1521:  }
    #####: 1522:      if (index > -1)
        -: 1523:  {
        -: 1524:    //trash both treasure cards
    #####: 1525:    discardCard(handPos, currentPlayer, state, 1);
    #####: 1526:    discardCard(index, currentPlayer, state, 1);
        -: 1527:
        -: 1528:    //gain 4 Gold cards
    #####: 1529:    for (i = 0; i < 4; i++)
        -: 1530:      {
    #####: 1531:        gainCard(gold, state, 1, currentPlayer);
    #####: 1532:      }
        -: 1533:        
        -: 1534:    //return success
    #####: 1535:    return 1;
        -: 1536:  }
        -: 1537:      
        -: 1538:      //no second treasure_map found in hand
    #####: 1539:      return -1;
        -: 1540:    }
        -: 1541:  
    #####: 1542:  return -1;
        4: 1543:}
        -: 1544:
        -: 1545:/********************************/
        -: 1546:
        -: 1547:
        -: 1548:
        -: 1549:
        -: 1550:
        -: 1551:
        -: 1552:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1553:{
        -: 1554:  
        -: 1555:  //if card is not trashed, added to Played pile 
        2: 1556:  if (trashFlag < 1)
        -: 1557:    {
        -: 1558:      //add card to played pile
        2: 1559:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        2: 1560:      state->playedCardCount++;
        2: 1561:    }
        -: 1562:  
        -: 1563:  //set played card to -1
        2: 1564:  state->hand[currentPlayer][handPos] = -1;
        -: 1565:  
        -: 1566:  //remove card from player's hand
        2: 1567:  if ( handPos == (state->handCount[currentPlayer] - 1) )   //last card in hand array is played
        -: 1568:    {
        -: 1569:      //reduce number of cards in hand
    #####: 1570:      state->handCount[currentPlayer]--;
    #####: 1571:    }
        2: 1572:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1573:    {
        -: 1574:      //reduce number of cards in hand
    #####: 1575:      state->handCount[currentPlayer]--;
    #####: 1576:    }
        -: 1577:  else  
        -: 1578:    {
        -: 1579:      //replace discarded card with last card in hand
        2: 1580:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1581:      //set last card to -1
        2: 1582:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1583:      //reduce number of cards in hand
        2: 1584:      state->handCount[currentPlayer]--;
        -: 1585:    }
        -: 1586:  
        2: 1587:  return 0;
        -: 1588:}
        -: 1589:
        -: 1590:
        -: 1591:
        -: 1592:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1593:{
        -: 1594:  //Note: supplyPos is enum of choosen card
        -: 1595:  
        -: 1596:  //check if supply pile is empty (0) or card is not used in game (-1)
        6: 1597:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1598:    {
        1: 1599:      return -1;
        -: 1600:    }
        -: 1601:  
        -: 1602:  //added card for [whoseTurn] current player:
        -: 1603:  // toFlag = 0 : add to discard
        -: 1604:  // toFlag = 1 : add to deck
        -: 1605:  // toFlag = 2 : add to hand
        -: 1606:
        5: 1607:  if (toFlag == 1)
        -: 1608:    {
        1: 1609:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1610:      state->deckCount[player]++;
        1: 1611:    }
        4: 1612:  else if (toFlag == 2)
        -: 1613:    {
        1: 1614:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1615:      state->handCount[player]++;
        1: 1616:    }
        -: 1617:  else
        -: 1618:    {
        3: 1619:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        3: 1620:      state->discardCount[player]++;
        -: 1621:    }
        -: 1622:  
        -: 1623:  //decrease number in supply pile
        5: 1624:  state->supplyCount[supplyPos]--;
        -: 1625:   
        5: 1626:  return 0;
        6: 1627:}
        -: 1628:
        -: 1629:
        -: 1630:
        -: 1631:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1632:{
        -: 1633:  int i;
        -: 1634:  
        -: 1635:  //reset coin count
      448: 1636:  state->coins = 0;
        -: 1637:
        -: 1638:  //add coins for each Treasure card in player's hand
     4056: 1639:  for (i = 0; i < state->handCount[player]; i++)
        -: 1640:    {
     1580: 1641:      if (state->hand[player][i] == copper)
        -: 1642:  {
      798: 1643:    state->coins += 1;
      798: 1644:  }
      782: 1645:      else if (state->hand[player][i] == silver)
        -: 1646:  {
      330: 1647:    state->coins += 2;
      330: 1648:  }
      452: 1649:      else if (state->hand[player][i] == gold)
        -: 1650:  {
      330: 1651:    state->coins += 3;
      330: 1652:  } 
     1580: 1653:    } 
        -: 1654:
        -: 1655:  //add bonus
      448: 1656:  state->coins += bonus;
        -: 1657:
      448: 1658:  return 0;
        -: 1659:}
        -: 1660:
        -: 1661:
        -: 1662://end of dominion.c
        -: 1663:
