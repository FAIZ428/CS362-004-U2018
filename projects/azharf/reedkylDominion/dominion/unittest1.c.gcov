        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <assert.h>
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:#include <stdlib.h>
        -:    8:#include <string.h>
        -:    9:
        -:   10:// verify the test
        -:   11:int counterVariable = 0 ; 
        -:   12:
        -:   13:
        -:   14:// assertTrue function to collect coverage
        -:   15:void assertTrueFunction(int x, int y){
        -:   16:
        6:   17:    if (x == y){
        6:   18:        printf("Test: PASSED\n" );
        6:   19:    }
        -:   20:
        -:   21:
        -:   22:    else {
    #####:   23:        printf("Test: FAILED" );
        -:   24:  
    #####:   25:    counterVariable++; 
        -:   26:}
        -:   27:
        6:   28:}
        -:   29:
        -:   30:
        -:   31:// main driver to test out the function
        -:   32:
        -:   33:int main(){
        -:   34:
        -:   35:	int player; 
        -:   36:	
        2:   37:	int numPlayers = 2;
        -:   38:
        -:   39:	// the kingdom cards
        2:   40:	int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   41:               , remodel, smithy, village, baron, great_hall};
        -:   42:
        -:   43:
        -:   44:     struct gameState G;
        2:   45:     int seed = 2000;
        -:   46:
        2:   47:     printf ("TESTING getCost():\n");
        -:   48:	
        2:   49:     memset(&G,23,sizeof(struct gameState));   // clear the game state
        -:   50:	
        2:   51:     initializeGame(numPlayers,k, seed, &G);
        -:   52:     
        2:   53:     G.deckCount[player] = 0; 
        -:   54:	
        2:   55:     printf("\nPlayer deck count = 0\n");
        -:   56:    
        2:   57:     assertTrueFunction(shuffle(player,&G),-1);
        -:   58:	 
        -:   59:
        -:   60:     
        2:   61:	printf("\n The player decks is 10 previously and post shuffle\n");
        -:   62:	
        2:   63:    G.deckCount[player] = 10; 
        -:   64:	
        2:   65:    shuffle(player,&G);
        -:   66:   
        2:   67:    assertTrueFunction(G.deckCount[player],10); 
        -:   68:
        -:   69:   	
        2:   70:   	 printf("\n The cards have been shuffled\n");
        -:   71:     
        2:   72:     int before_shuffledCard = G.deck[player][0];
        -:   73:     
        2:   74:     shuffle(player,&G);
        -:   75:     
        2:   76:     int after_suffledCard = G.deck[player][0];
        -:   77:
        2:   78:     if(before_shuffledCard != after_suffledCard){
        -:   79:
        2:   80:     	assertTrueFunction(1,1);
        2:   81:     }
        -:   82:
        -:   83:     else {
    #####:   84:     			assertTrueFunction(0,1);
        -:   85:     }
        -:   86:
        -:   87:
        -:   88:
        2:   89:     if (counterVariable){
        -:   90:
    #####:   91:     	printf("\nTest: Test Failed\n");
    #####:   92:     	printf("Test: Test Failed %d\n",counterVariable);
        -:   93:     
    #####:   94:     }
        -:   95:
        -:   96:     else {
        2:   97:     	printf("\nTest: Test passed\n\n");
        -:   98:     }
        -:   99:
        -:  100:
        2:  101:     return 0 ; 
        -:  102:
        -:  103:
        -:  104:
        -:  105:
        -:  106:
        -:  107:
        -:  108:
        -:  109:}
