        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:18
        -:    0:Programs:1
        -:    1:
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include "rngs.h"
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:
        -:   10:
        -:   11:int compare(const void* a, const void* b) {
    35008:   12:  if (*(int*)a > *(int*)b)
    #####:   13:    return 1;
    35008:   14:  if (*(int*)a < *(int*)b)
    12500:   15:    return -1;
    22508:   16:  return 0;
    35008:   17:}
        -:   18:
        -:   19:struct gameState* newGame() {
    #####:   20:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   21:  return g;
        -:   22:}
        -:   23:
        -:   24:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   25:		  int k8, int k9, int k10) {
    #####:   26:  int* k = malloc(10 * sizeof(int));
    #####:   27:  k[0] = k1;
    #####:   28:  k[1] = k2;
    #####:   29:  k[2] = k3;
    #####:   30:  k[3] = k4;
    #####:   31:  k[4] = k5;
    #####:   32:  k[5] = k6;
    #####:   33:  k[6] = k7;
    #####:   34:  k[7] = k8;
    #####:   35:  k[8] = k9;
    #####:   36:  k[9] = k10;
    #####:   37:  return k;
        -:   38:}
        -:   39:
        -:   40:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   41:		   struct gameState *state) {
        -:   42:
        -:   43:  int i;
        -:   44:  int j;
        -:   45:  int it;			
        -:   46:  //set up random number generator
     1248:   47:  SelectStream(1);
     1248:   48:  PutSeed((long)randomSeed);
        -:   49:  
        -:   50:  //check number of players
     2496:   51:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   52:    {
    #####:   53:      return -1;
        -:   54:    }
        -:   55:
        -:   56:  //set number of players
     1248:   57:  state->numPlayers = numPlayers;
        -:   58:
        -:   59:  //check selected kingdom cards are different
    27456:   60:  for (i = 0; i < 10; i++)
        -:   61:    {
   274560:   62:      for (j = 0; j < 10; j++)
        -:   63:        {
   237120:   64:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   65:	    {
    #####:   66:	      return -1;
        -:   67:	    }
   124800:   68:        }
    12480:   69:    }
        -:   70:
        -:   71:
        -:   72:  //initialize supply
        -:   73:  ///////////////////////////////
        -:   74:
        -:   75:  //set number of Curse cards
     1248:   76:  if (numPlayers == 2)
        -:   77:    {
     1248:   78:      state->supplyCount[curse] = 10;
     1248:   79:    }
    #####:   80:  else if (numPlayers == 3)
        -:   81:    {
    #####:   82:      state->supplyCount[curse] = 20;
    #####:   83:    }
        -:   84:  else
        -:   85:    {
    #####:   86:      state->supplyCount[curse] = 30;
        -:   87:    }
        -:   88:
        -:   89:  //set number of Victory cards
     1248:   90:  if (numPlayers == 2)
        -:   91:    {
     1248:   92:      state->supplyCount[estate] = 8;
     1248:   93:      state->supplyCount[duchy] = 8;
     1248:   94:      state->supplyCount[province] = 8;
     1248:   95:    }
        -:   96:  else
        -:   97:    {
    #####:   98:      state->supplyCount[estate] = 12;
    #####:   99:      state->supplyCount[duchy] = 12;
    #####:  100:      state->supplyCount[province] = 12;
        -:  101:    }
        -:  102:
        -:  103:  //set number of Treasure cards
     1248:  104:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1248:  105:  state->supplyCount[silver] = 40;
     1248:  106:  state->supplyCount[gold] = 30;
        -:  107:
        -:  108:  //set number of Kingdom cards
    52416:  109:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  110:    {
   411840:  111:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  112:	{
   193440:  113:	  if (kingdomCards[j] == i)
        -:  114:	    {
        -:  115:	      //check if card is a 'Victory' Kingdom card
    23712:  116:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  117:		{
     2496:  118:		  if (numPlayers == 2){ 
     2496:  119:		    state->supplyCount[i] = 8; 
     2496:  120:		  }
    #####:  121:		  else{ state->supplyCount[i] = 12; }
     2496:  122:		}
        -:  123:	      else
        -:  124:		{
     9984:  125:		  state->supplyCount[i] = 10;
        -:  126:		}
    12480:  127:	      break;
        -:  128:	    }
        -:  129:	  else    //card is not in the set choosen for the game
        -:  130:	    {
   180960:  131:	      state->supplyCount[i] = -1;
        -:  132:	    }
   180960:  133:	}
        -:  134:
    24960:  135:    }
        -:  136:
        -:  137:  ////////////////////////
        -:  138:  //supply intilization complete
        -:  139:
        -:  140:  //set player decks
     7488:  141:  for (i = 0; i < numPlayers; i++)
        -:  142:    {
     2496:  143:      state->deckCount[i] = 0;
    19968:  144:      for (j = 0; j < 3; j++)
        -:  145:	{
     7488:  146:	  state->deck[i][j] = estate;
     7488:  147:	  state->deckCount[i]++;
     7488:  148:	}
    39936:  149:      for (j = 3; j < 10; j++)
        -:  150:	{
    17472:  151:	  state->deck[i][j] = copper;
    17472:  152:	  state->deckCount[i]++;		
    17472:  153:	}
     2496:  154:    }
        -:  155:
        -:  156:  //shuffle player decks
     7488:  157:  for (i = 0; i < numPlayers; i++)
        -:  158:    {
     2496:  159:      if ( shuffle(i, state) < 0 )
        -:  160:	{
    #####:  161:	  return -1;
        -:  162:	}
     2496:  163:    }
        -:  164:
        -:  165:  //draw player hands
     7488:  166:  for (i = 0; i < numPlayers; i++)
        -:  167:    {  
        -:  168:      //initialize hand size to zero
     2496:  169:      state->handCount[i] = 0;
     2496:  170:      state->discardCount[i] = 0;
        -:  171:      //draw 5 cards
        -:  172:      // for (j = 0; j < 5; j++)
        -:  173:      //	{
        -:  174:      //	  drawCard(i, state);
        -:  175:      //	}
     2496:  176:    }
        -:  177:  
        -:  178:  //set embargo tokens to 0 for all supply piles
    69888:  179:  for (i = 0; i <= treasure_map; i++)
        -:  180:    {
    33696:  181:      state->embargoTokens[i] = 0;
    33696:  182:    }
        -:  183:
        -:  184:  //initialize first player's turn
     1248:  185:  state->outpostPlayed = 0;
     1248:  186:  state->phase = 0;
     1248:  187:  state->numActions = 1;
     1248:  188:  state->numBuys = 1;
     1248:  189:  state->playedCardCount = 0;
     1248:  190:  state->whoseTurn = 0;
     1248:  191:  state->handCount[state->whoseTurn] = 0;
        -:  192:  //int it; move to top
        -:  193:
        -:  194:  //Moved draw cards to here, only drawing at the start of a turn
    14976:  195:  for (it = 0; it < 5; it++){
     6240:  196:    drawCard(state->whoseTurn, state);
     6240:  197:  }
        -:  198:
     1248:  199:  updateCoins(state->whoseTurn, state, 0);
        -:  200:
     1248:  201:  return 0;
     1248:  202:}
        -:  203:
        -:  204:int shuffle(int player, struct gameState *state) {
        -:  205: 
        -:  206:
        -:  207:  int newDeck[MAX_DECK];
     2506:  208:  int newDeckPos = 0;
        -:  209:  int card;
        -:  210:  int i;
        -:  211:
     2506:  212:  if (state->deckCount[player] < 1)
        4:  213:    return -1;
     2502:  214:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  215:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  216:
    55024:  217:  while (state->deckCount[player] > 0) {
    25010:  218:    card = floor(Random() * state->deckCount[player]);
    25010:  219:    newDeck[newDeckPos] = state->deck[player][card];
    25010:  220:    newDeckPos++;
   165036:  221:    for (i = card; i < state->deckCount[player]-1; i++) {
    57508:  222:      state->deck[player][i] = state->deck[player][i+1];
    57508:  223:    }
    25010:  224:    state->deckCount[player]--;
        -:  225:  }
    55024:  226:  for (i = 0; i < newDeckPos; i++) {
    25010:  227:    state->deck[player][i] = newDeck[i];
    25010:  228:    state->deckCount[player]++;
    25010:  229:  }
        -:  230:
     2502:  231:  return 0;
     2506:  232:}
        -:  233:
        -:  234:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  235:{	
        -:  236:  int card;
    #####:  237:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  238:
        -:  239:  //check if it is the right phase
    #####:  240:  if (state->phase != 0)
        -:  241:    {
    #####:  242:      return -1;
        -:  243:    }
        -:  244:	
        -:  245:  //check if player has enough actions
    #####:  246:  if ( state->numActions < 1 )
        -:  247:    {
    #####:  248:      return -1;
        -:  249:    }
        -:  250:	
        -:  251:  //get card played
    #####:  252:  card = handCard(handPos, state);
        -:  253:	
        -:  254:  //check if selected card is an action
    #####:  255:  if ( card < adventurer || card > treasure_map )
        -:  256:    {
    #####:  257:      return -1;
        -:  258:    }
        -:  259:	
        -:  260:  //play card
    #####:  261:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  262:    {
    #####:  263:      return -1;
        -:  264:    }
        -:  265:	
        -:  266:  //reduce number of actions
    #####:  267:  state->numActions--;
        -:  268:
        -:  269:  //update coins (Treasure cards may be added with card draws)
    #####:  270:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  271:	
    #####:  272:  return 0;
    #####:  273:}
        -:  274:
        -:  275:int buyCard(int supplyPos, struct gameState *state) {
        -:  276:  int who;
        -:  277:  if (DEBUG){
        -:  278:    printf("Entering buyCard...\n");
        -:  279:  }
        -:  280:
        -:  281:  // I don't know what to do about the phase thing.
        -:  282:
    #####:  283:  who = state->whoseTurn;
        -:  284:
    #####:  285:  if (state->numBuys < 1){
        -:  286:    if (DEBUG)
        -:  287:      printf("You do not have any buys left\n");
    #####:  288:    return -1;
    #####:  289:  } else if (supplyCount(supplyPos, state) <1){
        -:  290:    if (DEBUG)
        -:  291:      printf("There are not any of that type of card left\n");
    #####:  292:    return -1;
    #####:  293:  } else if (state->coins < getCost(supplyPos)){
        -:  294:    if (DEBUG) 
        -:  295:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  296:    return -1;
        -:  297:  } else {
    #####:  298:    state->phase=1;
        -:  299:    //state->supplyCount[supplyPos]--;
    #####:  300:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  301:  
    #####:  302:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  303:    state->numBuys--;
        -:  304:    if (DEBUG)
        -:  305:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  306:  }
        -:  307:
        -:  308:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  309:  //state->discardCount[who]++;
        -:  310:    
    #####:  311:  return 0;
    #####:  312:}
        -:  313:
        -:  314:int numHandCards(struct gameState *state) {
    #####:  315:  return state->handCount[ whoseTurn(state) ];
        -:  316:}
        -:  317:
        -:  318:int handCard(int handPos, struct gameState *state) {
    #####:  319:  int currentPlayer = whoseTurn(state);
    #####:  320:  return state->hand[currentPlayer][handPos];
        -:  321:}
        -:  322:
        -:  323:int supplyCount(int card, struct gameState *state) {
       10:  324:  return state->supplyCount[card];
        -:  325:}
        -:  326:
        -:  327:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  328:  int i;
    54810:  329:  int count = 0;
        -:  330:
   711504:  331:  for (i = 0; i < state->deckCount[player]; i++)
        -:  332:    {
   312088:  333:      if (state->deck[player][i] == card) count++;
   300942:  334:    }
        -:  335:
   439128:  336:  for (i = 0; i < state->handCount[player]; i++)
        -:  337:    {
   170852:  338:      if (state->hand[player][i] == card) count++;
   164754:  339:    }
        -:  340:
   321732:  341:  for (i = 0; i < state->discardCount[player]; i++)
        -:  342:    {
   109984:  343:      if (state->discard[player][i] == card) count++;
   106056:  344:    }
        -:  345:
    54810:  346:  return count;
        -:  347:}
        -:  348:
        -:  349:int whoseTurn(struct gameState *state) {
     1022:  350:  return state->whoseTurn;
        -:  351:}
        -:  352:
        -:  353:int endTurn(struct gameState *state) {
        -:  354:  int k;
        -:  355:  int i;
    #####:  356:  int currentPlayer = whoseTurn(state);
        -:  357:  
        -:  358:  //Discard hand
    #####:  359:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  360:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  361:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  362:  }
    #####:  363:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  364:    
        -:  365:  //Code for determining the player
    #####:  366:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  367:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  368:  }
        -:  369:  else{
    #####:  370:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  371:  }
        -:  372:
    #####:  373:  state->outpostPlayed = 0;
    #####:  374:  state->phase = 0;
    #####:  375:  state->numActions = 1;
    #####:  376:  state->coins = 0;
    #####:  377:  state->numBuys = 1;
    #####:  378:  state->playedCardCount = 0;
    #####:  379:  state->handCount[state->whoseTurn] = 0;
        -:  380:
        -:  381:  //int k; move to top
        -:  382:  //Next player draws hand
    #####:  383:  for (k = 0; k < 5; k++){
    #####:  384:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  385:  }
        -:  386:
        -:  387:  //Update money
    #####:  388:  updateCoins(state->whoseTurn, state , 0);
        -:  389:
    #####:  390:  return 0;
        -:  391:}
        -:  392:
        -:  393:int isGameOver(struct gameState *state) {
        -:  394:  int i;
        -:  395:  int j;
        -:  396:	
        -:  397:  //if stack of Province cards is empty, the game ends
        4:  398:  if (state->supplyCount[province] == 0)
        -:  399:    {
    #####:  400:      return 1;
        -:  401:    }
        -:  402:
        -:  403:  //if three supply pile are at 0, the game ends
        4:  404:  j = 0;
      208:  405:  for (i = 0; i < 25; i++)
        -:  406:    {
      100:  407:      if (state->supplyCount[i] == 0)
        -:  408:	{
        6:  409:	  j++;
        6:  410:	}
      100:  411:    }
        4:  412:  if ( j >= 3)
        -:  413:    {
        2:  414:      return 1;
        -:  415:    }
        -:  416:
        2:  417:  return 0;
        4:  418:}
        -:  419:
        -:  420:int scoreFor (int player, struct gameState *state) {
        -:  421:
        -:  422:  int i;
    #####:  423:  int score = 0;
        -:  424:  //score from hand
    #####:  425:  for (i = 0; i < state->handCount[player]; i++)
        -:  426:    {
    #####:  427:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  428:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  430:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  431:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  432:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  433:    }
        -:  434:
        -:  435:  //score from discard
    #####:  436:  for (i = 0; i < state->discardCount[player]; i++)
        -:  437:    {
    #####:  438:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  439:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  441:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  442:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  443:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  444:    }
        -:  445:
        -:  446:  //score from deck
    #####:  447:  for (i = 0; i < state->discardCount[player]; i++)
        -:  448:    {
    #####:  449:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  450:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  452:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  453:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  454:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  455:    }
        -:  456:
    #####:  457:  return score;
        -:  458:}
        -:  459:
        -:  460:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  461:  int i;	
        -:  462:  int j;
        -:  463:  int highScore;
        -:  464:  int currentPlayer;
        -:  465:
        -:  466:  //get score for each player
    #####:  467:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  468:    {
        -:  469:      //set unused player scores to -9999
    #####:  470:      if (i >= state->numPlayers)
        -:  471:	{
    #####:  472:	  players[i] = -9999;
    #####:  473:	}
        -:  474:      else
        -:  475:	{
    #####:  476:	  players[i] = scoreFor (i, state);
        -:  477:	}
    #####:  478:    }
        -:  479:
        -:  480:  //find highest score
    #####:  481:  j = 0;
    #####:  482:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  483:    {
    #####:  484:      if (players[i] > players[j])
        -:  485:	{
    #####:  486:	  j = i;
    #####:  487:	}
    #####:  488:    }
    #####:  489:  highScore = players[j];
        -:  490:
        -:  491:  //add 1 to players who had less turns
    #####:  492:  currentPlayer = whoseTurn(state);
    #####:  493:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  494:    {
    #####:  495:      if ( players[i] == highScore && i > currentPlayer )
        -:  496:	{
    #####:  497:	  players[i]++;
    #####:  498:	}
    #####:  499:    }
        -:  500:
        -:  501:  //find new highest score
    #####:  502:  j = 0;
    #####:  503:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  504:    {
    #####:  505:      if ( players[i] > players[j] )
        -:  506:	{
    #####:  507:	  j = i;
    #####:  508:	}
    #####:  509:    }
    #####:  510:  highScore = players[j];
        -:  511:
        -:  512:  //set winners in array to 1 and rest to 0
    #####:  513:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  514:    {
    #####:  515:      if ( players[i] == highScore )
        -:  516:	{
    #####:  517:	  players[i] = 1;
    #####:  518:	}
        -:  519:      else
        -:  520:	{
    #####:  521:	  players[i] = 0;
        -:  522:	}
    #####:  523:    }
        -:  524:
    #####:  525:  return 0;
        -:  526:}
        -:  527:
        -:  528:int drawCard(int player, struct gameState *state)
        -:  529:{	int count;
        -:  530:  int deckCounter;
     9298:  531:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  532:    
        -:  533:    //Step 1 Shuffle the discard pile back into a deck
        -:  534:    int i;
        -:  535:    //Move discard to deck
       24:  536:    for (i = 0; i < state->discardCount[player];i++){
       10:  537:      state->deck[player][i] = state->discard[player][i];
       10:  538:      state->discard[player][i] = -1;
       10:  539:    }
        -:  540:
        2:  541:    state->deckCount[player] = state->discardCount[player];
        2:  542:    state->discardCount[player] = 0;//Reset discard
        -:  543:
        -:  544:    //Shufffle the deck
        2:  545:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  546:   
        -:  547:    if (DEBUG){//Debug statements
        -:  548:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  549:    }
        -:  550:    
        2:  551:    state->discardCount[player] = 0;
        -:  552:
        -:  553:    //Step 2 Draw Card
        2:  554:    count = state->handCount[player];//Get current player's hand count
        -:  555:    
        -:  556:    if (DEBUG){//Debug statements
        -:  557:      printf("Current hand count: %d\n", count);
        -:  558:    }
        -:  559:    
        2:  560:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  561:
        2:  562:    if (deckCounter == 0)
    #####:  563:      return -1;
        -:  564:
        2:  565:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        2:  566:    state->deckCount[player]--;
        2:  567:    state->handCount[player]++;//Increment hand count
        2:  568:  }
        -:  569:
        -:  570:  else{
     9296:  571:    int count = state->handCount[player];//Get current hand count for player
        -:  572:    int deckCounter;
        -:  573:    if (DEBUG){//Debug statements
        -:  574:      printf("Current hand count: %d\n", count);
        -:  575:    }
        -:  576:
     9296:  577:    deckCounter = state->deckCount[player];//Create holder for the deck count
     9296:  578:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     9296:  579:    state->deckCount[player]--;
     9296:  580:    state->handCount[player]++;//Increment hand count
        -:  581:  }
        -:  582:
     9298:  583:  return 0;
     9298:  584:}
        -:  585:
        -:  586:int getCost(int cardNumber)
        -:  587:{
    #####:  588:  switch( cardNumber ) 
        -:  589:    {
        -:  590:    case curse:
    #####:  591:      return 0;
        -:  592:    case estate:
    #####:  593:      return 2;
        -:  594:    case duchy:
    #####:  595:      return 5;
        -:  596:    case province:
    #####:  597:      return 8;
        -:  598:    case copper:
    #####:  599:      return 0;
        -:  600:    case silver:
    #####:  601:      return 3;
        -:  602:    case gold:
    #####:  603:      return 6;
        -:  604:    case adventurer:
    #####:  605:      return 6;
        -:  606:    case council_room:
    #####:  607:      return 5;
        -:  608:    case feast:
    #####:  609:      return 4;
        -:  610:    case gardens:
    #####:  611:      return 4;
        -:  612:    case mine:
    #####:  613:      return 5;
        -:  614:    case remodel:
    #####:  615:      return 4;
        -:  616:    case smithy:
    #####:  617:      return 4;
        -:  618:    case village:
    #####:  619:      return 3;
        -:  620:    case baron:
    #####:  621:      return 4;
        -:  622:    case great_hall:
    #####:  623:      return 3;
        -:  624:    case minion:
    #####:  625:      return 5;
        -:  626:    case steward:
    #####:  627:      return 3;
        -:  628:    case tribute:
    #####:  629:      return 5;
        -:  630:    case ambassador:
    #####:  631:      return 3;
        -:  632:    case cutpurse:
    #####:  633:      return 4;
        -:  634:    case embargo: 
    #####:  635:      return 2;
        -:  636:    case outpost:
    #####:  637:      return 5;
        -:  638:    case salvager:
    #####:  639:      return 4;
        -:  640:    case sea_hag:
    #####:  641:      return 4;
        -:  642:    case treasure_map:
    #####:  643:      return 4;
        -:  644:    }
        -:  645:	
    #####:  646:  return -1;
    #####:  647:}
        -:  648:
        -:  649:
        -:  650:
        -:  651:int smithyFunction(int currentPlayer, struct gameState *state, int handPos)
        -:  652:{
        -:  653:
        -:  654:// bug spotted
        -:  655:int i;
     8032:  656:for (i = 0; i < 3; i++)
        -:  657:	{
     3012:  658:	  drawCard(currentPlayer, state);
     3012:  659:	}
        -:  660:
        -:  661:	  //discard card from hand
     1004:  662:	  discardCard(handPos, currentPlayer, state, 0);
     1004:  663:	  discardCard(handPos, currentPlayer, state, 0);
     1004:  664:	  discardCard(handPos, currentPlayer, state, 0);
     1004:  665:	  return 0;
        -:  666:
        -:  667:
        -:  668:
        -:  669:
        -:  670:}
        -:  671:
        -:  672:
        -:  673:
        -:  674:int adventurerFunction(int currentPlayer, struct gameState *state, int z, int *temphand, int drawntreasure, int cardDrawn)
        -:  675:{
       56:  676:	while(drawntreasure<1){
        -:  677:	// bug spotted
        -:  678:
       16:  679:  	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        2:  680:		  shuffle(currentPlayer, state);
        2:  681:		}
        -:  682:		
        -:  683:
       16:  684:    drawCard(currentPlayer, state);
       16:  685:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  686:		
        -:  687:
        -:  688:
        -:  689:
       30:  690:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
       12:  691:		  drawntreasure++;
        -:  692:		else{
        4:  693:		  temphand[z]=cardDrawn;
        4:  694:		  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        4:  695:		  z++;
        -:  696:		}
        -:  697:		  }
       32:  698:		  while(z-1>=0){
        4:  699:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        4:  700:		z=z-1;
        -:  701:		  }
       12:  702:		  return 0;
        -:  703:}
        -:  704:
        -:  705:
        -:  706:int cRoomfunction(int currentPlayer, struct gameState *state, int handPos)
        -:  707:{
        -:  708://+4 Cards
        -:  709:	int i;
       60:  710:	  for (i = 0; i < 4; i++)
        -:  711:	{
       24:  712:	  drawCard(currentPlayer, state);
       24:  713:	}
        -:  714:			
        -:  715:	  //+1 Buy
        6:  716:	  state->numBuys+=3;
        -:  717:			
        -:  718:	  //Each other player draws a card
       36:  719:	  for (i = 0; i < state->numPlayers; i++)
        -:  720:	{
       12:  721:	  if ( i != currentPlayer )
        -:  722:		{
        6:  723:		  drawCard(i, state);
        6:  724:		}
       12:  725:	}				
        -:  726:	  //put played card in played card pile
        6:  727:	  discardCard(handPos, currentPlayer, state, 0);				
        6:  728:	  return 0;
        -:  729:}
        -:  730:int villageFunction(int currentPlayer, struct gameState *state, int handPos)
        -:  731:{
        -:  732://+1 Card
    #####:  733:	  drawCard(currentPlayer, state);
    #####:  734:	  drawCard(currentPlayer, state);	
        -:  735:	  //+2 Actions
    #####:  736:	  state->numActions = state->numActions + 2;
        -:  737:			
        -:  738:	  //discard played card from hand
    #####:  739:	  discardCard(handPos, currentPlayer, state, 0);
    #####:  740:	  return 0;
        -:  741:}
        -:  742:int gardensFunction()
        -:  743:{
    #####:  744:	return -1;
        -:  745:}
        -:  746:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  747:{
        -:  748:  int i;
        -:  749:  int j;
        -:  750:  int k;
        -:  751:  int x;
        -:  752:  int index;
     1022:  753:  int currentPlayer = whoseTurn(state);
     1022:  754:  int nextPlayer = currentPlayer + 1;
        -:  755:
     1022:  756:  int tributeRevealedCards[2] = {-1, -1};
        -:  757:  int temphand[MAX_HAND];// moved above the if statement
     1022:  758:  int drawntreasure=0;
        -:  759:  int cardDrawn;
     1022:  760:  int z = 0;// this is the counter for the temp hand
     1022:  761:  if (nextPlayer > (state->numPlayers - 1)){
       12:  762:    nextPlayer = 0;
       12:  763:  }
        -:  764:	//case smithy
     1022:  765:	if(card == smithy)
     1004:  766:		return smithyFunction(currentPlayer, state, handPos);			
        -:  767:	//case adventurer:
       18:  768:    if(card == adventurer)
       12:  769:		return adventurerFunction(currentPlayer, state, z, temphand, drawntreasure, cardDrawn);
        -:  770:	//case council_room:
        6:  771:	if(card == council_room)
        6:  772:		return cRoomfunction(currentPlayer, state, handPos);	
        -:  773:	//case gardens:
    #####:  774:	if(card == gardens)
    #####:  775:      return gardensFunction();
        -:  776:	//case village:
    #####:  777:	if(card == village)
    #####:  778:      return villageFunction(currentPlayer, state, handPos);
        -:  779:  //uses switch to select card and perform actions
    #####:  780:  switch( card ) 
        -:  781:    {
        -:  782:    case feast:
        -:  783:      //gain card with cost up to 5
        -:  784:      //Backup hand
    #####:  785:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  786:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  787:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  788:      }
        -:  789:      //Backup hand
        -:  790:
        -:  791:      //Update Coins for Buy
    #####:  792:      updateCoins(currentPlayer, state, 5);
    #####:  793:      x = 1;//Condition to loop on
    #####:  794:      while( x == 1) {//Buy one card
    #####:  795:	if (supplyCount(choice1, state) <= 0){
        -:  796:	  if (DEBUG)
        -:  797:	    printf("None of that card left, sorry!\n");
        -:  798:
        -:  799:	  if (DEBUG){
        -:  800:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  801:	  }
    #####:  802:	}
    #####:  803:	else if (state->coins < getCost(choice1)){
    #####:  804:	  printf("That card is too expensive!\n");
        -:  805:
        -:  806:	  if (DEBUG){
        -:  807:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  808:	  }
    #####:  809:	}
        -:  810:	else{
        -:  811:
        -:  812:	  if (DEBUG){
        -:  813:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  814:	  }
        -:  815:
    #####:  816:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  817:	  x = 0;//No more buying cards
        -:  818:
        -:  819:	  if (DEBUG){
        -:  820:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  821:	  }
        -:  822:
        -:  823:	}
        -:  824:      }     
        -:  825:
        -:  826:      //Reset Hand
    #####:  827:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  828:	state->hand[currentPlayer][i] = temphand[i];
    #####:  829:	temphand[i] = -1;
    #####:  830:      }
        -:  831:      //Reset Hand
        -:  832:      			
    #####:  833:      return 0;
        -:  834:			
        -:  835:    case mine:
    #####:  836:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  837:
    #####:  838:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  839:	{
    #####:  840:	  return -1;
        -:  841:	}
        -:  842:		
    #####:  843:      if (choice2 > treasure_map || choice2 < curse)
        -:  844:	{
    #####:  845:	  return -1;
        -:  846:	}
        -:  847:
    #####:  848:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  849:	{
    #####:  850:	  return -1;
        -:  851:	}
        -:  852:
    #####:  853:      gainCard(choice2, state, 2, currentPlayer);
        -:  854:
        -:  855:      //discard card from hand
    #####:  856:      discardCard(handPos, currentPlayer, state, 0);
        -:  857:
        -:  858:      //discard trashed card
    #####:  859:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  860:	{
    #####:  861:	  if (state->hand[currentPlayer][i] == j)
        -:  862:	    {
    #####:  863:	      discardCard(i, currentPlayer, state, 0);			
    #####:  864:	      break;
        -:  865:	    }
    #####:  866:	}
        -:  867:			
    #####:  868:      return 0;
        -:  869:			
        -:  870:    case remodel:
    #####:  871:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  872:
    #####:  873:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  874:	{
    #####:  875:	  return -1;
        -:  876:	}
        -:  877:
    #####:  878:      gainCard(choice2, state, 0, currentPlayer);
        -:  879:
        -:  880:      //discard card from hand
    #####:  881:      discardCard(handPos, currentPlayer, state, 0);
        -:  882:
        -:  883:      //discard trashed card
    #####:  884:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  885:	{
    #####:  886:	  if (state->hand[currentPlayer][i] == j)
        -:  887:	    {
    #####:  888:	      discardCard(i, currentPlayer, state, 0);			
    #####:  889:	      break;
        -:  890:	    }
    #####:  891:	}
        -:  892:
        -:  893:
    #####:  894:      return 0;
        -:  895:	  
        -:  896:    case baron:
    #####:  897:      state->numBuys++;//Increase buys by 1!
    #####:  898:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  899:	int p = 0;//Iterator for hand!
    #####:  900:	int card_not_discarded = 1;//Flag for discard set!
    #####:  901:	while(card_not_discarded){
    #####:  902:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  903:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  904:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  905:	    state->discardCount[currentPlayer]++;
    #####:  906:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  907:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  908:	    }
    #####:  909:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  910:	    state->handCount[currentPlayer]--;
    #####:  911:	    card_not_discarded = 0;//Exit the loop
    #####:  912:	  }
    #####:  913:	  else if (p > state->handCount[currentPlayer]){
        -:  914:	    if(DEBUG) {
        -:  915:	      printf("No estate cards in your hand, invalid choice\n");
        -:  916:	      printf("Must gain an estate if there are any\n");
        -:  917:	    }
    #####:  918:	    if (supplyCount(estate, state) > 0){
    #####:  919:	      gainCard(estate, state, 0, currentPlayer);
    #####:  920:	      state->supplyCount[estate]--;//Decrement estates
    #####:  921:	      if (supplyCount(estate, state) == 0){
    #####:  922:		isGameOver(state);
    #####:  923:	      }
    #####:  924:	    }
    #####:  925:	    card_not_discarded = 0;//Exit the loop
    #####:  926:	  }
        -:  927:			    
        -:  928:	  else{
    #####:  929:	    p++;//Next card
        -:  930:	  }
        -:  931:	}
    #####:  932:      }
        -:  933:			    
        -:  934:      else{
    #####:  935:	if (supplyCount(estate, state) > 0){
    #####:  936:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  937:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  938:	  if (supplyCount(estate, state) == 0){
    #####:  939:	    isGameOver(state);
    #####:  940:	  }
    #####:  941:	}
        -:  942:      }
        -:  943:	    
        -:  944:      
    #####:  945:      return 0;
        -:  946:		
        -:  947:    case great_hall:
        -:  948:      //+1 Card
    #####:  949:      drawCard(currentPlayer, state);
        -:  950:			
        -:  951:      //+1 Actions
    #####:  952:      state->numActions++;
        -:  953:			
        -:  954:      //discard card from hand
    #####:  955:      discardCard(handPos, currentPlayer, state, 0);
    #####:  956:      return 0;
        -:  957:		
        -:  958:    case minion:
        -:  959:      //+1 action
    #####:  960:      state->numActions++;
        -:  961:			
        -:  962:      //discard card from hand
    #####:  963:      discardCard(handPos, currentPlayer, state, 0);
        -:  964:			
    #####:  965:      if (choice1)		//+2 coins
        -:  966:	{
    #####:  967:	  state->coins = state->coins + 2;
    #####:  968:	}
        -:  969:			
    #####:  970:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  971:	{
        -:  972:	  //discard hand
    #####:  973:	  while(numHandCards(state) > 0)
        -:  974:	    {
    #####:  975:	      discardCard(handPos, currentPlayer, state, 0);
        -:  976:	    }
        -:  977:				
        -:  978:	  //draw 4
    #####:  979:	  for (i = 0; i < 4; i++)
        -:  980:	    {
    #####:  981:	      drawCard(currentPlayer, state);
    #####:  982:	    }
        -:  983:				
        -:  984:	  //other players discard hand and redraw if hand size > 4
    #####:  985:	  for (i = 0; i < state->numPlayers; i++)
        -:  986:	    {
    #####:  987:	      if (i != currentPlayer)
        -:  988:		{
    #####:  989:		  if ( state->handCount[i] > 4 )
        -:  990:		    {
        -:  991:		      //discard hand
    #####:  992:		      while( state->handCount[i] > 0 )
        -:  993:			{
    #####:  994:			  discardCard(handPos, i, state, 0);
        -:  995:			}
        -:  996:							
        -:  997:		      //draw 4
    #####:  998:		      for (j = 0; j < 4; j++)
        -:  999:			{
    #####: 1000:			  drawCard(i, state);
    #####: 1001:			}
    #####: 1002:		    }
    #####: 1003:		}
    #####: 1004:	    }
        -: 1005:				
    #####: 1006:	}
    #####: 1007:      return 0;
        -: 1008:		
        -: 1009:    case steward:
    #####: 1010:      if (choice1 == 1)
        -: 1011:	{
        -: 1012:	  //+2 cards
    #####: 1013:	  drawCard(currentPlayer, state);
    #####: 1014:	  drawCard(currentPlayer, state);
    #####: 1015:	}
    #####: 1016:      else if (choice1 == 2)
        -: 1017:	{
        -: 1018:	  //+2 coins
    #####: 1019:	  state->coins = state->coins + 2;
    #####: 1020:	}
        -: 1021:      else
        -: 1022:	{
        -: 1023:	  //trash 2 cards in hand
    #####: 1024:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1025:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1026:	}
        -: 1027:			
        -: 1028:      //discard card from hand
    #####: 1029:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1030:      return 0;
        -: 1031:		
        -: 1032:    case tribute:
    #####: 1033:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1034:	if (state->deckCount[nextPlayer] > 0){
    #####: 1035:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1036:	  state->deckCount[nextPlayer]--;
    #####: 1037:	}
    #####: 1038:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1039:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1040:	  state->discardCount[nextPlayer]--;
    #####: 1041:	}
        -: 1042:	else{
        -: 1043:	  //No Card to Reveal
        -: 1044:	  if (DEBUG){
        -: 1045:	    printf("No cards to reveal\n");
        -: 1046:	  }
        -: 1047:	}
    #####: 1048:      }
        -: 1049:	    
        -: 1050:      else{
    #####: 1051:	if (state->deckCount[nextPlayer] == 0){
    #####: 1052:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1053:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1054:	    state->deckCount[nextPlayer]++;
    #####: 1055:	    state->discard[nextPlayer][i] = -1;
    #####: 1056:	    state->discardCount[nextPlayer]--;
    #####: 1057:	  }
        -: 1058:			    
    #####: 1059:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1060:	} 
    #####: 1061:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1062:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1063:	state->deckCount[nextPlayer]--;
    #####: 1064:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1065:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1066:	state->deckCount[nextPlayer]--;
        -: 1067:      }    
        -: 1068:		       
    #####: 1069:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1070:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1071:	state->playedCardCount++;
    #####: 1072:	tributeRevealedCards[1] = -1;
    #####: 1073:      }
        -: 1074:
    #####: 1075:      for (i = 0; i <= 2; i ++){
    #####: 1076:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1077:	  state->coins += 2;
    #####: 1078:	}
        -: 1079:		    
    #####: 1080:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1081:	  drawCard(currentPlayer, state);
    #####: 1082:	  drawCard(currentPlayer, state);
    #####: 1083:	}
        -: 1084:	else{//Action Card
    #####: 1085:	  state->numActions = state->numActions + 2;
        -: 1086:	}
    #####: 1087:      }
        -: 1088:	    
    #####: 1089:      return 0;
        -: 1090:		
        -: 1091:    case ambassador:
    #####: 1092:      j = 0;		//used to check if player has enough cards to discard
        -: 1093:
    #####: 1094:      if (choice2 > 2 || choice2 < 0)
        -: 1095:	{
    #####: 1096:	  return -1;				
        -: 1097:	}
        -: 1098:
    #####: 1099:      if (choice1 == handPos)
        -: 1100:	{
    #####: 1101:	  return -1;
        -: 1102:	}
        -: 1103:
    #####: 1104:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1105:	{
    #####: 1106:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1107:	    {
    #####: 1108:	      j++;
    #####: 1109:	    }
    #####: 1110:	}
    #####: 1111:      if (j < choice2)
        -: 1112:	{
    #####: 1113:	  return -1;				
        -: 1114:	}
        -: 1115:
        -: 1116:      if (DEBUG) 
        -: 1117:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1118:
        -: 1119:      //increase supply count for choosen card by amount being discarded
    #####: 1120:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1121:			
        -: 1122:      //each other player gains a copy of revealed card
    #####: 1123:      for (i = 0; i < state->numPlayers; i++)
        -: 1124:	{
    #####: 1125:	  if (i != currentPlayer)
        -: 1126:	    {
    #####: 1127:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1128:	    }
    #####: 1129:	}
        -: 1130:
        -: 1131:      //discard played card from hand
    #####: 1132:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1133:
        -: 1134:      //trash copies of cards returned to supply
    #####: 1135:      for (j = 0; j < choice2; j++)
        -: 1136:	{
    #####: 1137:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1138:	    {
    #####: 1139:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1140:		{
    #####: 1141:		  discardCard(i, currentPlayer, state, 1);
    #####: 1142:		  break;
        -: 1143:		}
    #####: 1144:	    }
    #####: 1145:	}			
        -: 1146:
    #####: 1147:      return 0;
        -: 1148:		
        -: 1149:    case cutpurse:
        -: 1150:
    #####: 1151:      updateCoins(currentPlayer, state, 2);
    #####: 1152:      for (i = 0; i < state->numPlayers; i++)
        -: 1153:	{
    #####: 1154:	  if (i != currentPlayer)
        -: 1155:	    {
    #####: 1156:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1157:		{
    #####: 1158:		  if (state->hand[i][j] == copper)
        -: 1159:		    {
    #####: 1160:		      discardCard(j, i, state, 0);
    #####: 1161:		      break;
        -: 1162:		    }
    #####: 1163:		  if (j == state->handCount[i])
        -: 1164:		    {
    #####: 1165:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1166:			{
        -: 1167:			  if (DEBUG)
        -: 1168:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1169:			}	
    #####: 1170:		      break;
        -: 1171:		    }		
    #####: 1172:		}
        -: 1173:					
    #####: 1174:	    }
        -: 1175:				
    #####: 1176:	}				
        -: 1177:
        -: 1178:      //discard played card from hand
    #####: 1179:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1180:
    #####: 1181:      return 0;
        -: 1182:
        -: 1183:		
        -: 1184:    case embargo: 
        -: 1185:      //+2 Coins
    #####: 1186:      state->coins = state->coins + 2;
        -: 1187:			
        -: 1188:      //see if selected pile is in play
    #####: 1189:      if ( state->supplyCount[choice1] == -1 )
        -: 1190:	{
    #####: 1191:	  return -1;
        -: 1192:	}
        -: 1193:			
        -: 1194:      //add embargo token to selected supply pile
    #####: 1195:      state->embargoTokens[choice1]++;
        -: 1196:			
        -: 1197:      //trash card
    #####: 1198:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1199:      return 0;
        -: 1200:		
        -: 1201:    case outpost:
        -: 1202:      //set outpost flag
    #####: 1203:      state->outpostPlayed++;
        -: 1204:			
        -: 1205:      //discard card
    #####: 1206:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1207:      return 0;
        -: 1208:		
        -: 1209:    case salvager:
        -: 1210:      //+1 buy
    #####: 1211:      state->numBuys++;
        -: 1212:			
    #####: 1213:      if (choice1)
        -: 1214:	{
        -: 1215:	  //gain coins equal to trashed card
    #####: 1216:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1217:	  //trash card
    #####: 1218:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1219:	}
        -: 1220:			
        -: 1221:      //discard card
    #####: 1222:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1223:      return 0;
        -: 1224:		
        -: 1225:    case sea_hag:
    #####: 1226:      for (i = 0; i < state->numPlayers; i++){
    #####: 1227:	if (i != currentPlayer){
    #####: 1228:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1229:	  state->discardCount[i]++;
    #####: 1230:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1231:	}
    #####: 1232:      }
    #####: 1233:      return 0;
        -: 1234:		
        -: 1235:    case treasure_map:
        -: 1236:      //search hand for another treasure_map
    #####: 1237:      index = -1;
    #####: 1238:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1239:	{
    #####: 1240:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1241:	    {
    #####: 1242:	      index = i;
    #####: 1243:	      break;
        -: 1244:	    }
    #####: 1245:	}
    #####: 1246:      if (index > -1)
        -: 1247:	{
        -: 1248:	  //trash both treasure cards
    #####: 1249:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1250:	  discardCard(index, currentPlayer, state, 1);
        -: 1251:
        -: 1252:	  //gain 4 Gold cards
    #####: 1253:	  for (i = 0; i < 4; i++)
        -: 1254:	    {
    #####: 1255:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1256:	    }
        -: 1257:				
        -: 1258:	  //return success
    #####: 1259:	  return 1;
        -: 1260:	}
        -: 1261:			
        -: 1262:      //no second treasure_map found in hand
    #####: 1263:      return -1;
        -: 1264:    }
        -: 1265:	
    #####: 1266:  return -1;
     1022: 1267:}
        -: 1268:
        -: 1269:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1270:{
        -: 1271:	
        -: 1272:  //if card is not trashed, added to Played pile 
     3018: 1273:  if (trashFlag < 1)
        -: 1274:    {
        -: 1275:      //add card to played pile
     3018: 1276:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     3018: 1277:      state->playedCardCount++;
     3018: 1278:    }
        -: 1279:	
        -: 1280:  //set played card to -1
     3018: 1281:  state->hand[currentPlayer][handPos] = -1;
        -: 1282:	
        -: 1283:  //remove card from player's hand
     3018: 1284:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1285:    {
        -: 1286:      //reduce number of cards in hand
        2: 1287:      state->handCount[currentPlayer]--;
        2: 1288:    }
     3016: 1289:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1290:    {
        -: 1291:      //reduce number of cards in hand
    #####: 1292:      state->handCount[currentPlayer]--;
    #####: 1293:    }
        -: 1294:  else 	
        -: 1295:    {
        -: 1296:      //replace discarded card with last card in hand
     3016: 1297:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1298:      //set last card to -1
     3016: 1299:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1300:      //reduce number of cards in hand
     3016: 1301:      state->handCount[currentPlayer]--;
        -: 1302:    }
        -: 1303:	
     3018: 1304:  return 0;
        -: 1305:}
        -: 1306:
        -: 1307:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1308:{
        -: 1309:  //Note: supplyPos is enum of choosen card
        -: 1310:	
        -: 1311:  //check if supply pile is empty (0) or card is not used in game (-1)
       10: 1312:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1313:    {
        2: 1314:      return -1;
        -: 1315:    }
        -: 1316:	
        -: 1317:  //added card for [whoseTurn] current player:
        -: 1318:  // toFlag = 0 : add to discard
        -: 1319:  // toFlag = 1 : add to deck
        -: 1320:  // toFlag = 2 : add to hand
        -: 1321:
        8: 1322:  if (toFlag == 1)
        -: 1323:    {
        2: 1324:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        2: 1325:      state->deckCount[player]++;
        2: 1326:    }
        6: 1327:  else if (toFlag == 2)
        -: 1328:    {
        2: 1329:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        2: 1330:      state->handCount[player]++;
        2: 1331:    }
        -: 1332:  else
        -: 1333:    {
        4: 1334:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        4: 1335:      state->discardCount[player]++;
        -: 1336:    }
        -: 1337:	
        -: 1338:  //decrease number in supply pile
        8: 1339:  state->supplyCount[supplyPos]--;
        -: 1340:	 
        8: 1341:  return 0;
       10: 1342:}
        -: 1343:
        -: 1344:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1345:{
        -: 1346:  int i;
        -: 1347:	
        -: 1348:  //reset coin count
     1908: 1349:  state->coins = 0;
        -: 1350:
        -: 1351:  //add coins for each Treasure card in player's hand
    20256: 1352:  for (i = 0; i < state->handCount[player]; i++)
        -: 1353:    {
     8220: 1354:      if (state->hand[player][i] == copper)
        -: 1355:	{
     5138: 1356:	  state->coins += 1;
     5138: 1357:	}
     3082: 1358:      else if (state->hand[player][i] == silver)
        -: 1359:	{
      660: 1360:	  state->coins += 2;
      660: 1361:	}
     2422: 1362:      else if (state->hand[player][i] == gold)
        -: 1363:	{
      660: 1364:	  state->coins += 3;
      660: 1365:	}	
     8220: 1366:    }	
        -: 1367:
        -: 1368:  //add bonus
     1908: 1369:  state->coins += bonus;
        -: 1370:
     1908: 1371:  return 0;
        -: 1372:}
        -: 1373:
        -: 1374:
        -: 1375://end of dominion.c
