        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <assert.h>
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:#include <stdlib.h>
        -:    8:#include <string.h>
        -:    9:
        -:   10:// verify the test
        -:   11:int counterVariable = 0 ; 
        -:   12:
        -:   13:
        -:   14:// assertTrue function to collect coverage
        -:   15:void assertTrueFunction(int x, int y){
        -:   16:
    #####:   17:    if (x == y){
    #####:   18:        printf("Test: PASSED\n" );
    #####:   19:    }
        -:   20:
        -:   21:
        -:   22:    else {
    #####:   23:        printf("Test: FAILED" );
        -:   24:  
    #####:   25:    counterVariable++; 
        -:   26:}
        -:   27:
    #####:   28:}
        -:   29:
        -:   30:
        -:   31:
        -:   32:#define NOISY_TEST 1
        -:   33:
        -:   34:int main() {
        -:   35:    int i;
        2:   36:    int seed = 1000;
        2:   37:    int numPlayer = 2;
        2:   38:    int maxBonus = 10;
        -:   39:    int p, r, handCount;
        -:   40:    int bonus;
        2:   41:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   42:               , remodel, smithy, village, baron, great_hall};
        -:   43:    struct gameState G;
        2:   44:    int maxHandCount = 5;
        -:   45:    // arrays of all coppers, silvers, and golds
        -:   46:    int coppers[MAX_HAND];
        -:   47:    int silvers[MAX_HAND];
        -:   48:    int golds[MAX_HAND];
     2004:   49:    for (i = 0; i < MAX_HAND; i++)
        -:   50:    {
     1000:   51:        coppers[i] = copper;
     1000:   52:        silvers[i] = silver;
     1000:   53:        golds[i] = gold;
     1000:   54:    }
        -:   55:
        2:   56:    printf ("TESTING isGameOver():\n");
       12:   57:    for (p = 0; p < numPlayer; p++)
        -:   58:    {
       48:   59:        for (handCount = 1; handCount <= maxHandCount; handCount++)
        -:   60:        {
      480:   61:            for (bonus = 0; bonus <= maxBonus; bonus++)
        -:   62:            {
        -:   63:#if (NOISY_TEST == 1)
      220:   64:                printf("Test player %d with %d treasure card(s) and %d bonus.\n", p, handCount, bonus);
        -:   65:#endif
      220:   66:                memset(&G, 23, sizeof(struct gameState));   // clear the game state
      220:   67:                r = initializeGame(numPlayer, k, seed, &G); // initialize a new game
      220:   68:                G.handCount[p] = handCount;                 // set the number of cards on hand
      220:   69:                memcpy(G.hand[p], coppers, sizeof(int) * handCount); // set all the cards to copper
      220:   70:                updateCoins(p, &G, bonus);
        -:   71:#if (NOISY_TEST == 1)
        -:   72:                
      220:   73:                printf("G.coins = %d, expected = %d\n", G.coins, handCount * 1 + bonus);
        -:   74:#endif
      440:   75:                assert(G.coins == handCount * 1 + bonus); // check if the number of coins is correct
        -:   76:
      220:   77:                memcpy(G.hand[p], silvers, sizeof(int) * handCount); // set all the cards to silver
      220:   78:                updateCoins(p, &G, bonus);
        -:   79:#if (NOISY_TEST == 1)
      220:   80:                printf("G.coins = %d, expected = %d\n", G.coins, handCount * 2 + bonus);
        -:   81:#endif
      440:   82:                assert(G.coins == handCount * 2 + bonus); // check if the number of coins is correct
        -:   83:
      220:   84:                memcpy(G.hand[p], golds, sizeof(int) * handCount); // set all the cards to gold
        -:   85:   
      220:   86:                updateCoins(p, &G, bonus);
        -:   87:
        -:   88:
        -:   89:#if (NOISY_TEST == 1)
      220:   90:                printf("G.coins = %d, expected = %d\n", G.coins, handCount * 3 + bonus);
        -:   91:
        -:   92:
        -:   93:#endif
      440:   94:                assert(G.coins == handCount * 3 + bonus); // check if the number of coins is correct
      220:   95:            }
       20:   96:        }
        4:   97:    }
        -:   98:
        2:   99:    printf("All tests passed!\n");
        -:  100:
        2:  101:    return 0;
        -:  102:}
        -:  103:
        -:  104:
