        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <assert.h>
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:#include <stdlib.h>
        -:    8:#include <string.h>
        -:    9:
        -:   10:
        -:   11:// verify the test
        -:   12:int counterVariable = 0 ; 
        -:   13:
        -:   14:
        -:   15:// assertTrue function to collect coverage
        -:   16:void assertTrueFunction(int x, int y){
        -:   17:
       10:   18:  if (x == y){
       10:   19:    printf("Test: PASSED\n" );
       10:   20:  }
        -:   21:
        -:   22:
        -:   23:  else {
    #####:   24:    printf("Test: FAILED" );
        -:   25:  
    #####:   26:  counterVariable++; 
        -:   27:}
        -:   28:
       10:   29:}
        -:   30:
        -:   31:
        -:   32:
        -:   33:
        -:   34:int main() { 
        -:   35:
        -:   36:
        -:   37:
        2:   38:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   39:               , remodel, smithy, village, baron, great_hall};
        -:   40:
        2:   41:       int seed = 2000;
        -:   42:
        -:   43:
        -:   44:       
        -:   45:       struct gameState G;
        -:   46:
        -:   47:         
        2:   48:         printf ("TESTING supplyCount():\n");
        -:   49:            
        2:   50:              memset(&G, 23, sizeof(struct gameState));
        -:   51:         
        2:   52:          initializeGame(2, k, seed , &G);
        -:   53:
        -:   54:         
        -:   55:         // empty out the gold pile 
        -:   56:         
        2:   57:         printf("\nGold pile empty\n");
        -:   58:         
        -:   59:         
        2:   60:         G.supplyCount[gold] = 0; 
        2:   61:                    assertTrueFunction(gainCard(gold,&G,0,0), - 1);
        -:   62:        
        -:   63:
        2:   64:         G.supplyCount[gold] = 30; 
        -:   65:
        -:   66:         
        -:   67:
        -:   68:
        -:   69:
        2:   70:         printf("\n Card has been added to deck\n");
        -:   71:         
        2:   72:         int deckCount = G.deckCount[0];
        -:   73:         
        2:   74:         gainCard(gold,&G, 1 , 0); 
        -:   75:         
        2:   76:         assertTrueFunction(deckCount+1,G.deckCount[0]);
        -:   77:
        -:   78:
        2:   79:         printf("\nAdding card to hand\n");
        -:   80:         
        2:   81:         int handCount = G.handCount[0];
        -:   82:         
        2:   83:         gainCard(gold,&G, 2, 0 );
        -:   84:         
        2:   85:         assertTrueFunction(handCount + 1, G.handCount[0]);
        -:   86:
        -:   87:
        2:   88:        printf("\nAdding card to discard pile\n");
        -:   89:        
        2:   90:        int discardCount = G.discardCount[0];
        -:   91:        
        2:   92:        gainCard(gold,&G,0,0); 
        -:   93:        
        2:   94:        assertTrueFunction(discardCount+1, G.discardCount[0]);
        -:   95:    
        -:   96:
        -:   97:
        -:   98:
        -:   99:
        2:  100:        printf("\n Decreasing gold supply from hand\n");
        -:  101:        
        2:  102:        int goldSupply = G.supplyCount[gold];
        -:  103:       
        2:  104:        gainCard(gold, &G, 0, 0 ); 
        -:  105:        
        2:  106:        assertTrueFunction(goldSupply-1, G.supplyCount[gold]);
        -:  107:
        -:  108:
        -:  109:
        2:  110:      if (counterVariable){
        -:  111:
    #####:  112:      printf("\nTest: Test Failed\n");
        -:  113:     
    #####:  114:      printf("Test: Test Failed %d\n",counterVariable);
        -:  115:     
    #####:  116:     }
        -:  117:
        -:  118:     else {
        2:  119:      printf("\nTest: Test passed\n\n");
        -:  120:     }
        -:  121:
        2:  122:     return 0 ; 
        -:  123:
        -:  124:
        -:  125:
        -:  126:
        -:  127:
        -:  128:
        -:  129:}
