        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Demonstration of how to write unit tests for dominion-base
        -:    3: * Include the following lines in your makefile:
        -:    4: *
        -:    5: * testUpdateCoins: testUpdateCoins.c dominion.o rngs.o
        -:    6: *      gcc -o testUpdateCoins -g  testUpdateCoins.c dominion.o rngs.o $(CFLAGS)
        -:    7: * -----------------------------------------------------------------------
        -:    8: */
        -:    9:
        -:   10:#include "dominion.h"
        -:   11:#include "dominion_helpers.h"
        -:   12:#include <string.h>
        -:   13:#include <stdio.h>
        -:   14:#include <assert.h>
        -:   15:#include "rngs.h"
        -:   16:
        -:   17:int main() {
        -:   18:    int i;
        2:   19:    int seed = 1000;
        2:   20:    int numPlayer = 2;
        2:   21:    int maxBonus = 10;
        -:   22:    int p, r, handCount;
        -:   23:    int bonus;
        2:   24:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   25:               , remodel, smithy, village, baron, great_hall};
        -:   26:    struct gameState G;
        -:   27:	
        2:   28:    int maxHandCount = 5;
        -:   29:    // arrays of all coppers, silvers, and golds
        -:   30:    int coppers[MAX_HAND];
        -:   31:    int silvers[MAX_HAND];
        -:   32:    int golds[MAX_HAND];
     2004:   33:    for (i = 0; i < MAX_HAND; i++)
        -:   34:    {
     1000:   35:        coppers[i] = copper;
     1000:   36:        silvers[i] = silver;
     1000:   37:        golds[i] = gold;
     1000:   38:    }
        2:   39:	bonus = 0;
        2:   40:    printf ("TESTING Smithy():\n");
        2:   41:				numPlayer = 2;
        -:   42:
        2:   43:	printf("test 1 add smithy to index 0 (hand position 1) and use card effect of smithy\n");
        2:   44:                memset(&G, 23, sizeof(struct gameState));   // clear the game state
        2:   45:                r = initializeGame(numPlayer, k, seed, &G); // initialize a new game set the number of cards on hand															 
        -:   46:
        2:   47:				G.hand[1][0] = smithy;
        2:   48:				G.handCount[1]++;
        -:   49:
        2:   50:				G.whoseTurn = 1;
        2:   51:				int total = 0;
        -:   52:				int h;
        -:   53:				
        -:   54:				//printf("deck count is %d\n", G.deckCount[1]);//should be 11
        2:   55:				int firstDeckcount = G.deckCount[1];
      112:   56:				for (h = 0; h < 27; h++)	
       54:   57:					total += fullDeckCount(1, h, &G);
        -:   58:				
        2:   59:				int x = cardEffect(smithy, -1, -1, -1, &G, 0, bonus);//play smithy from index 0 of hand
        -:   60:								
        2:   61:				int newtotal = 0;
      112:   62:				for (h = 0; h < 27; h++)
       54:   63:					newtotal += fullDeckCount(1, h, &G);
        2:   64:				printf("test 1A: are there 3 cards in Player 2's hand?\n");
        2:   65:				if(G.handCount[1] == 3)
    #####:   66:					printf("test passed, there are three cards in Player 2's hand\n");
        -:   67:				else
        2:   68:					printf("test failed, there aren't three cards in Player 2's hand\n");
        2:   69:				printf("test 1B: were any cards trashed or added unnecessarily to Player 2's full deck?\n");
        2:   70:				if(total == newtotal)
    #####:   71:					printf("test passed, no cards were trashed unnecessarily from Player 2's full deck\n");
        2:   72:				else if(total > newtotal)
        2:   73:					printf("test failed, %d card(s) was/were trashed unnecessarily from Player 2's full deck\n", total-newtotal);
        -:   74:				else
    #####:   75:					printf("test failed, some cards were added unnecessarily to Player 2's full deck\n");
        2:   76:				printf("test 1C: were three cards drawn from the deck successfully?\n");
        -:   77:				//printf("initial deckCount is %d and then deck count is %d\n", firstDeckcount, G.deckCount[1]);
        2:   78:				if(G.deckCount[1] == (firstDeckcount - 3))
        2:   79:					printf("test passed, three cards were drawn from the deck successfully\n");
        -:   80:				else
    #####:   81:					printf("test failed, three cards weren't drawn from the deck successfully, %d cards were drawn\n", firstDeckcount-G.deckCount[1]);
        2:   82:printf("\ntest 2 add smithy to index 2 (hand position 3) and use card effect of smithy\n");
        2:   83:                memset(&G, 23, sizeof(struct gameState));   // clear the game state
        2:   84:                r = initializeGame(numPlayer, k, seed, &G); // initialize a new game
        -:   85:															// set the number of cards on hand
        -:   86:                
        2:   87:				G.hand[1][2] = smithy; //The third card of Player 2's hand changes to smithy
        2:   88:				G.handCount[1]++; //Increases player 2's hand count by 1
        -:   89:				
        2:   90:				G.whoseTurn = 1; //Changes the turn of the game to player 2
        2:   91:				total = 0;
        -:   92:				
        2:   93:				firstDeckcount = G.deckCount[1];
        -:   94:				//Test cards of all types to get the total number of cards
      112:   95:				for (h = 0; h < 27; h++)
       54:   96:					total += fullDeckCount(1, h, &G);
        -:   97:				
        2:   98:				int z = cardEffect(smithy, -1, -1, -1, &G, 2, bonus);//play smithy from index 0 of hand
        2:   99:				newtotal = 0;
      112:  100:				for (h = 0; h < 27; h++)
       54:  101:					newtotal += fullDeckCount(1, h, &G);
        2:  102:				printf("test 2A: are there 3 cards in Player 2's hand?\n");
        2:  103:				if(G.handCount[1] == 3)
    #####:  104:					printf("test passed, there are three cards in Player 2's hand\n");
        -:  105:				else
        2:  106:					printf("test failed, there aren't three cards in Player 2's hand\n");
        2:  107:				printf("test 2B: were any cards trashed unnecessarily from Player 2's hand?\n");
        -:  108:				//printf("the total is %d and newtotal is %d\n", total, newtotal);
        2:  109:				if(total == newtotal)
    #####:  110:					printf("test passed, no cards were trashed unnecessarily from Player 2's hand\n");
        2:  111:				else if (total > newtotal)
        2:  112:					printf("test failed, %d card(s) was/were trashed unnecessarily from Player 2's full deck\n", total-newtotal);
        -:  113:				else
    #####:  114:					printf("test failed, some cards were added unnecessarily\n");
        2:  115:				printf("test 2C: were three cards drawn from the deck successfully?\n");
        2:  116:				if(G.deckCount[1] == firstDeckcount - 3)
        2:  117:					printf("test passed, three cards were drawn from the deck successfully\n");
        -:  118:				else
    #####:  119:					printf("test failed, three cards weren't drawn from the deck successfully, %d cards were drawn\n", firstDeckcount-G.deckCount[1]);
        -:  120:
        -:  121:			
        -:  122:
        2:  123:    printf("All tests taken!\n");
        -:  124:
        2:  125:    return 0;
        -:  126:}
